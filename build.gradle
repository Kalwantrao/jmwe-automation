/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.6/samples
 * This project uses @Incubating APIs which are subject to change.
 */

// Run the scripts of jmwe-Conditions using ./gradlew conditions
// Run the scripts of jmwe-Validators using ./gradlew validators
// Run the scripts of jmwe-Postfunctions using ./gradlew postfunctions

buildscript {
    dependencies {
        classpath 'org.gint:gint:3.8.4'
        classpath 'org.gint:gint-atlassian:3.8.4'
        classpath "com.aventstack:extentreports:5.0.0"
    }
    repositories {
        flatDir { dirs 'libs' }
        mavenLocal()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
}

plugins {
    id "io.qameta.allure" version "2.9.6"
    id "net.saliman.properties" version "1.5.2"
    id "idea"
}

apply plugin: 'org.gint'
apply plugin: 'org.gint.atlassian'
apply plugin: "io.qameta.allure"


reporting {
    baseDir = "$buildDir/reports"
}

allure {
    report {
        reportDir.set(project.reporting.baseDirectory.dir("allure-report"))
    }
}

/*
configurations {
    localDeps
    localDeps.transitive = false
}

def appVersion = "8.6.0-SNAPSHOT"
dependencies {
    localDeps "com.innovalog.jmwe:jira-misc-workflow-extensions:$appVersion"
}
repositories {
    maven {
        url "$nexusSnapshotsUrl"
        credentials {
            username "$nexusUser"
            password "$nexusPassword"
        }
    }
    maven {
        url "$nexusReleasesUrl"
        credentials {
            username "$nexusUser"
            password "$nexusPassword"
        }
    }
}
ext.info =  gint.getJiraHelper().getServerInfoWithVerify()
gint.verbose = true

def appLibPath = "$buildDir/output/lib"
def appLibName = "JMWE.jar"
def appPath = "$appLibPath/$appLibName"

ext.gint = gint
gint.taskHelper.addSetUp('installAcli', [
        [
                name: 'Install Acli',
                action: 'installApp',
                level: false,
                app: '@default',
                parameters: [
                        app: '@default'
                ],
        ],
        [
                name: 'Add license Acli',
                action: 'addLicense',
                level: false,
                parameters: [
                        app: 'org.swift.jira.cli',
                        file: "${gint.directories.source + '/resources/aclilicense.txt'}"
                ],
        ],
])

tasks.register('copyJMWELib', Copy) {
    project.delete(files(appLibPath))
    from configurations.localDeps
    into appLibPath
    rename "(.*).jar", appLibName
    outputs.upToDateWhen { false }
}
gint.taskHelper.addTaskToGroup(copyJMWELib, "installJMWE")
gint.taskHelper.addSetUp('installJMWE', [
        [
                name: 'Install JMWE',
                action: 'installApp',
                level: false,
                dependsOn: ['copyJMWELib', 'installAcli'],
                app: "$jmweAppKey",
                parameters: [
                        file: "$appPath"
                ],
        ],
        [
                name: 'Add license JMWE',
                action: 'addLicense',
                level: false,
                parameters: [
                        app: 'com.innovalog.jmwe.jira-misc-workflow-extensions',
                        file: "${gint.directories.source + '/resources/jmwelicense.txt'}"
                ],
        ],
])

defaultTasks "installJMWE"
*/
def jmweConditions = 'src/itest-conditions/gradle'
def jmweValidators = 'src/itest-validators/gradle'
def jmwePostfunctions = 'src/itest-postfunctions/gradle'
def setUp = 'src/itest-setUp/gradle'

[setUp].each { folder ->
    if (file(folder).exists()) {
        def args = [
                '-DtargetDirectory=' + project.buildDir,
                '-DxmlReport',
                '-Dverbose',
                '-Dclean',
                '--continue',
                '-DsourceDirectory=src',
                "-Dcli=acli $server"
        ]
        gint.scriptRunner.add(
                taskNamePrefix: 'setup-server',
                directory: folder,
                args: args,
        )
    }
}

[setUp].each { folder ->
    if (file(folder).exists()) {
        def args = [
                '-DtargetDirectory=' + project.buildDir,
                '-DxmlReport',
                '-Dverbose',
                '-Dclean',
                '--continue',
                '-DsourceDirectory=src',
                "-Dcli=acli $cloud"
        ]
        gint.scriptRunner.add(
                taskNamePrefix: 'setup-cloud',
                directory: folder,
                args: args,
        )
    }
}

[jmweConditions,jmweValidators,jmwePostfunctions].each { folder ->
    if (file(folder).exists()) {
        def args = [
                '-DtargetDirectory=' + project.buildDir,
                '-DxmlReport=reports-server',
                '-Dverbose',
                '-Dclean',
                '--continue',
                '-DsourceDirectory=src',
                "-Dcli=acli $server"
        ]
                    gint.scriptRunner.add(
                            taskNamePrefix: "itestServer",
                            directory: folder,
                            args: args,
                    )
    }
}

[jmweConditions,jmwePostfunctions].each { folder ->
    if (file(folder).exists()) {
        def args = [
                '-DtargetDirectory=' + project.buildDir,
                '-DxmlReport=reports-cloud',
                '-Dverbose',
                '-Dclean',
                '--continue',
                '-DsourceDirectory=src',
                "-Dcli=acli $cloud" ,
        ]
        gint.scriptRunner.add(
                taskNamePrefix: "itestCloud",
                directory: folder,
                args: args,
        )
    }
}
