/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.6/samples
 * This project uses @Incubating APIs which are subject to change.
 */

// Run the scripts of jmwe-Conditions using ./gradlew conditions
// Run the scripts of jmwe-Validators using ./gradlew validators
// Run the scripts of jmwe-Postfunctions using ./gradlew postfunctions

buildscript {
    def gintVersion = findProperty('gintVersion') ?: System.getenv('GINT_VERSION') ?: '+'
    dependencies {
        classpath 'org.gint:gint:' + gintVersion
    }

    repositories {
        flatDir { dirs 'libs' }
        mavenLocal()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
}

plugins {
    id "net.saliman.properties" version "1.5.2"
    id "idea"
}
apply plugin: 'org.gint'

configurations {
    localDeps
    localDeps.transitive = false
}

def appVersion = "8.3.0-SNAPSHOT"
dependencies {
    localDeps "com.innovalog.jmwe:jira-misc-workflow-extensions:$appVersion"
}
repositories {
    maven {
        url "$nexusSnapshotsUrl"
        credentials {
            username "$nexusUser"
            password "$nexusPassword"
        }
    }
    maven {
        url "$nexusReleasesUrl"
        credentials {
            username "$nexusUser"
            password "$nexusPassword"
        }
    }
}

gint.verbose = true

defaultTasks 'installAppGroup','validators'

def appLibPath = "$buildDir/output/lib"
def appLibName = "JMWE.jar"
def appPath = "$appLibPath/$appLibName"

tasks.register('copyToLib', Copy) {
    project.delete(files(appLibPath))
    from configurations.localDeps
    into appLibPath
    rename "(.*).jar", appLibName
}

gint.taskHelper.addTaskToGroup(copyToLib, "installAppGroup")
gint.taskHelper.addSetUp("installAppGroup",
    [[name: 'installApp', description: 'jmwe app installed',
    cmd:[  /acli $jira -a installApp --app @default/,
           /acli $jira -a addLicense --app $cliAppKey --file "${gint.directories.source + '/resources/timeBombLicenses.txt'}"/,
           /acli $jira -a installApp --app $jmweAppKey --file "$appPath" /,
           /acli $jira -a addLicense --app $jmweAppKey --file "${gint.directories.source + '/resources/timeBombLicenses.txt'}"/,
		]
    ]]
)
/*
gint.taskHelper.addSetUp("addLicense",
    [[name: 'addLicense_jmwe',ext: 'cli', description: 'cli app license',
    cmd: /acli $jira -a addLicense --app $cliAppKey --file "${gint.directories.source + '/resources/timeBombLicenses.txt'}"/,
    ]]
)
gint.taskHelper.addSetUp("installAppCli",
    [[name: 'installApp_cli',ext: 'cli', description: 'cli app installed',
    cmd: /acli $jira -a installApp --app @default/ ]]
)
gint.taskHelper.addSetUp("addLicense",
    [[name: 'addLicense_cli',ext: 'cli', description: 'cli app license',
    cmd: /acli $jira -a addLicense --app $cliAppKey --file "${gint.directories.source + '/resources/timeBombLicenses.txt'}"/,
    ]]
)
*/

def itestDir = 'src'
def jmweConditions = 'src/itest-conditions/gradle'
def jmweValidators = 'src/itest-validators/gradle'
def jmwePostfunctions = 'src/itest-postfunctions/gradle'
def jmweAutomation = 'src/itest-automation/gradle'

[itestDir,jmweConditions].each { folder ->
  if (file(folder).exists()) {
      def args = [
          '-DtargetDirectory=' + project.buildDir,
          '-DxmlReport',
          '-Dverbose',
          '-Dclean',
          '--continue',
          '-DsourceDirectory=src/itest-conditions',
          "-Dcli=acli $jira" ,
      ]
      gint.scriptRunner.add(
          taskNamePrefix: 'conditions',
          directory: folder,
          args: args,
      )
  }
}

[itestDir,jmweValidators].each { folder ->
  if (file(folder).exists()) {
      def args = [
          '-DtargetDirectory=' + project.buildDir,
          '-DxmlReport',
          '-Dverbose',
          '-Dclean',
          '--continue',
          '-DsourceDirectory=src/itest-validators',
          "-Dcli=acli $jira" ,
      ]
      gint.scriptRunner.add(
          taskNamePrefix: 'validators',
          directory: folder,
          args: args,
      )
  }
}

[itestDir,jmwePostfunctions].each { folder ->
  if (file(folder).exists()) {
      def args = [
          '-DtargetDirectory=' + project.buildDir,
          '-DxmlReport',
          '-Dverbose',
          '-Dclean',
          '--continue',
          '-DsourceDirectory=src/itest-postfunctions',
          "-Dcli=acli $jira" ,
      ]
      gint.scriptRunner.add(
          taskNamePrefix: 'postfunctions',
          directory: folder,
          args: args,
      )
  }
}
[itestDir,jmweAutomation].each { folder ->
  if (file(folder).exists()) {
      def args = [
          '-DtargetDirectory=' + project.buildDir,
          '-DxmlReport',
          '-Dverbose',
          '-Dclean',
          '--continue',
          '-DsourceDirectory=src/itest-automation',
          "-Dcli=acli $jira" ,
      ]
      gint.scriptRunner.add(
          taskNamePrefix: 'automation',
          directory: folder,
          args: args,
      )
  }
}
