buildscript {
    dependencies {
        classpath 'org.gint:gint:3.8.4'
        classpath 'org.gint:gint-atlassian:3.8.4'
        classpath "com.aventstack:extentreports:5.0.0"
        classpath 'io.jsonwebtoken:jjwt-api:0.11.2'
        classpath 'io.jsonwebtoken:jjwt-impl:0.11.2'
        classpath 'io.jsonwebtoken:jjwt-orgjson:0.11.2'
        classpath 'com.mailosaur:mailosaur-java:7.13.1'
        classpath 'com.sun.mail:javax.mail:1.6.2'
        classpath 'org.jsoup:jsoup:1.14.3'
    }
    repositories {
        flatDir { dirs 'libs' }
        mavenLocal()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
}

plugins {
    id "io.qameta.allure" version "2.9.6"
    id "net.saliman.properties" version "1.5.2"
    id "idea"
    id 'java'
}

repositories {
    mavenCentral()
}

apply plugin: 'org.gint'
apply plugin: 'org.gint.atlassian'
apply plugin: "io.qameta.allure"

reporting {
    baseDir = "$buildDir/reports"
}

allure {
    report {
        reportDir.set(project.reporting.baseDirectory.dir("allure-report"))
    }
}
/*
ext.info =  gint.getJiraHelper().getServerInfoWithVerify()

configurations {
    localDeps
    localDeps.transitive = false
}

def appVersion = "8.6.3-SNAPSHOT"
dependencies {
    localDeps "com.innovalog.jmwe:jira-misc-workflow-extensions:$appVersion"
}

repositories {
    maven {
        url "$nexusSnapshotsUrl"
        credentials {
            username "$nexusUser"
            password "$nexusPassword"
        }
    }
    maven {
        url "$nexusReleasesUrl"
        credentials {
            username "$nexusUser"
            password "$nexusPassword"
        }
    }
}
gint.verbose = true

def appLibPath = "$buildDir/output/lib"
def appLibName = "JMWE.jar"
def appPath = "$appLibPath/$appLibName"

ext.gint = gint
gint.taskHelper.addSetUp('installAcli', [
        [
                name: 'Install Acli',
                action: 'installApp',
                level: false,
                app: '@default',
                parameters: [
                        app: '@default'
                ],
        ],
        [
                name: 'Add license Acli',
                action: 'addLicense',
                level: false,
                parameters: [
                        app: 'org.swift.jira.cli',
                        file: "${gint.directories.source + '/resources/aclilicense.txt'}"
                ],
        ],
])

tasks.register('copyJMWELib', Copy) {
    project.delete(files(appLibPath))
    from configurations.localDeps
    into appLibPath
    rename "(.*).jar", appLibName
    outputs.upToDateWhen { false }
}
gint.taskHelper.addTaskToGroup(copyJMWELib, "installJMWE")
gint.taskHelper.addSetUp('installJMWE', [
        [
                name: 'Install JMWE',
                action: 'installApp',
                //level: false,
                dependsOn: ['copyJMWELib', 'installAcli'],
                app: "$jmweAppKey",
                parameters: [
                        file: "$appPath"
                ],
        ],
        [
                name: 'Add license JMWE',
                action: 'addLicense',
                level: false,
                parameters: [
                        app: 'com.innovalog.jmwe.jira-misc-workflow-extensions',
                        file: "${gint.directories.source + '/resources/jmwelicense.txt'}"
                ],
        ],
])
*/

def src = 'src'
def jmweConditions = 'src/itest-conditions/gradle'
def jmweValidators = 'src/itest-validators/gradle'
def jmwePostfunction1 = 'src/itest-postfunction1/gradle'
def jmwePostfunction2 = 'src/itest-postfunction2/gradle'
def jmwePostfunction3 = 'src/itest-postfunction3/gradle'
def jmwePostfunction4 = 'src/itest-postfunction4/gradle'
def jmwePostfunction5 = 'src/itest-postfunction5/gradle'
def jmwePostfunction6 = 'src/itest-postfunction6/gradle'
def UI = 'src/itest-ui/gradle'
def jmweSharedExtensions = 'src/itest-sharedExtensions/gradle'
def email = 'src/itest-email/gradle'
def jmcf = 'src/itest-jmcf/gradle'
def JSM = 'src/itest-JSM/gradle'
def installApp = 'src/itest-installApp/gradle'
def sanity = 'src/itest-sanity/gradle'
def setUp = 'src/itest-setUp/gradle'

def argsServer = [
        '-DtargetDirectory=' + project.buildDir,
        '-DxmlReport',
        '-Dverbose',
        '-Dclean',
        '--continue',
        '-DsourceDirectory=src',
        "-Dcli=acli $server",
]

def argsCloud = [
        '-DtargetDirectory=' + project.buildDir,
        '-DxmlReport',
        '-Dverbose',
        '-Dclean',
        '--continue',
        '-DsourceDirectory=src',
        "-Dcli=acli $cloud",
]

[jmweSharedExtensions].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: 'itestServer-sharedExtensions',
                directory: folder,
                args: argsServer,
        )
    }
}
[jmcf].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: 'itestCloud-jmcf',
                directory: folder,
                args: argsCloud,
        )
    }
}

[installApp].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: 'itestCloud-installApp',
                directory: folder,
                args: argsCloud,
        )
    }
}

[setUp].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: 'setup-server',
                directory: folder,
                args: argsServer,
        )
    }
}

[jmweConditions].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: "itestServer-conditions",
                directory: folder,
                args: argsServer,
        )
    }
}

[jmweValidators].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: "itestServer-validators",
                directory: folder,
                args: argsServer,
        )
    }
}

[jmwePostfunction1].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: "itestServer-postfunctions1",
                directory: folder,
                args: argsServer,
        )
    }
}

[jmwePostfunction2].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: "itestServer-postfunctions2",
                directory: folder,
                args: argsServer,
        )
    }
}

[jmwePostfunction3].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: "itestServer-postfunctions3",
                directory: folder,
                args: argsServer,
        )
    }
}

[jmwePostfunction4].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: "itestServer-postfunctions4",
                directory: folder,
                args: argsServer,
        )
    }
}

[jmwePostfunction5].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: "itestServer-postfunctions5",
                directory: folder,
                args: argsServer,
        )
    }
}

[jmwePostfunction6].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: "itestServer-postfunctions6",
                directory: folder,
                args: argsServer,
        )
    }
}

[ sanity ].each {folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: "itestServer-sanity",
                directory: folder,
                args: argsServer,
        )
    }
}

[setUp].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: 'setup-cloud',
                directory: folder,
                args: argsCloud,
        )
    }
}

[jmweConditions].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: "itestCloud-conditions",
                directory: folder,
                args: argsCloud,
        )
    }
}

[jmweValidators].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: "itestCloud-validators",
                directory: folder,
                args: argsCloud,
        )
    }
}


[jmwePostfunction1].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: "itestCloud-postfunctions1",
                directory: folder,
                args: argsCloud,
        )
    }
}

[jmwePostfunction2].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: "itestCloud-postfunctions2",
                directory: folder,
                args: argsCloud,
        )
    }
}

[jmwePostfunction3].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: "itestCloud-postfunctions3",
                directory: folder,
                args: argsCloud,
        )
    }
}
[jmwePostfunction4].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: "itestCloud-postfunctions4",
                directory: folder,
                args: argsCloud,
        )
    }
}
[jmwePostfunction5].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: "itestCloud-postfunctions5",
                directory: folder,
                args: argsCloud,
        )
    }
}
[jmwePostfunction6].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: "itestCloud-postfunctions6",
                directory: folder,
                args: argsCloud,
        )
    }
}

[ sanity ].each {folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: "itestCloud-sanity",
                directory: folder,
                args: argsCloud,
        )
    }
}
[jmweSharedExtensions].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: 'itestCloud-sharedExtensions',
                directory: folder,
                args: argsCloud,
        )
    }
}
[UI].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: 'itestCloud-UI',
                directory: folder,
                args: argsCloud,
        )
    }
}
[JSM].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: 'itestCloud-JSM',
                directory: folder,
                args: argsCloud,
        )
    }
}

[src].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: 'itestServer',
                directory: folder,
                args: argsServer,
        )
    }
}

[email].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: 'itestCloud-email',
                directory: folder,
                args: argsCloud,
        )
    }
}
[email].each { folder ->
    if (file(folder).exists()) {
        gint.scriptRunner.add(
                taskNamePrefix: 'itestServer-email',
                directory: folder,
                args: argsServer,
        )
    }
}

