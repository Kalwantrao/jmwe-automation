/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.6/samples
 * This project uses @Incubating APIs which are subject to change.
 */

// Run the scripts of jmwe-Conditions using ./gradlew conditions
// Run the scripts of jmwe-Validators using ./gradlew validators
// Run the scripts of jmwe-Postfunctions using ./gradlew postfunctions

buildscript {
    def gintVersion = findProperty('gintVersion') ?: System.getenv('GINT_VERSION') ?: '+'
    dependencies {
        classpath 'org.gint:gint:' + gintVersion
    }
    repositories {
        flatDir { dirs 'libs' }
        mavenLocal()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
}
apply plugin: 'org.gint'


gint.verbose = true

defaultTasks 'validators'

gint.taskHelper.add(
    name: 'installApp', description: 'jmwe app installed',
    cmd: /acli jira -a installApp --app 'com.innovalog.jmwe.jira-misc-workflow-extensions' --file "jmwe-build\com_innovalog_jmwe_jira-misc-workflow-extensions_8.3.0-SNAPSHOT_jira-misc-workflow-extensions-8.3.0-20230327.063850-28.jar" /
)

def itestDir = 'src'
def jmweConditions = 'src/itest-conditions/gradle'
def jmweValidators = 'src/itest-validators/gradle'
def jmwePostfunctions = 'src/itest-postfunctions/gradle'
def jmweAutomation = 'src/itest-automation/gradle'

[itestDir,jmweConditions].each { folder ->
  if (file(folder).exists()) {
      def args = [
          '-DtargetDirectory=' + project.buildDir,
          '-DxmlReport',
          '-Dverbose',
          '-Dclean',
          '--continue',
          '-DsourceDirectory=src/itest-conditions',
          "-Dcli=acli jira" ,
      ]
      gint.scriptRunner.add(
          taskNamePrefix: 'conditions',
          directory: folder,
          args: args,
      )
  }
}

[itestDir,jmweValidators].each { folder ->
  if (file(folder).exists()) {
      def args = [
          '-DtargetDirectory=' + project.buildDir,
          '-DxmlReport',
          '-Dverbose',
          '-Dclean',
          '--continue',
          '-DsourceDirectory=src/itest-validators',
          "-Dcli=acli jira" ,
      ]
      gint.scriptRunner.add(
          taskNamePrefix: 'validators',
          directory: folder,
          args: args,
      )
  }
}

[itestDir,jmwePostfunctions].each { folder ->
  if (file(folder).exists()) {
      def args = [
          '-DtargetDirectory=' + project.buildDir,
          '-DxmlReport',
          '-Dverbose',
          '-Dclean',
          '--continue',
          '-DsourceDirectory=src/itest-postfunctions',
          "-Dcli=acli jira" ,
      ]
      gint.scriptRunner.add(
          taskNamePrefix: 'postfunctions',
          directory: folder,
          args: args,
      )
  }
}
[itestDir,jmweAutomation].each { folder ->
  if (file(folder).exists()) {
      def args = [
          '-DtargetDirectory=' + project.buildDir,
          '-DxmlReport',
          '-Dverbose',
          '-Dclean',
          '--continue',
          '-DsourceDirectory=src/itest-automation',
          "-Dcli=acli jira" ,
      ]
      gint.scriptRunner.add(
          taskNamePrefix: 'automation',
          directory: folder,
          args: args,
      )
  }
}
