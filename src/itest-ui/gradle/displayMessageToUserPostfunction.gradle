buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
    project.ext.seleniumVersion = findProperty('seleniumVersion') ?: System.getenv('SELENIUM_VERSION') ?: '3.14.+'
    dependencies { // needed here for selenium testing :(
        ['java', 'support', 'firefox-driver', 'chrome-driver', 'safari-driver', 'edge-driver'].each { entry ->
            classpath 'org.seleniumhq.selenium:selenium-' + entry + ':' + seleniumVersion
        }
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory + '/src/common/selenium.gradle'
apply from: gint.resourceDirectory +'/src/itest-ui/postfunction.gradle'

def functionKey = info?.isCloud ? "com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.${testCloudBuild}__DisplayMessageToUser" : 'com.innovalog.jmwe.jira-misc-workflow-extensions:display-message-to-user-function'

gint.getJiraHelper().getSeleniumHelper()
gint.helper.log 'selenium helper', gint.seleniumHelper.class.name

def title = "test_title"
def body = "test_body"
def testUrl = "https://appfire.com/"
def testUrlTitle = "Appfire.com"

def messageTitle = { setTitle ->
    def messageTitle = "messageTitle=$setTitle";
    return messageTitle;
}

def messageType = {String type ->
    def fields = "messageType=$type";
    return fields;
}

def url = { url ->
    def fields
    if(url == "appfire"){
        fields = ["addActionLink=true","actionType=url","actionUrl=$testUrl","actionTitle=$testUrlTitle"]
    }
    else {
        fields = ["addActionLink=false","actionType=url","actionUrl=","actionTitle="]
    }
    return fields
}

def messageBody = { text ->
    def fields = "messageBody=$text"
    return fields
}
def autoClose = { select ->
    def fields;
    if(select == 'true'){
        fields = "autoClose=true"
    }else {
        fields = "autoClose=false"
    }
    return fields
}
def defaultFieldsForDisplayMessage = [
        /import com.innovalog.groovy.messaging.MessageAction [new MessageAction("Action name", MessageAction.ActionType.GOTO_URL, "URL", true),new MessageAction("Action name", MessageAction.ActionType.GOTO_ISSUE, "Issue Key", true),new MessageAction("Action name", MessageAction.ActionType.TRANSITION_ISSUE,"21",false)]"/,
        "actionMode=single",
        "inNewWindow=false",
        "actionIssueKey=",
]

[
        'info',
        'success',
        'warning',
        'error'
].each {
    def transition = 'display_message_to_user_' + it
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"messageTitle\":\"$title\",\"messageBody\":\"$body\",\"messageType\":\"$it\",\"autoClose\":true}"
    def server = defaultFieldsServer + defaultFieldsForDisplayMessage + autoClose('true') + messageTitle(title) + messageBody(body) + messageType(it) + url("none")
    addTransitionFunction(transition, 'postfunction', isCloud ? cloud : server, functionKey)
}

[
        'info',
].each {
    def transition = 'display_message_to_user_url_' + it
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"messageTitle\":\"$title\",\"messageBody\":\"$body\",\"messageType\":\"info\",\"autoClose\":true,\"actionLink\":{\"title\":\"$testUrlTitle\",\"type\":\"url\",\"url\":\"$testUrl\"}}"
    def server = defaultFieldsServer + defaultFieldsForDisplayMessage + messageTitle(title) + autoClose('false') + messageBody(body) + messageType(it) + url("appfire")
    addTransitionFunction(transition, 'postfunction', isCloud ? cloud : server, functionKey)
}

[
        'info',
        'success',
        'warning',
        'error'
].each {
    def transition = 'display_message_to_user_if_condition_true_' + it
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.true,\"messageTitle\":\"$title\",\"messageBody\":\"$body\",\"messageType\":\"$it\",\"autoClose\":true}"
    def server = defaultFieldsServer + defaultFieldsForDisplayMessage + conditionalExecution.true + messageTitle(title) + messageBody(body) + messageType(it) + url("none") + autoClose('true')
    addTransitionFunction(transition, 'postfunction', isCloud ? cloud : server, functionKey)
}
def driver = gint.seleniumHelper

createWorkflowScheme()
createProject()

def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'defaultIssue')
def xpath = [
        clickTransitionTab : info?.isCloud? "//div[@data-testid='issue.views.issue-base.foundation.status.actions-wrapper']" : "//a[@id='opsbar-transitions_more']",
        url : info?.isCloud? "//*[contains(text(),'$testUrlTitle')]" : "//*[contains(text(),'$testUrlTitle')]",
]

def validateFlagMessageOnUI = { issueKey, transition, ext ->
    if (ext == "when condition false") {
            gint.taskHelper.add(
                    name: "validateFlagMessageOnUI_ $transition:$ext",
                    dependsOn: true,
                    inline: {
                        def displayedMessage = driver.findElement(id: "aui-flag-container", type: "id")
                        sleep(3000)
                        if (displayedMessage) {
                            gint.helper.log("info message found on issue: $issueKey", "after transition issue _$transition")
                        } else {
                            gint.helper.log("info message not found on issue: $issueKey", "after transition issue _$transition")
                            assert displayedMessage
                        }
                    }
            )
        }
}

def validateTitleOfFlagMessage = { issueKey, transition, ext ->
    if (ext == "when condition false") {
            gint.taskHelper.add(
                    name: "validateTitleOfFlagMessage $transition:$ext",
                    dependsOn: true,
                    inline: {
                        def displayTitle = driver.findElement(xpath: "//*[contains(text(),'$title - $issueKey')]", type: "xpath")
                        sleep(3000)
                        if (!displayTitle) {
                            gint.helper.log("message title not found", "after transition issue_ $transition")
                        } else {
                            gint.helper.log("unexpected message title found", "after transition issue_ $transition")
                            assert !displayTitle
                        }
                    }
            )
    }else {
            gint.taskHelper.add(
                    name: "validateTitleOnFlagMessage_ $transition:$ext",
                    dependsOn: true,
                    inline: {
                        def displayTitle = driver.findElement(xpath: "//*[contains(text(),'$title - $issueKey')]", type: "xpath")
                        sleep(3000)
                        if (displayTitle) {
                            gint.helper.log("expected message title found", "after transition issue_ $transition")
                        } else {
                            gint.helper.log("expected message title not found", "after transition issue_ $transition")
                        }
                    }
            )
    }
}

def validateBodyOfFlagMessage = { issueKey, transition, ext ->
    if (ext == "when condition false") {
            gint.taskHelper.add(
                    name: "validateBodyOfFlagMessage_ $transition:$ext",
                    dependsOn: true,
                    inline: {
                        def displayBody = driver.findElement(xpath: "//*[contains(text(),'$body')]", type: "xpath")
                        sleep(3000)
                        if (!displayBody) {
                            gint.helper.log("expected message body not found", "after transition issue_ $transition")
                        } else {
                            gint.helper.log("unexpected message body found", "after transition issue_ $transition")
                            assert !displayBody
                        }
                    }
            )
    }else {
            gint.taskHelper.add(
                    name: "validateBodyOfFlagMessage_ $transition:$ext",
                    dependsOn: true,
                    inline: {
                        def displayBody = driver.findElement(xpath: "//*[contains(text(),'$body')]", type: "xpath")
                        sleep(3000)
                        if (displayBody) {
                            gint.helper.log("expected message body found", "after transition issue_ $transition")
                        } else {
                            gint.helper.log("expected message body not found", "after transition issue_ $transition")
                        }
                    }
            )
    }
}

def validateUrlOnFlagMessage = { issueKey, transition, ext ->
        gint.taskHelper.add(
                name: "validateUrlOnFlagMessage_$transition:$ext",
                dependsOn: true,
                inline: {
                    def displayUrl = driver.findElement(xpath: "//*[contains(text(),'$testUrlTitle')]", type: "xpath")
                    sleep(3000)
                    if (displayUrl) {
                        gint.helper.log("expected url found", "after transition issue_ $transition")
                        driver.findAndClickElement(xpath: "//*[contains(text(),'$testUrlTitle')]", type: "xpath")
                        sleep(3000)
                        def appfireTitle = gint.seleniumHelper.driver.getTitle()
                        gint.helper.log 'appfireTitle', appfireTitle
                        assert appfireTitle == 'Home | Appfire'
                    } else {
                        gint.helper.log("expected url not found", "after transition issue_ $transition")
                        assert displayUrl
                    }
                }
        )
}

navigateToIssue({->defaultIssue[]}, "verify default configuration")

[
        'info',
        'error',
        'warning',
        'success'
].each {
    def transition = 'display_message_to_user_' + it
    clickOnTransitionTab({->defaultIssue[]}, transition, "verify default configuration")
    clickOnTransition(transition,"verify default configuration")
    transitionIssueSubmit(transition,"verify default configuration")
    validateFlagMessageOnUI({->defaultIssue[]}, transition, "verify default configuration")
    validateBodyOfFlagMessage({->defaultIssue[]}, transition, "verify default configuration")
    validateTitleOfFlagMessage({->defaultIssue[]}, transition, "verify default configuration")
    driver.close()
}

gint.taskHelper.add(
        action: "setFieldValue", ext: ":Priority to Low",
        sleep: sleep,
        parameters: [
                issue: {->defaultIssue[]},
                field: "Priority",
                value: "Low"
        ]
)

navigateToIssue({->defaultIssue[]}, "when verify conditional execution configuration_false")

[
        'info',
        'error',
        'warning',
        'success'
].each {
    def transition = 'display_message_to_user_if_condition_true_' + it
    clickOnTransitionTab({->defaultIssue[]},transition, "when condition false")
    clickOnTransition(transition, "when condition false")
    transitionIssueSubmit(transition, "when condition false")
    validateFlagMessageOnUI({->defaultIssue[]}, transition, "when condition false")
    validateBodyOfFlagMessage({->defaultIssue[]}, transition, "when condition false")
    validateTitleOfFlagMessage({->defaultIssue[]}, transition, "when condition false")
    driver.close()
}

gint.taskHelper.add(
        action: "setFieldValue", ext: ":Priority to High",
        sleep: sleep,
        parameters: [
                issue: {->defaultIssue[]},
                field: "Priority",
                value: "High"
        ]
)

navigateToIssue({->defaultIssue[]}, "to verify conditional execution configuration_true")

[
        'info',
        'error',
        'warning',
        'success'
].each {
    def transition = 'display_message_to_user_if_condition_true_' + it
    clickOnTransitionTab({->defaultIssue[]}, transition, "when condition true")
    clickOnTransition(transition, "when condition true")
    transitionIssueSubmit(transition, "when condition true")
    validateFlagMessageOnUI({->defaultIssue[]}, transition, "verify default configuration")
    validateBodyOfFlagMessage({->defaultIssue[]}, transition, "verify default configuration")
    validateTitleOfFlagMessage({->defaultIssue[]}, transition, "verify default configuration")
    driver.close()
}

navigateToIssue({->defaultIssue[]}, "to verify url configuration")
[
        'info',
].each {
    def transition = 'display_message_to_user_url_' + it
    clickOnTransitionTab({->defaultIssue[]}, transition, "verify url configuration")
    clickOnTransition(transition, "verify url configuration")
    transitionIssueSubmit(transition, "verify url configuration")
    validateFlagMessageOnUI({->defaultIssue[]}, transition, "verify url configuration")
    validateBodyOfFlagMessage({->defaultIssue[]}, transition, "verify url configuration")
    validateTitleOfFlagMessage({->defaultIssue[]}, transition, "verify url configuration")
    validateUrlOnFlagMessage({->defaultIssue[]}, transition, "verify url configuration")
    driver.close()
}
