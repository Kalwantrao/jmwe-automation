//To run  this using gradle open command line in project's root directory and run below command on windows
//gradlew -b src/itest-conditions/gradle/relatedIssuesStatusCondition.gradle -Pcli="acli jira" -Dclean

buildscript {
    def gintVersion = findProperty('gintVersion') ?: System.getenv('GINT_VERSION') ?: '+'
    dependencies {
        classpath 'org.gint:gint-atlassian:' + gintVersion
    }
    repositories {
        flatDir { dirs 'libs' }
        mavenLocal()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.directories.resource + '/common/tearDown.gradle'
apply from: 'configConditions/addRelatedIssuesStatusCondition.gradle'
apply from: gint.directories.resource + '/common/setUp.gradle'

def info = gint.getJiraHelper().getServerInfoWithVerify() // Verify access to Jira instance otherwise end test if server not available
def project = gint.getJiraHelper().getProjectKey()	//get project key using jira helper functions
def user = info.user
def userqa1 = project.toLowerCase()+'qa1'
def userqa2 = project.toLowerCase()+'qa2'
def userdev1 = project.toLowerCase()+'dev1'
def userdev2 = project.toLowerCase()+'dev2'

def transition = 'relatedIssuesStatusCondition'

def saved =	[:]
def savedIssues = [:]
gint.xmlReport = true	//xml report generates in projects root directory
gint.verbose = true

// Create issues
(1..8).each { number ->
def type
	if(number == 1)
		type = 'Bug'
	else if(number == 2)
		type = 'Bug'
	else if(number == 3)
		type = 'Story'
	else if(number == 4)
		type = 'Story'
	else if(number == 5)
		type = 'Bug'
	else if(number == 6)
		type = 'Bug'
	else if(number == 7)
		type = 'Bug'
	else if(number == 8)
		type = 'Bug'

def summary
	if (number == 1)
		summary = 'subtaskOfCurrentIssueMustBeInToDo'
	else if(number == 2)
		summary = 'parentIssueOfCurrentSubtaskMustBeInToDo'
	else if(number == 3)
		summary = 'storyBelongToCurrentEpicMustBeInToDo'
	else if(number == 4)
		summary = 'epicOfCurrentStoryMustBeInToDo'
	else if(number == 5)
		summary = 'issueLinkedByAnyLinkTypeMustBeInToDo'
	else if(number == 6)
		summary = 'issueLinkByBlocksLinkTypeMustBeInToDo'
	else if(number == 7)
		summary = 'issuesReturnByGroovyScriptMustBeInToDo'
	else if(number == 8)
		summary = 'issuesReturnByJqlSearchMustBeInToDo'

def parent
	if(number == 2)
		parent = ~/${project}-1/
	else
		parent = null

def field
	if(number == 3)
		field = "Epic Name"
	else if(number == 4)
		field = "Epic Link"
	else
		field = null
def value
	if(number == 3)
		value = "Epic Name"
	else if(number == 4)
		value = ~/${project}-3/
	else
		value = null

	    gint.taskHelper.add(
        [action: 'createIssue', ext: number,
        dependsOn: true,
        group: 'create',
        project: project,
    	field: field,
        value: value,
        parameters: [
        	type: type,
            summary: summary ,
            description: 'relatedIssuesStatusCondition' + number,
        ],
        stopOnFail: true,
        finalClosure: { Task task ->
            saved.issue = gint.searchForIssueKey(task.outData)
            savedIssues[number] = saved.issue
            gint.helper.logVarWithFormat('Create Issues to validate the related issues status condition')
        },
    ],
)
}
// link the issue to any link type and blocks type
gint.taskHelper.add(
	[action: 'run',ext:'linkIssues',
	dependsOn: true,
		parameters:[
			input:[
				/-a linkIssue --issue ${project}-5 --toIssue ${project}-6 --link "Relates"/,
				/-a linkIssue --issue ${project}-6 --toIssue ${project}-5 --link "Blocks"/,
				 ],
			],
	],
)

(1..8).each{ number ->
def data = ~/Successfully transitioned issue ${project}-\d+ with transition '${transition + number}'./
def expected = [ 0 ]

    gint.taskHelper.add('transitionIssueAll', [
        [action: 'transitionIssue', ext: 'requireRelatedIssuesInGivenStatus'+number,
            dependsOn: true,
            expected: expected,
            parameters: [
                issue: {-> savedIssues[number]  },
                transition: transition + number,
				],
			data:[ data ],
            finalClosure:{ Task task ->
            	gint.helper.logVarWithFormat('Should not throw error as related issues Status should be  in To Do ')

            },

        ],
    ])
}


