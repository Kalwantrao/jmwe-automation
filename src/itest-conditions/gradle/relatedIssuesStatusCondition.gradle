
/*
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/utils.gradle'

tearDown()
addWorkflow()

def fieldsToRemoveServer = [
        "currentIssue",
]
fieldsToRemoveServer.each { key ->
    relatedIssueServer.remove(key)
}
project.ext.statusIds = [ // statusIds.inProgress
      toDo: 10000,
      inProgress: 3,
      inReview : 10103,
      done : 10001
]

def relatedIssue = info?.isCloud ? relatedIssueCloud : relatedIssueServer
def functionKey = info?.isCloud? functionKey.relatedIssuesStatusConditionCloud : functionKey.relatedIssuesStatusConditionServer
def defaultFieldsCloud = ["condition.id=7e7f0c41-7aa4-4ff9-896c-ff1fe247a67f"]

def defaultFields = [ "correlationId=" ]

def issueType = [
        any : [ "selectedIssueType=" ],
        story : [ "selectedIssueType=$issueType.story" ],
        task : [ "selectedIssueType=$issueType.task" ],
        bug : [ "selectedIssueType=$issueType.bug" ],
        initiative: [ "selectedIssueType=$issueType.initiative" ]
]
def mode = [
        all : [ "conditionMode=all-in-status" ],
        one : ["conditionMode=one-in-status"],
        none : ["conditionMode=none-in-status"],
        oneNot : ["conditionMode=one-not-in-status"]
]
def statuses = [
        inProgress : ["issue_statuses=$statusIds.inProgress" ],
        toDo : [ "issue_statuses=$statusIds.toDo" ],
        inReview : [ "issue_statuses=$statusIds.inReview" ],
        done : [ "issue_statuses=$statusIds.done" ]
]

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'allIssuesMustBe_InProgress'
    def server = defaultFields + issueType.any + "selectedLinkType=$value" + mode.all + statuses.inProgress
    addTransitionFunction(transition + i, 'condition', server, functionKey)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'atLeastOneIssueMustBe_InProgress'
    def server = defaultFields + issueType.any + "selectedLinkType=$value" + mode.one + statuses.inProgress
    addTransitionFunction( transition + i, 'condition', server, functionKey)
}
relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'noIssueMustBe_InProgress'
    def server = defaultFields + issueType.any + "selectedLinkType=$value" + mode.none + statuses.inProgress
    addTransitionFunction(transition + i, 'condition', server, functionKey)
}
relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'oneIssueMustNotBe_InProgress'
    def server = defaultFields + issueType.any + "selectedLinkType=$value" + mode.oneNot + statuses.inProgress
    addTransitionFunction(transition + i, 'condition', server, functionKey)
}
relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'allIssuesMustBe_ToDo'
    def server = defaultFields + issueType.any + "selectedLinkType=$value" + mode.all + statuses.toDo
    addTransitionFunction(transition + i, 'condition', server, functionKey)
}

relatedIssue.eachWithIndex { key, value, i ->
    def server = defaultFields + issueType.any + "selectedLinkType=$value" + mode.one + statuses.toDo
    def transition = 'atLeastOneIssueMustBe_ToDo'
    addTransitionFunction( transition + i, 'condition', server, functionKey)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'noIssueMustBe_ToDo'
    def server = defaultFields + issueType.any + "selectedLinkType=$value" + mode.none + statuses.toDo
    addTransitionFunction(transition + i, 'condition', server, functionKey)
}
relatedIssue.eachWithIndex { key, value, i ->
    def server = defaultFields + issueType.any + "selectedLinkType=$value" + mode.oneNot + statuses.toDo
    def transition = 'oneIssueMustNotBe_ToDo'
    addTransitionFunction(transition + i, 'condition', server, functionKey)
}

['allIssuesInProgress_Task'].each {
    def server = defaultFields + issueType.task + "selectedLinkType=$relatedIssueServer.parentIssue" + mode.all + statuses.inProgress
    addTransitionFunction(it, 'condition', server, functionKey)
}
['allIssuesInProgress_Story'].each {
    def server = defaultFields + issueType.story + "selectedLinkType=$relatedIssueServer.parentIssue" + mode.all + statuses.inProgress
    addTransitionFunction(it, 'condition', server, functionKey)
}

createWorkflowScheme()
createProject()

def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'current')
def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[] }], 'Sub-task')
def subtask2 = createIssue([type: 'Sub-task', summary: 'Subtask2', parent: { -> parent[] }], 'Sub-task2')
def subtask3 = createIssue([type: 'Sub-task', summary: 'Subtask3', parent: { -> parent[] }], 'Sub-task3')
def epic = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic')
def issueBelongsToEpic = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {->epic[]}], 'BelongsToEpic')
def issueBelongsToEpic2 = createIssue([type: 'Task', summary: 'issueBelongsToEpic2', field: "Epic Link", value: {->epic[]}], 'BelongsToEpic2')
def issueBelongsToEpic3 = createIssue([type: 'Task', summary: 'issueBelongsToEpic3', field: "Epic Link", value: {->epic[]}], 'BelongsToEpic3')
def initiative = createIssue([type: 'Initiative', summary: 'JMWE_Issue'], 'Initiative')
def epic_initiative = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative')
def epic_initiative2 = createIssue([type: 'Epic', summary: 'epic_initiative2', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative2')
def epic_initiative3 = createIssue([type: 'Epic', summary: 'epic_initiative3', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative3')
def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def blocks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'blocks')
def blocks2 = createIssue([type: 'Task', summary: 'blocks2'], 'blocks2')
def blocks3 = createIssue([type: 'Task', summary: 'blocks3'], 'blocks3')
def clones = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'clones')
def clones2 = createIssue([type: 'Task', summary: 'clones2'], 'clones2')
def clones3 = createIssue([type: 'Task', summary: 'clones3'], 'clones3')
def duplicates = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'duplicates')
def duplicates2 = createIssue([type: 'Task', summary: 'duplicates2'], 'duplicates2')
def duplicates3 = createIssue([type: 'Task', summary: 'duplicates3'], 'duplicates3')
def relatesTo = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'relatesTo')
def relatesTo2 = createIssue([type: 'Task', summary: 'relatesTo2'], 'relatesTo2')
def relatesTo3 = createIssue([type: 'Task', summary: 'relatesTo3'], 'relatesTo3')
def jqlIssue = createIssue([type: 'Task', summary: 'JQL_ISSUE'], 'jqlIssue')
def jqlIssue2 = createIssue([type: 'Task', summary: 'JQL_ISSUE'], 'jqlIssue2')
def jqlIssue3 = createIssue([type: 'Task', summary: 'JQL_ISSUE'], 'jqlIssue3')

updateIssue([issue: {->epic_initiative[]}, field: "Parent Link", value: {->initiative[]}], "parent initiative child epic")
updateIssue([issue: {->epic_initiative2[]}, field: "Parent Link", value: {->initiative[]}], "parent initiative child epic2")
updateIssue([issue: {->epic_initiative3[]}, field: "Parent Link", value: {->initiative[]}], "parent initiative child epic3")

def linkIssuesMap = [
        blocks : {->blocks[]},
        clones : {->clones[]},
        duplicates : {->duplicates[]},
        'relates to': {->relatesTo[]}
]
linkIssuesMap.eachWithIndex { key, value, i ->
    linkIssue([issue: {->issueLinks[]}, toIssue: value, link: "$key"], key)
}
def linkIssuesMap2 = [
        blocks : {->blocks2[]},
        clones : {->clones2[]},
        duplicates : {->duplicates2[]},
        'relates to': {->relatesTo2[]}
]
linkIssuesMap2.eachWithIndex { key, value, i ->
    linkIssue([issue: {->issueLinks[]}, toIssue: value, link: "$key"], key + 2)
}

def linkIssuesMap3 = [
        blocks : {->blocks3[]},
        clones : {->clones3[]},
        duplicates : {->duplicates3[]},
        'relates to': {->relatesTo3[]}
]
linkIssuesMap3.eachWithIndex { key, value, i ->
    linkIssue([issue: {->issueLinks[]}, toIssue: value, link: "$key"], key + 3)
}

def relatedIssuesMapCloud = [
        {->issueLinks[]} : {->blocks[]},
        {->issueLinks[]} : {->blocks[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->clones[]},
        {->clones[]} : {->issueLinks[]},
        {->issueLinks[]} : {->duplicates[]},
        {->duplicates[]} : {->issueLinks[]},
        {->issueLinks[]} : {->relatesTo[]},
]


def relatedIssuesMapServer = [
       {->parent[]} : {->subtask[]},
        {->subtask[]} : {->parent[]},
        {->epic[]} : {->issueBelongsToEpic[]},
        {->issueBelongsToEpic[]} : {->epic[]},
        {-> initiative[]} : {->epic_initiative[]},
        {-> epic_initiative[]} : {->initiative[]},
       {->issueLinks[]} : {->blocks[]},
        {->issueLinks[]} : {->blocks[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->clones[]},
        {->clones[]} : {->issueLinks[]},
        {->issueLinks[]} : {->duplicates[]},
        {->duplicates[]} : {->issueLinks[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->issueLinks[]} : {->jqlIssue[]},
]

def relatedIssuesMap = info?.isCloud ? relatedIssuesMapCloud : relatedIssuesMapServer

['oneIssueMustNotBe_InProgress','noIssueMustBe_InProgress'].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ': when linked issues not in selected status ie In Progress_checkSuccess :'+ it + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
        ])
    }
}

['allIssuesMustBe_InProgress','atLeastOneIssueMustBe_InProgress'].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ': when linked issues not in selected status ie In Progress_check error :' + it +i,
                 expected  : -1,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
        ])
    }
}

['oneIssueMustNotBe_ToDo','noIssueMustBe_ToDo'].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ': when all linked issues in selected status ie To Do_checkError :'+ it + i,
                 expected: -1,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
        ])
    }
}

['allIssuesMustBe_ToDo','atLeastOneIssueMustBe_ToDo'].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ': when all linked issues in selected status ie To Do_check success :' + it +i,
                 expected  : 0,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
        ])
    }
}

['allIssuesInProgress_Task'].each {
    gint.taskHelper.add([
            [action    : 'transitionIssue', ext: ': when issueType is task type :' + it,
             expected  : -1,
             parameters: [
                     issue     : {->subtask[]},
                     transition: it,
             ],
            ],
            [action: 'updateIssue',ext: it,
                parameters: [
                        issue: {->parent[]},
                        issueType: 'Story'
                ]
            ],
            [action    : 'transitionIssue', ext: ': when issueType is story type :' + it,
             expected  : 0,
             parameters: [
                     issue     : {->subtask[]},
                     transition: it,
             ],
            ],
    ]
    )
}
['allIssuesInProgress_Story'].each {
    gint.taskHelper.add([
            [action    : 'transitionIssue', ext: ': when issueType is story type :' + it,
             expected  : -1,
             parameters: [
                     issue     : {->subtask[]},
                     transition: it,
             ],
            ],
            [action: 'updateIssue',ext: it,
             parameters: [
                     issue: {->parent[]},
                     issueType: 'Task'
             ]
            ],
            [action    : 'transitionIssue', ext: ': when issueType is task type :' + it,
             expected  : 0,
             parameters: [
                     issue     : {->subtask[]},
                     transition: it,
             ],
            ],
    ]
    )
}

 */

/*
1. Each sub-task of the current issue must be in one of the following statuses: IN PROGRESS - positives and negatives = "DONE"
2.Each issue linked to the current issue through the clones link type must be in one of the following statuses: IN PROGRESS = "DONE"
 - positives- selected link type issues = "DONE"
 - negatives- other link types = "DONE"
3.Each sub-task of the current issue must be in one of the following statuses: CONDITION1 - when condition1 is not a current workflow status = "Not Supported by acli"
4.Each Initiative/Bug/story/task/epic sub-task of the current issue must be in one of the following statuses: CONDITION1 = "Not Supported by acli"
5.Each issue of issue type Story that belongs to the current Epic must be in one of the following statuses: IN PROGRESS = "ToDo"
    create issues which belongs to epic and not belongs to epic and check impact on both types of issues
6.Add and delete transition steps should not allowed when it in use = "Not Supported by acli"
 */

