buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/utils.gradle'

tearDown()
addWorkflow()

if(!isCloud){
    ['hideTransitionCondition'].each {transitions ->
        def functionKey = 'com.innovalog.jmwe.jira-misc-workflow-extensions:non-interactive-condition'
        addTransitionFunction(transitions, 'condition', defaultFieldsServer, functionKey)
    }
}

def previousStatusServer = [
        previousStatusCondition : [ defaultFieldsServer + "issue_statuses=$ToDo" ] ,
        selectStatusInProgress_reverse : [ defaultFieldsServer + "issue_statuses=$InProgress" + "not=yes" ],
        selectStatusToDo_reverse : [ defaultFieldsServer + "issue_statuses=$ToDo" + "not=yes" ],
        mostRecentStatusOnly : [ defaultFieldsServer + "issue_statuses=$InProgress" + "mostRecentOnly=yes" ],
        includeCurrentStatusInProgress : [defaultFieldsServer + "issue_statuses=$InProgress" + "includeCurrent=yes" ],
        previousStatusIncludeCurrentStatusMustBeToDo : [defaultFieldsServer + "issue_statuses=$ToDo" + "includeCurrent=yes" ],
        previousStatusSelectMultipleStatuses : [defaultFieldsServer + "issue_statuses=$InProgress,$InReview" ],
]

previousStatusServer.eachWithIndex { transitions, fields, i->
    def functionKey = 'com.innovalog.jmwe.jira-misc-workflow-extensions:previousstatus-condition'
    if(!isCloud) {
        addTransitionFunction(transitions, 'condition', fields, functionKey)
}
}


createWorkflowScheme()
createProject()


def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'defaultIssue')

// HIDE_TRANSITION_CONDITION_TC_06_Verify transition tab eg $it after apply_Hide Transition Condition_ on ToDo status and current status of Issue is also ToDo
[
        'hideTransitionCondition',
].each {
    if(!isCloud) {
        gint.taskHelper.add([
                action    : 'transitionIssue',
                ext       : ":HIDE_TRANSITION_CONDITION_TC_06_Verify transition tab eg $it after apply_Hide Transition Condition_ on ToDo status and current status of Issue is also ToDo",
                onlyIf    : !isCloud,
                expected  : -1,
                parameters: [transition: it, issue: { -> defaultIssue[] },
                ],
        ])
    }
}

// PREVIOUS_STATUS_CONDITION_TC_16_Verify the Previous Status without selecting any Options_when issues previous status is not in selected status
[
        'previousStatusCondition',
].each {
    if(!isCloud) {
        gint.taskHelper.add([
                action    : 'transitionIssue',
                ext       : ":PREVIOUS_STATUS_CONDITION_TC_16_Verify the Previous Status without selecting any Options_when issues previous status is not in selected status:",
                onlyIf    : !isCloud,
                expected  : -1,
                parameters: [
                        transition: it,
                        issue     : { -> defaultIssue[] },
                ],
        ])
    }
}

// PREVIOUS_STATUS_CONDITION_TC_19_Verify for the option: Most recent status only_when issues most recent status is not in selected status
[
        'mostRecentStatusOnly',
].each {
    if(!isCloud) {
        gint.taskHelper.add([
                action    : 'transitionIssue',
                ext       : ": PREVIOUS_STATUS_CONDITION_TC_19_Verify for the option: Most recent status only_when issues most recent status is not in selected status:",
                onlyIf    : !isCloud,
                expected  : -1,
                parameters: [
                        transition: it,
                        issue     : { -> defaultIssue[] },
                ],
        ])
    }
}

// PREVIOUS_STATUS_CONDITION_TC_21_Verify for the Include current status option_when issues previous and current status is not in selected status
[
        'includeCurrentStatusInProgress',
].each {
    if(!isCloud) {
        gint.taskHelper.add([
                action    : 'transitionIssue',
                ext       : ": PREVIOUS_STATUS_CONDITION_TC_21_Verify for the Include current status option_when issues previous and current status is not in selected status:",
                onlyIf    : !isCloud,
                expected  : -1,
                parameters: [
                        transition: it,
                        issue     : { -> defaultIssue[] },
                ],
        ])
    }
}

// PREVIOUS_STATUS_CONDITION_TC_23-Verify for the Reverse condition option_when issues previous status is not in selected status
[
        'selectStatusInProgress_reverse',
].each {
    if(!isCloud) {
        gint.taskHelper.add([
                action    : 'transitionIssue',
                ext       : ":PREVIOUS_STATUS_CONDITION_TC_23-Verify for the Reverse condition option:",
                onlyIf    : !isCloud,
                expected  : 0,
                parameters: [
                        transition: it,
                        issue     : { -> defaultIssue[] },
                ],
        ])
    }
}

// transition issue to set the previous status to In Progress
[
        'In Progress',
        'To Do',
].each {
    if(!isCloud) {
        gint.taskHelper.add([
                action    : 'transitionIssue',
                ext       : ": with $it _ to check previous status options: ",
                onlyIf    : !isCloud,
                expected  : 0,
                parameters: [
                        transition: it,
                        issue     : { -> defaultIssue[] },
                ],
        ])
    }
}

// PREVIOUS_STATUS_CONDITION_TC_19_Case_01-Verify for the option: Most recent status only_when issues most recent status is in selected status
[
        'mostRecentStatusOnly',
].each {
    if(!isCloud) {
        gint.taskHelper.add([
                action    : 'transitionIssue',
                ext       : ":PREVIOUS_STATUS_CONDITION_TC_19_Case_01-Verify for the option: Most recent status only_when issues most recent status is in selected status: ",
                onlyIf    : !isCloud,
                expected  : 0,
                parameters: [
                        transition: it,
                        issue     : { -> defaultIssue[] },
                ],
        ])
    }
}

// PREVIOUS_STATUS_CONDITION_TC_16_Case_01_Verify the Previous Status without selecting any Options_when issues previous status is in selected status
[
        'previousStatusCondition',
].each {
    if(!isCloud) {
        gint.taskHelper.add([
                action    : 'transitionIssue',
                ext       : ":PREVIOUS_STATUS_CONDITION_TC_16_Case_01_Verify the Previous Status without selecting any Options_when issues previous status is in selected status: ",
                onlyIf    : !isCloud,
                expected  : 0,
                parameters: [
                        transition: it,
                        issue     : { -> defaultIssue[] },
                ],
        ])
    }
}

// PREVIOUS_STATUS_CONDITION_TC_21_Case_01-Verify for the Include current status option_when issues previous and current status is in selected status
[
        'previousStatusIncludeCurrentStatusMustBeToDo',
].each {
    if(!isCloud) {
        gint.taskHelper.add([
                action    : 'transitionIssue',
                ext       : ":PREVIOUS_STATUS_CONDITION_TC_21_Case_01-Verify for the Include current status option_when issues previous and current status is in selected status: ",
                onlyIf    : !isCloud,
                expected  : 0,
                parameters: [
                        transition: it,
                        issue     : { -> defaultIssue[] },
                ],
        ])
    }
}

// PREVIOUS_STATUS_CONDITION_TC_20_Case_01-Verify the multiple Options selection_when issues previous status is in one of the selected status
[
        'previousStatusSelectMultipleStatuses'
].each {
    if(!isCloud) {
        gint.taskHelper.add([
                action    : 'transitionIssue',
                ext       : ":PREVIOUS_STATUS_CONDITION_TC_20_Case_01-Verify the multiple Options selection_when issues previos status is in one of the selected status: ",
                onlyIf    : !isCloud,
                expected  : 0,
                parameters: [
                        transition: it,
                        issue     : { -> defaultIssue[] },
                ],
        ])
    }
}

// PREVIOUS_STATUS_CONDITION_TC_23_Case_01-Verify for the Reverse condition option_when issues previous status is in selected status_when reverse option selected
[
        'selectStatusToDo_reverse',
].each {
    if(!isCloud) {
        gint.taskHelper.add([
                action    : 'transitionIssue',
                ext       : ":PREVIOUS_STATUS_CONDITION_TC_23_Case_01-Verify for the Reverse condition option_when issues previous status is in selected status_when reverse option selected",
                onlyIf    : !isCloud,
                expected  : -1,
                parameters: [
                        transition: it,
                        issue     : { -> defaultIssue[] },
                ],
        ])
    }
}

// PREVIOUS_STATUS_CONDITION_TC_23_Case_02-Verify for the Reverse condition option_when issues previous status is in selected status_when reverse option selected
[
        'selectStatusInProgress_reverse'
].each {
    if(!isCloud) {
        gint.taskHelper.add([
                action    : 'transitionIssue',
                ext       : ":PREVIOUS_STATUS_CONDITION_TC_23_Case_02-Verify for the Reverse condition option_when issues previous status is in selected status_when reverse option selected:",
                onlyIf    : !isCloud,
                expected  : -1,
                parameters: [
                        transition: it,
                        issue     : { -> defaultIssue[] },
                ],
        ])
    }
}

def prevStatusInReview = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'prevStatusInProgress')

// PREVIOUS_STATUS_CONDITION_TC_20_Case_02-Verify the multiple Options selection_when issues previous status is not in one of the selected status
[
        'previousStatusSelectMultipleStatuses'
].each {
    if(!isCloud) {
        gint.taskHelper.add([
                action    : 'transitionIssue',
                ext       : ":PREVIOUS_STATUS_CONDITION_TC_20_Case_02-Verify the multiple Options selection_when issues previous status is not in one of the selected status:",
                onlyIf    : !isCloud,
                expected  : -1,
                parameters: [
                        transition: it,
                        issue     : { -> prevStatusInReview[] },
                ],
        ])
    }
}

// set previous status to selected
[		'In Review',
         'To Do',
].each {
    if(!isCloud) {
        gint.taskHelper.add([
                action    : 'transitionIssue',
                ext       : ": with $it _ to check multiple status options: ",
                onlyIf    : !isCloud,
                expected  : 0,
                parameters: [
                        transition: it,
                        issue     : { -> prevStatusInReview[] },
                ],
        ])
    }
}

// PREVIOUS_STATUS_CONDITION_TC_20_Case_03-Verify the multiple Options selection_when issues previous status is not in one of the selected status
[
         'previousStatusSelectMultipleStatuses'
].each {
    if(!isCloud) {
        gint.taskHelper.add([
                action    : 'transitionIssue',
                ext       : ":PREVIOUS_STATUS_CONDITION_TC_20_Case_03-Verify the multiple Options selection_when issues previous status is in one of the selected status:",
                onlyIf    : !isCloud,
                expected  : 0,
                parameters: [
                        transition: it,
                        issue     : { -> prevStatusInReview[] },
                ],
        ])
    }
}
