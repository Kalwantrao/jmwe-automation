import groovy.json.JsonSlurper
import java.nio.file.Paths

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}
apply plugin: 'org.gint.atlassian'
//apply from: 'common/setUp.gradle'
apply from: gint.resourceDirectory +'/src/common/testConditions.gradle'

def info = gint.getJiraHelper().getServerInfoWithVerify() // Verify access to Jira instance otherwise end test if server not available
def project = 'AUTOMATION'//gint.getJiraHelper().getProjectKey()	//get project key using jira helper functions
def workflow = project
def screen = project

gint.xmlReport =	true	//xml report generates in projects root directory
gint.verbose =	true
def userId = 'jmwe_qa'
def jsonSlurper = new JsonSlurper();
def path = Paths.get(gint.directories.resource + "/resources/conditionsData/PreviousStatusConditionFunctions${info?.isCloud ? "Cloud" : ""}.json")
def transitionFunctions = jsonSlurper.parse(path)
def transition = 'previousStatusCondition'
def functionKey = 'com.innovalog.jmwe.jira-misc-workflow-extensions:previousstatus-condition'	//function key for Previous Status Condition
def startStep = info?.isCloud ? '1':'11' // depends on workflow. '1' for cloud and '11' (To Do)for server works for custom jira workflow

createTransitionsWithFunctions(transitionFunctions, transition, functionKey, 'condition', startStep, workflow, screen, 0)

// TC_01-check when issues previous status is not in selected
def currentIssue1 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'createCurrentIssue1')
transitionIssue(transition+0, {-> currentIssue1[0]}, -1, 'TC_01-check when issues previous status is not in selected', null, null)

// TC_02-check when issues previous status in selected status
def currentIssue2 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'createCurrentIssue2')
transitionToStatus({-> currentIssue2[0]}, "In Progress", "To Do", 'set_PreviousStatus_OfIssueInSelected_Status')
transitionIssue(transition+0, {-> currentIssue2[0]}, 0, 'TC_02-check when issues previous status is in selected', null, null)

// TC_03-check when issues previous status is not in selected-Reverse
def currentIssue3 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'createCurrentIssue3')
transitionIssue(transition+1, {-> currentIssue3[0]}, 0, 'TC_03-check when issues previous status is not in selected-Reverse', null, null)

// TC_04-check when issues previous status in selected status-Reverse
def currentIssue4 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'createCurrentIssue4')
transitionToStatus({-> currentIssue4[0]}, "In Progress", "To Do", 'set_PreviousStatus_OfIssueInSelected_Status_Reverse')
transitionIssue(transition+1, {-> currentIssue4[0]}, -1, 'TC_04-check when issues previous status is in selected-Reverse', null, null)

// TC_05-check when issues previous status in selected status-mostRecentStatusOnly
def mostRecentStatus1 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'checkMostRecentStatus1')
transitionToStatus({-> mostRecentStatus1[0]}, "In Progress", "To Do", 'set_PreviousStatus_OfIssueInSelected_Status_mostRecentStatus')
transitionIssue(transition+2, {-> mostRecentStatus1[0]}, -1, 'TC_05-check when issues previous status in selected status-mostRecentStatusOnly', null, null)

// TC_06-check when issues previous status in selected status-mostRecentStatusOnly
def mostRecentStatus2 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'checkMostRecentStatus2')
transitionToStatus({-> mostRecentStatus2[0]}, "To Do", "To Do", 'set_PreviousStatus_OfIssueInSelected_Status_mostRecent')
transitionIssue(transition+2, {-> mostRecentStatus2[0]}, 0, 'TC_06-check when issues previous status in selected status-mostRecentStatusOnly', null, null)

// TC_07-check when issues previous status-includeCurrent status in selected status
def includeCurrent1 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'includeCurrent1')
transitionIssue(transition+3, {-> includeCurrent1[0]}, 0, 'TC_07-check when issues previous status not in selected status-includeCurrent1', null, null)

// TC_08-check when issues previous status-includeCurrent status in selected status
def includeCurrent2 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'includeCurrent2')
transitionToStatus({-> includeCurrent2[0]}, "To Do", "To Do", 'set_PreviousStatus_OfIssueInSelected_Status_includeCurrent1')
transitionIssue(transition+3, {-> includeCurrent2[0]}, 0, 'TC_08-check when issues previous status in selected status-includeCurrent2', null, null)

// TC_09-check when issues previous status including current status in selected status
def includeCurrent3 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'includeCurrent3')
transitionToStatus({-> includeCurrent3[0]}, "In Progress", "To Do", 'set_PreviousStatus_OfIssueInSelected_Status_includeCurrent3')
transitionIssue(transition+4, {-> includeCurrent3[0]}, 0, 'TC_09-check when issues previous status including current status in selected status', null, null)

// TC_10-check when issues previous status including current status not in selected status
def includeCurrent4 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'includeCurrent4')
transitionToStatus({-> includeCurrent4[0]}, "To Do", "To Do", 'set_PreviousStatus_OfIssueInSelected_Status_includeCurrent4')
transitionIssue(transition+4, {-> includeCurrent4[0]}, -1, 'TC_10-check when issues previous status including current status not in selected status', null, null)


