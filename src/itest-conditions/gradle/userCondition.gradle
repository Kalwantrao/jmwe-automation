buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.gint:gint-atlassian:3.8.4"
	}
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/utils.gradle'

tearDown()
addWorkflow()

def functionKey = info?.isCloud? functionKey.userConditionCloud : functionKey.userConditionServer
def testUser = info?.isCloud? cloudUser : serverUser
def defaultFieldsServer = [
		"correlationId=",
]
def defaultFieldsCloud = [
		"condition.id=85e260ad-0ccf-433d-bd76-2fcda1e4bb6d",
]
def whichUser = [
        currentUser : ["fromUserType=currentUser"],
		userInFieldAssignee : [ "fromUserType=userInField", "userField=assignee" ],
		userInFieldReporter : [  "fromUserType=userInField", "userField=reporter"],
		userInFieldCreator : [  "fromUserType=userInField", "userField=creator"],
]
def mode = [
		allUsers : [ "conditionMode=all-user-condition" ],
		atLeastOne : [ "conditionMode=any-user-condition" ],
]
def fieldEmpty = [
		no : [ "fieldEmpty=no" ],
		yes : [ "fieldEmpty=yes" ],
]

def userCriteria = [
        reporter : "isReporter=yes",
		assignee : "isAssignee=yes",
		checkFields : "userFieldsToCheck=labels",
		checkScript : "usersConditionScript=issue.get('reporter')?.name",
		projectLead : "isProjectLead=yes",
		checkRoles : "rolesToCheck=$jiraAdminRoleId",
		checkGroup : "groupsToCheck=jira-administrators",
		checkUser : "usersToCheck=$user",
		watcher : "isWatcher=yes",
]
def reverse = [
		no : [ "reverse=" ],
		yes : [ "reverse=yes" ]
]
// Configuration for conditions

userCriteria.eachWithIndex { criteria, userFields, i ->
	def cloud = defaultFieldsCloud + "condition.config-85e260ad-0ccf-433d-bd76-2fcda1e4bb6d={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.${criteria} && user.accountId == issue.${criteria}.accountId))))\"}"
	def server = defaultFieldsServer + userFields +  whichUser.currentUser + reverse.no + mode.allUsers + fieldEmpty.no
	addTransitionFunction('currentUser' + criteria, 'condition', info?.isCloud ? cloud : server, functionKey )
}

userCriteria.eachWithIndex { criteria, userFields, i ->
	def cloud = defaultFieldsCloud + "condition.config-85e260ad-0ccf-433d-bd76-2fcda1e4bb6d={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.${criteria} && user.accountId == issue.${criteria}.accountId))))\"}"
	def server = defaultFieldsServer + whichUser.userInFieldAssignee + reverse.no + mode.allUsers + fieldEmpty.no
	addTransitionFunction('assignee' + criteria, 'condition', info?.isCloud ? cloud : server,  functionKey )
}

userCriteria.eachWithIndex { criteria, userFields, i ->
	def cloud = defaultFieldsCloud + "condition.config-85e260ad-0ccf-433d-bd76-2fcda1e4bb6d={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.${criteria} && user.accountId == issue.${criteria}.accountId))))\"}"
	def server = defaultFieldsServer + whichUser.userInFieldReporter + reverse.no + mode.allUsers + fieldEmpty.no
	addTransitionFunction('reporter' + criteria, 'condition',info?.isCloud ? cloud : server,  functionKey )
}

userCriteria.eachWithIndex { criteria, userFields, i ->
	def cloud = defaultFieldsCloud + "condition.config-85e260ad-0ccf-433d-bd76-2fcda1e4bb6d={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.${criteria} && user.accountId == issue.${criteria}.accountId))))\"}"
	def server = defaultFieldsServer + whichUser.userInFieldCreator + reverse.no + mode.allUsers + fieldEmpty.no
	addTransitionFunction('creator' + criteria, 'condition',info?.isCloud ? cloud : server,  functionKey )
}

['currentUser_assignee_reporter_field'].each {
	def cloud = defaultFieldsCloud + "condition.config-85e260ad-0ccf-433d-bd76-2fcda1e4bb6d={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))\"}"
	def server =  defaultFieldsServer + whichUser.currentUser + userCriteria.assignee + userCriteria.reporter + userCriteria.checkFields + reverse.no + mode.allUsers + fieldEmpty.no
	addTransitionFunction(it, 'condition',info?.isCloud ? cloud : server,  functionKey )
}
['assignee_reporter_field'].each {
	def cloud = defaultFieldsCloud + "condition.config-85e260ad-0ccf-433d-bd76-2fcda1e4bb6d={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))\"}"
	def server =  defaultFieldsServer + whichUser.userInFieldAssignee + userCriteria.reporter + userCriteria.checkFields + reverse.no + mode.allUsers + fieldEmpty.no
	addTransitionFunction(it, 'condition',info?.isCloud ? cloud : server,  functionKey )
}
['atleastOneCriteria_currentUser'].each {
	def cloud = defaultFieldsCloud + "condition.config-85e260ad-0ccf-433d-bd76-2fcda1e4bb6d={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))\"}"
	def server =  defaultFieldsServer + whichUser.currentUser + userCriteria.assignee + userCriteria.reporter + userCriteria.checkFields + reverse.no + mode.atLeastOne + fieldEmpty.no
	addTransitionFunction(it, 'condition', info?.isCloud ? cloud : server, functionKey)
}
['atleastOneCriteria_assigneeField'].each {
	def cloud = defaultFieldsCloud + "condition.config-85e260ad-0ccf-433d-bd76-2fcda1e4bb6d={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))\"}"
	def server =  defaultFieldsServer + whichUser.userInFieldAssignee + userCriteria.checkRoles + userCriteria.projectLead + reverse.no + mode.atLeastOne + fieldEmpty.no
	addTransitionFunction(it, 'condition', info?.isCloud ? cloud : server, functionKey)
}
['atleastOneCriteria_reporterField'].each {
	def cloud = defaultFieldsCloud + "condition.config-85e260ad-0ccf-433d-bd76-2fcda1e4bb6d={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))\"}"
	def server =  defaultFieldsServer + whichUser.userInFieldReporter + userCriteria.checkRoles + userCriteria.projectLead + reverse.no + mode.atLeastOne + fieldEmpty.no
	addTransitionFunction(it, 'condition', info?.isCloud ? cloud : server, functionKey)
}
['atleastOneCriteria_creatorField'].each {
	def cloud = defaultFieldsCloud + "condition.config-85e260ad-0ccf-433d-bd76-2fcda1e4bb6d={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))\"}"
	def server =  defaultFieldsServer + whichUser.userInFieldCreator + userCriteria.checkFields + userCriteria.projectLead + reverse.no + mode.atLeastOne + fieldEmpty.no
	addTransitionFunction(it, 'condition', info?.isCloud ? cloud : server, functionKey)
}
['currentUser_assignee_reporter_field_reverse'].each {
	def cloud = defaultFieldsCloud + "condition.config-85e260ad-0ccf-433d-bd76-2fcda1e4bb6d={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))\"}"
	def server =  defaultFieldsServer + whichUser.currentUser + userCriteria.assignee + userCriteria.reporter + userCriteria.checkFields + reverse.yes + mode.atLeastOne + fieldEmpty.no
	addTransitionFunction(it, 'condition',info?.isCloud ? cloud : server,  functionKey )
}
['atleastOneCriteria_assigneeField_OrEmpty'].each {
	def cloud = defaultFieldsCloud + "condition.config-85e260ad-0ccf-433d-bd76-2fcda1e4bb6d={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))\"}"
	def server =  defaultFieldsServer + whichUser.userInFieldAssignee + userCriteria.checkRoles + userCriteria.projectLead + reverse.no + mode.atLeastOne + fieldEmpty.no
	addTransitionFunction(it, 'condition', info?.isCloud ? cloud : server, functionKey)
}

createWorkflowScheme()
createProject()

def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'defaultIssue')

// update issue so that respective user satisfies all the criteria
['atleastOneCriteria_assigneeField_OrEmpty'].each {
	gint.taskHelper.add([
			[action    : 'transitionIssue', ext: ": CHECK $it WHEN field is empty: ",
			 expected  : 0,
			 parameters: [
					 issue     : {->defaultIssue[]},
					 transition: it,
			 ],
			],
	])
}
gint.taskHelper.add(
		[action: 'assignIssue',ext: ': to current user',sleep: 1000,
		 parameters:[issue: {->defaultIssue[]}, userId: user]])

gint.taskHelper.add( action: 'addLabels',ext: 'current user in label', parameters:[ issue : { ->defaultIssue[] }, labels: user])

['currentUser','assignee','reporter','creator'].collect {
	userCriteria.eachWithIndex { criteria, userFields, i ->
		gint.taskHelper.add([
				[action    : 'transitionIssue', ext: ": WHEN $it IS: " + criteria,
				 expected  : 0,
				 parameters: [
						 issue     : {->defaultIssue[]},
						 transition: it + criteria,
				 ],
				],
		])
	}
}

// when specific user(current and user in selected field) satisfies all the selected criteria
[
		'currentUser_assignee_reporter_field',
 		'assignee_reporter_field',
		'atleastOneCriteria_currentUser',
		'atleastOneCriteria_assigneeField',
		'atleastOneCriteria_reporterField',
		'atleastOneCriteria_creatorField'
].each {
	gint.taskHelper.add(
			[action : 'transitionIssue',ext: ": satisfies all the criteria_ $it : ",
			 expected: 0,
			 parameters:[
					 issue: {->defaultIssue[]},
					 transition:  it ,
			 ]
			]
	)
}
['currentUser_assignee_reporter_field_reverse'].each {
	gint.taskHelper.add(
			[action : 'transitionIssue',ext: ": satisfies all the criteria_ $it : ",
			 expected: -1,
			 parameters:[
					 issue: {->defaultIssue[]},
					 transition:  it ,
			 ]
			]
	)
}
// change assignee, reporter, projectLead, field value, watcher, user from script to check error

gint.taskHelper.add(
		action: 'updateIssue',
			parameters:[
					issue: {->defaultIssue[]},
					assignee: testUser,
					reporter: testUser,
					labels: testUser
			]
)

// ToDo this is not working -> removeWatcher
gint.taskHelper.add(action: 'removeWatchers', ext: ': stop current user from watching issue',
		parameters: [
			        issue: {-> defaultIssue[]} ]
)

gint.taskHelper.add( action: 'updateProject',parameters: [project: projectName, lead: testUser ] )

['reporter','checkFields','projectLead','assignee'].collect {
		gint.taskHelper.add(
				[action : 'transitionIssue',ext: ": WHEN current user is NOT $it: ",
				expected: -1,
				parameters:[
					issue: {->defaultIssue[]},
					transition: 'currentUser' + it,
					]
				]
		)
}

gint.taskHelper.add(
		action: 'updateIssue', ext: ': check user in field assignee',
		parameters:[
				issue: {->defaultIssue[]},
				assignee: user,
				reporter: testUser,
				labels: testUser
		]
)
['reporter','checkFields','projectLead'].each{
	gint.taskHelper.add(
			[action : 'transitionIssue',ext: ": WHEN assignee is NOT $it : ",
			 expected: -1,
			 parameters:[
				 issue: {->defaultIssue[]},
				 transition: 'assignee'+ it ,
			 ]
			]
		)
}
gint.taskHelper.add(
		action: 'updateIssue', ext: ': check user in field reporter',
		parameters:[
				issue: {->defaultIssue[]},
				assignee: testUser,
				reporter: user,
				labels: testUser
		]
)
['assignee','checkFields','projectLead'].each{
	gint.taskHelper.add(
			[action : 'transitionIssue',ext: ": WHEN reporter is NOT $it : ",
			 expected: -1,
			 parameters:[
					 issue: {->defaultIssue[]},
					 transition: 'reporter'+ it ,
			 ]
			]
	)
}
['assignee','checkFields','projectLead'].each{
	gint.taskHelper.add(
			[action : 'transitionIssue',ext: ": WHEN creator is NOT $it : ",
			 expected: -1,
			 parameters:[
					 issue: {->defaultIssue[]},
					 transition: 'creator'+ it ,
			 ]
			]
	)
}
// when specific user(current and user in selected field) not satisfies all the selected criteria
['currentUser_assignee_reporter_field','assignee_reporter_field'].each {
	gint.taskHelper.add(
			[action : 'transitionIssue',ext: ": not satisfies all the criteria_ $it : ",
			 expected: -1,
			 parameters:[
					 issue: {->defaultIssue[]},
					 transition:  it ,
			 ]
			]
	)
}
['currentUser_assignee_reporter_field_reverse'].each {
	gint.taskHelper.add(
			[action : 'transitionIssue',ext: ": not satisfies all the criteria_ $it : ",
			 expected: 0,
			 parameters:[
					 issue: {->defaultIssue[]},
					 transition:  it ,
			 ]
			]
	)
}
[
		'atleastOneCriteria_currentUser',
].each {
	gint.taskHelper.add(
			[action: 'transitionIssue', ext: ": When $it satisfies",
			expected: 0,
				parameters: [
				        issue: {->defaultIssue[]},
						transition: it
				]
			]
	)
}
gint.taskHelper.add(
		[action: 'updateIssue', ext: "least one criteria for current user",
			parameters: [
			        issue: {->defaultIssue[]},
					assignee: testUser,
					reporter: testUser,
					]
			]
)

[
		'atleastOneCriteria_currentUser',
].each {
	gint.taskHelper.add(
			[action: 'transitionIssue', ext: "When $it not satisfies ",
			 expected: -1,
			 parameters: [
					 issue: {->defaultIssue[]},
					 transition: it
			 ]
			]
	)
}


/*
1. The current user should match all the following criteria:
The user is the reporter : positive - current user is reporter
 negative - other user is reporter = "DONE"

2.The current user should match at least one of the following criteria:
The user is the assignee
The user is one of the following users: jmwe-qa
 positive: check when assignee is current user / current user is jmwe_qa
 negative: when assignee is not current user  /  current user is not jmwe_qa = "DONE"

3. The current user should match all the following criteria:
The user is one of the watchers
 positive: 1.add multiple watchers 2.add multiple watchers with current user 3. check login by other watchers
 negative: 1.current user not visible when not selected as watcher
4. configure with all options under criteria and check -positives and negatives
5. Active and inactive users
 */

