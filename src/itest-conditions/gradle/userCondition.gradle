buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.gint:gint-atlassian:3.8.4"
	}
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/itest-conditions/condition.gradle'

def functionKey = info?.isCloud? "com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.${testCloudBuild}__UserCondition" : 'com.innovalog.jmwe.jira-misc-workflow-extensions:generic-user-condition'

ext.TEST_GROUP_ID = getGroupId('testgroup', "testgroup.*")
ext.ADMIN_GROUP_ID = getGroupId('jira-admins', "jira-admins.*")

project.ext.testGroupIdCloud = {->TEST_GROUP_ID.getAt(0).trim()}
project.ext.jiraAdminGroupIdCloud = {->ADMIN_GROUP_ID.getAt(0).trim()}


def whichUser = [
		currentUser :         info?.isCloud? /"fromUserType":"currentUser"/ : ["fromUserType=currentUser"],
		userInFieldAssignee : info?.isCloud? /"fromUserType":"userInField","userField":"assignee"/ : [ "fromUserType=userInField", "userField=assignee" ],
		userInFieldReporter : info?.isCloud? /"fromUserType":"userInField","userField":"reporter"/ : [  "fromUserType=userInField", "userField=reporter"],
		userInFieldCreator :  info?.isCloud? /"fromUserType":"userInField","userField":"creator"/ : [  "fromUserType=userInField", "userField=creator"],
]


def userMode = [
		allUsers :   info?.isCloud? /"conditionMode":"all-user-condition"/ : [ "conditionMode=all-user-condition" ],
		atLeastOne : info?.isCloud? /"conditionMode":"any-user-condition"/ : [ "conditionMode=any-user-condition" ],
]

def fieldEmpty = [
		no : info?.isCloud? /"fieldEmpty":true/ : [ "fieldEmpty=no" ],
		yes : info?.isCloud? /"fieldEmpty":true/ : [ "fieldEmpty=yes" ],
]

def userCriteria = [
		reporter : "isReporter=yes",
		assignee : "isAssignee=yes",
		inFieldAssignee : "userFieldsToCheck=assignee",
		returnFromScript : /usersConditionScript=issue.get('reporter')?.name == "$user"/,
		projectLead : "isProjectLead=yes",
		inAdminRole : "rolesToCheck=$jiraAdminRoleId",
		inAdminGroup : "groupsToCheck=jira-administrators",
		inTestGroup : "groupsToCheck=$testGroup",
		watcher : "isWatcher=yes",
		voter : "isVoter=yes",
		checkUser : "usersToCheck=$currentUserKey",
]
def currentUserConditionCriteriaCloud = [
		reporter : /"userCriteria":{"isReporter":true},"expression":"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))"/,
		assignee : /"userCriteria":{"isAssignee":true},"expression":"let selectedUser = user; ((!!user && (false || (!!issue.assignee && user.accountId == issue.assignee.accountId))))"/,
		inFieldAssignee : /"userCriteria":{"userFieldsToCheck":["assignee"]},"expression":"let selectedUser = user; ((!!user && (false || ((!!issue.assignee && issue.assignee.accountId == user.accountId)))))"/,
		returnFromScript : /"userCriteria":{"usersConditionScript":"$returnsReporter"},"expression":"let selectedUser = user; ((!!user && (false || ($returnsReporter))))"/,
		inAdminRole : /"userCriteria":{"rolesToCheck":[$jiraAdminRoleId]},"expression":"let selectedUser = user; ((!!user && (false || ([$jiraAdminRoleId].some(roleId => (new User(user.accountId)).getProjectRoles(project).map(role => role.id).includes(roleId))))))"/,
		inAdminGroup : /"userCriteria":{"groupsToCheck":["$jiraAdminGroupIdCloud"]},"expression":"let selectedUser = user; ((!!user && (false || ([$jiraAdminGroupIdCloud].some(groupId => (new User(user.accountId)).groupIds.includes(groupId))))))"/,
		inTestGroup : /"userCriteria":{"groupsToCheck":["$testGroupIdCloud"]},"expression":"let selectedUser = user; ((!!user && (false || ([$testGroupIdCloud].some(groupId => (new User(user.accountId)).groupIds.includes(groupId))))))"/,
		watcher : /"userCriteria":{"isWatcher":true},"expression":"let selectedUser = user; ((!!user && (false || (!!issue.watchers && issue.watchers.map(watcher => watcher.accountId).includes(user.accountId)))))"/,
]
def userInFieldAssigneeUserConditionCriteriaCloud = [
		reporter : /"userCriteria":{"isReporter":true},"expression":"let selectedUser = !!issue && !!issue.assignee && issue.assignee; ((!!issue && !!issue.assignee && (false || (!!issue.reporter && issue.assignee.accountId == issue.reporter.accountId))))"/,
		returnFromScript : /"userCriteria":{"usersConditionScript":"$returnsReporter"},"expression":"let selectedUser = !!issue && !!issue.assignee && issue.assignee; ((!!issue && !!issue.assignee && (false || ($returnsReporter))))"/,
		inAdminRole : /"userCriteria":{"rolesToCheck":[$jiraAdminRoleId]},"expression":"let selectedUser = !!issue && !!issue.assignee && issue.assignee; ((!!issue && !!issue.assignee && (false || ([$jiraAdminRoleId].some(roleId => (new User(issue.assignee.accountId)).getProjectRoles(project).map(role => role.id).includes(roleId))))))"/,
		inAdminGroup : /"userCriteria":{"groupsToCheck":["$jiraAdminGroupIdCloud"]},"expression":"let selectedUser = !!issue && !!issue.assignee && issue.assignee; ((!!issue && !!issue.assignee && (false || ([$jiraAdminGroupIdCloud].some(groupId => (new User(issue.assignee.accountId)).groupIds.includes(groupId))))))"/,
		inTestGroup : /"userCriteria":{"groupsToCheck":["$testGroupIdCloud"]},"expression":"let selectedUser = !!issue && !!issue.assignee && issue.assignee; ((!!issue && !!issue.assignee && (false || ([$testGroupIdCloud].some(groupId => (new User(issue.assignee.accountId)).groupIds.includes(groupId))))))"/,
		watcher : /"userCriteria":{"isWatcher":true},"expression":"let selectedUser = !!issue && !!issue.assignee && issue.assignee; ((!!issue && !!issue.assignee && (false || (!!issue.watchers && issue.watchers.map(watcher => watcher.accountId).includes(issue.assignee.accountId)))))"/,
		checkUser : /"userCriteria":{"usersToCheck":["$currentUserKey"]},"expression":"let selectedUser = !!issue && !!issue.assignee && issue.assignee; ((!!issue && !!issue.assignee && (false || ([$currentUserKey].some(userId => (issue.assignee.accountId == userId))))))"/,
]

def userInFieldReporterUserConditionCriteriaCloud = [
		assignee : /"userCriteria":{"isAssignee":true},"expression":"let selectedUser = !!issue && !!issue.reporter && issue.reporter; ((!!issue && !!issue.reporter && (false || (!!issue.assignee && issue.reporter.accountId == issue.assignee.accountId))))"/,
		returnFromScript : /"userCriteria":{"usersConditionScript":"$returnsReporter"},"expression":"let selectedUser = !!issue && !!issue.reporter && issue.reporter; ((!!issue && !!issue.reporter && (false || ($returnsReporter))))"/,
		inFieldAssignee : /"userCriteria":{"userFieldsToCheck":["assignee"]},"expression":"let selectedUser = !!issue && !!issue.reporter && issue.reporter; ((!!issue && !!issue.reporter && (false || ((!!issue.assignee && issue.assignee.accountId == issue.reporter.accountId)))))"/,
		inAdminRole : /"userCriteria":{"rolesToCheck":[$jiraAdminRoleId]},"expression":"let selectedUser = !!issue && !!issue.reporter && issue.reporter; ((!!issue && !!issue.reporter && (false || ([$jiraAdminRoleId].some(roleId => (new User(issue.reporter.accountId)).getProjectRoles(project).map(role => role.id).includes(roleId))))))"/,
		inAdminGroup : /"userCriteria":{"groupsToCheck":["$jiraAdminGroupIdCloud"]},"expression":"let selectedUser = !!issue && !!issue.reporter && issue.reporter; ((!!issue && !!issue.reporter && (false || ([$jiraAdminGroupIdCloud].some(groupId => (new User(issue.reporter.accountId)).groupIds.includes(groupId))))))"/,
		inTestGroup : /"userCriteria":{"groupsToCheck":["$testGroupIdCloud"]},"expression":"let selectedUser = !!issue && !!issue.reporter && issue.reporter; ((!!issue && !!issue.reporter && (false || ([$testGroupIdCloud].some(groupId => (new User(issue.reporter.accountId)).groupIds.includes(groupId))))))"/,
		watcher : /"userCriteria":{"isWatcher":true},"expression":"let selectedUser = !!issue && !!issue.reporter && issue.reporter; ((!!issue && !!issue.reporter && (false || (!!issue.watchers && issue.watchers.map(watcher => watcher.accountId).includes(issue.reporter.accountId)))))"/,
		checkUser : /"userCriteria":{"usersToCheck":["$currentUserKey"]},"expression":"let selectedUser = !!issue && !!issue.reporter && issue.reporter; ((!!issue && !!issue.reporter && (false || ([$currentUserKey].some(userId => (issue.reporter.accountId == userId))))))"/,
]
def userInFieldCreatorUserConditionCriteriaCloud = [
		reporter : /"userCriteria":{"isReporter":true},"expression":"let selectedUser = !!issue && !!issue.creator && issue.creator; ((!!issue && !!issue.creator && (false || (!!issue.reporter && issue.creator.accountId == issue.reporter.accountId))))"/,
		assignee : /"userCriteria":{"isAssignee":true},"expression":"let selectedUser = !!issue && !!issue.creator && issue.creator; ((!!issue && !!issue.creator && (false || (!!issue.assignee && issue.creator.accountId == issue.assignee.accountId))))"/,
		inFieldAssignee : /"userCriteria":{"userFieldsToCheck":["assignee"]},"expression":"let selectedUser = !!issue && !!issue.creator && issue.creator; ((!!issue && !!issue.creator && (false || ((!!issue.assignee && issue.assignee.accountId == issue.creator.accountId)))))"/,
		returnFromScript : /"userCriteria":{"usersConditionScript":"$returnsReporter"},"expression":"let selectedUser = !!issue && !!issue.creator && issue.creator; ((!!issue && !!issue.creator && (false || ($returnsReporter))))"/,
		inAdminRole : /"userCriteria":{"rolesToCheck":[$jiraAdminRoleId]},"expression":"let selectedUser = !!issue && !!issue.creator && issue.creator; ((!!issue && !!issue.creator && (false || ([$jiraAdminRoleId].some(roleId => (new User(issue.creator.accountId)).getProjectRoles(project).map(role => role.id).includes(roleId))))))"/,
		inAdminGroup : /"userCriteria":{"groupsToCheck":["$jiraAdminGroupIdCloud"]},"expression":"let selectedUser = !!issue && !!issue.creator && issue.creator; ((!!issue && !!issue.creator && (false || ([$jiraAdminGroupIdCloud].some(groupId => (new User(issue.creator.accountId)).groupIds.includes(groupId))))))"/,
		inTestGroup : /"userCriteria":{"groupsToCheck":["$testGroupIdCloud"]},"expression":"let selectedUser = !!issue && !!issue.creator && issue.creator; ((!!issue && !!issue.creator && (false || ([$testGroupIdCloud].some(groupId => (new User(issue.creator.accountId)).groupIds.includes(groupId))))))"/,
		watcher : /"userCriteria":{"isWatcher":true},"expression":"let selectedUser = user; ((!!user && (false || (!!issue.watchers && issue.watchers.map(watcher => watcher.accountId).includes(user.accountId)))))"/,
		checkUser : /"userCriteria":{"usersToCheck":["$currentUserKey"]},"expression":"let selectedUser = !!issue && !!issue.creator && issue.creator; ((!!issue && !!issue.creator && (false || ([$currentUserKey].some(userId => (issue.creator.accountId == userId))))))"/,
]

def reverse = [
		no : [ "reverse=" ],
		yes : [ "reverse=yes" ]
]

def currentUserConditionCriteria = info?.isCloud ? currentUserConditionCriteriaCloud : userCriteria
def userInFieldAssigneeUserConditionCriteria = info?.isCloud ? userInFieldAssigneeUserConditionCriteriaCloud : userCriteria
def userInFieldReporterUserConditionCriteria = info?.isCloud ? userInFieldReporterUserConditionCriteriaCloud : userCriteria
def userInFieldCreatorUserConditionCriteria = info?.isCloud ? userInFieldCreatorUserConditionCriteriaCloud : userCriteria

currentUserConditionCriteria.eachWithIndex { criteria, userFields, i ->
	def transition = "verify_current_user_should_be_" + criteria
	def cloud = "{\"problems\":[],$whichUser.currentUser,$userMode.allUsers,$userFields}"
	def server = [userFields, whichUser.currentUser,reverse.no,userMode.allUsers,fieldEmpty.no]
	addTransitionFunction(transition, 'condition', info?.isCloud ? cloud : server, functionKey )
}

userInFieldAssigneeUserConditionCriteria.eachWithIndex { criteria, userFields, i ->
	def transition = "verify_user_in_field_assignee_should_be_" + criteria
	def cloud =  "{\"problems\":[],$whichUser.userInFieldAssignee,$userMode.allUsers,$userFields}"
	def server = [userFields,whichUser.userInFieldAssignee,reverse.no,userMode.allUsers,fieldEmpty.no]
	addTransitionFunction(transition, 'condition', info?.isCloud ? cloud : server,  functionKey )
}

userInFieldReporterUserConditionCriteria.eachWithIndex { criteria, userFields, i ->
	def transition = "verify_user_in_field_reporter_should_be_" + criteria
	def cloud =  "{\"problems\":[],$whichUser.userInFieldReporter,$userMode.allUsers,$userFields}"
	def server = [whichUser.userInFieldReporter,userFields,reverse.no,userMode.allUsers,fieldEmpty.no]
	addTransitionFunction(transition, 'condition', info?.isCloud ? cloud : server, functionKey )
}

userInFieldCreatorUserConditionCriteria.eachWithIndex { criteria, userFields, i ->
	def transition = "verify_user_in_field_creator_should_be_" + criteria
	def cloud = "{\"problems\":[],$whichUser.userInFieldCreator,$userMode.allUsers,$userFields}"
	def server = [whichUser.userInFieldCreator,userFields,reverse.no,userMode.allUsers,fieldEmpty.no]
	addTransitionFunction(transition, 'condition', info?.isCloud ? cloud : server, functionKey )
}

['verify_current_user_should_be_in_assignee_reporter'].each {
	def server =  [whichUser.currentUser,userCriteria.assignee,userCriteria.reporter,reverse.no,userMode.allUsers,fieldEmpty.no]
	def cloud = "{\"problems\":[],$whichUser.currentUser,$userMode.allUsers,\"userCriteria\":{\"isReporter\":true,\"isAssignee\":true},\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId)&&(!!issue.assignee && user.accountId == issue.assignee.accountId))))\"}"
	addTransitionFunction(it, 'condition', info?.isCloud ? cloud : server, functionKey)
}

['verify_current_user_should_be_in_at_least_one_field_assignee_reporter'].each {
	def server = [whichUser.currentUser,userCriteria.assignee,userCriteria.reporter,reverse.no,userMode.atLeastOne,fieldEmpty.no]
	def cloud = "{\"problems\":[],$whichUser.currentUser,$userMode.atLeastOne,\"userCriteria\":{\"isReporter\":true,\"isAssignee\":true},\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId)||(!!issue.assignee && user.accountId == issue.assignee.accountId))))\"}"
	addTransitionFunction(it, 'condition', info?.isCloud ? cloud : server, functionKey)}

['verify_user_in_field_creator_should_be_in_at_least_one_field_reporter_assignee'].each {
	def server =  [whichUser.userInFieldCreator,userCriteria.inFieldAssignee,userCriteria.reporter,reverse.no,userMode.atLeastOne,fieldEmpty.no]
	def cloud = "{\"problems\":[],$whichUser.userInFieldCreator,\"fieldEmpty\":false,$userMode.atLeastOne,\"userCriteria\":{\"isReporter\":true,\"isAssignee\":true},\"expression\":\"let selectedUser = !!issue && !!issue.creator && issue.creator; ((!!issue && !!issue.creator && (false || (!!issue.reporter && issue.creator.accountId == issue.reporter.accountId)||(!!issue.assignee && issue.creator.accountId == issue.assignee.accountId))))\"}"
	addTransitionFunction(it, 'condition', info?.isCloud ? cloud : server, functionKey)}

['currentUser_should_not_be_in_fields_assignee_reporter_reverse'].each {
	def server =  [whichUser.currentUser,userCriteria.assignee,userCriteria.reporter,reverse.yes,userMode.atLeastOne,fieldEmpty.no]
	def cloud = "{\"problems\":[],$whichUser.currentUser,$userMode.allUsers,\"userCriteria\":{\"isReporter\":true,\"isAssignee\":true,\"reverse\":true},\"expression\":\"let selectedUser = user; !((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId)&&(!!issue.assignee && user.accountId == issue.assignee.accountId))))\"}"
	addTransitionFunction(it, 'condition', info?.isCloud ? cloud : server, functionKey)}

['user_in_field_assignee_should_be_in_field_reporter_or_field_empty'].each {
	def server =  [whichUser.userInFieldAssignee,userCriteria.reporter,reverse.no,userMode.atLeastOne,fieldEmpty.yes]
	def cloud = "{\"problems\":[],$whichUser.userInFieldAssignee,$userMode.atLeastOne,$fieldEmpty.yes,\"userCriteria\":{\"isReporter\":true},\"expression\":\"let selectedUser = !!issue && issue.assignee; ((!!issue && (!issue.assignee || (!!issue.reporter && issue.assignee.accountId == issue.reporter.accountId))))\"}"
	addTransitionFunction(it, 'condition', info?.isCloud ? cloud : server, functionKey)
}

createWorkflowScheme()
createProject()


def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'defaultIssue')
def currentUser = info?.isCloud ? info?.userDisplayName : user
def listOfUsers = [testUser,user]

// USER_CONDITION_TS_26_TC_01_Verify the current user should be reporter
[
		'verify_current_user_should_be_reporter',
		'verify_current_user_should_be_assignee',
		'verify_current_user_should_be_inFieldAssignee',
		'verify_current_user_should_be_returnFromScript',
].each {
	listOfUsers.eachWithIndex { userToCheck, index ->
		def fieldToCheck;
		if (it == 'verify_current_user_should_be_reporter') {
			fieldToCheck = "Reporter"
		} else if (it == 'verify_current_user_should_be_assignee') {
			fieldToCheck = "Assignee"
		} else if (it == 'verify_current_user_should_be_inFieldAssignee') {
			fieldToCheck = "Assignee"
		} else if (it == 'verify_current_user_should_be_returnFromScript') {
			fieldToCheck = "Reporter"
		}
		def expected;
		if (userToCheck == user) {
			expected = 0
		} else {
			expected = -1
		}
		gint.taskHelper.add([
				[action    : 'setFieldValue',
				 sleep     : info?.isCloud ? 5000 : 0,
				 ext       : ":Of field_ $fieldToCheck to $userToCheck _before transition issue with _ $it: ",
				 parameters: [
						 issue: { -> defaultIssue[] },
						 field: fieldToCheck,
						 value: userToCheck,
				 ],
				],
				[action    : 'transitionIssue',
				 sleep     : info?.isCloud ? 5000 : 0,
				 ext       : ":USER_CONDITION_TS_26_TC_01_Case_01_ $it _when current user is $currentUser and _ $fieldToCheck is $userToCheck: ",
				 expected  : expected,
				 parameters: [
						 issue     : { -> defaultIssue[] },
						 transition: it,
				 ],
				],
		])
	}
}

// USER_CONDITION_TS_30_TC_05_Verify the current user should be project lead
[
		'verify_current_user_should_be_projectLead',
		'verify_user_in_field_assignee_should_be_projectLead',
		'verify_user_in_field_reporter_should_be_projectLead',
		'verify_user_in_field_creator_should_be_projectLead',

].eachWithIndex { String transition, int i ->
	listOfUsers.eachWithIndex { usersToCheck, idx ->
		def expected;
		if(usersToCheck == user){
			expected = 0
		}
		else {
			expected = -1
		}
		def fieldToCheck;
			if(transition == 'verify_user_in_field_assignee_should_be_projectLead'){
				fieldToCheck = "Assignee"
			}
		else if (transition == 'verify_user_in_field_reporter_should_be_projectLead'){
				fieldToCheck = "Reporter"
		}
		else { fieldToCheck = "Assignee" }
		if(!isCloud) {
			gint.taskHelper.add([
					[action    : 'setFieldValue',
					 sleep: info?.isCloud ? 5000 : 0,
					 ext       : ":Of field_ $fieldToCheck _ to $user _when the user_ $usersToCheck _is project lead:$transition  ",
					 parameters: [
							 issue: { -> defaultIssue[] },
							 field: fieldToCheck,
							 value: user
					 ],
					],
					[action    : 'updateProject',
					 sleep: info?.isCloud ? 5000 : 0,
					 ext       : ":change the project lead to $usersToCheck _to $transition : ",
					 parameters: [
							 project: projectName,
							 lead   : usersToCheck,
					 ],
					],
					[action      : 'transitionIssue',
					 sleep: info?.isCloud ? 5000 : 0,
					 ext         : ":USER_CONDITION_TS_3$idx _Case_01_ $transition _when project lead is $usersToCheck and field _ $fieldToCheck is $currentUser : ",
					 expected    : expected,
					 parameters  : [
							 issue     : { -> defaultIssue[] },
							 transition: transition,
					 ],
					],
			])
		}
		}
}

// USER_CONDITION_TS_40_TC_01_Verify the user in field assignee should be reporter
[
		'verify_user_in_field_assignee_should_be_reporter',
		'verify_user_in_field_assignee_should_be_returnFromScript',
].each {
	listOfUsers.eachWithIndex{ userToCheck, idx ->
		def userInFieldAssignee= testUser;
		def expected;
		if(it == 'verify_user_in_field_assignee_should_be_reporter' && userToCheck == userInFieldAssignee ){
			expected = 0
		} else if(it == 'verify_user_in_field_assignee_should_be_returnFromScript' && userToCheck == user){
			expected = 0
		} else {
			expected = -1
		}
		gint.taskHelper.add([
				[action    : 'setFieldValue',
				 sleep     : info?.isCloud ? 5000 : 0,
				 ext       : ":Of assignee to $userInFieldAssignee when user in field Reporter is $userToCheck _before transition issue with_ $it:",
				 parameters: [
						 issue: { -> defaultIssue[] },
						 field: "Assignee",
						 value: userInFieldAssignee
				 ],
				],
				[action    : 'setFieldValue',
				 sleep     : info?.isCloud ? 5000 : 0,
				 ext       : ":Of field_ Reporter _ to $userToCheck _before transition issue with_ $it: ",
				 parameters: [
						 issue: { -> defaultIssue[] },
						 field: "Reporter",
						 value: userToCheck
				 ],
				],
				[action      : 'transitionIssue',
				 sleep       : info?.isCloud ? 5000 : 0,
				 ext         : ":USER_CONDITION_TS_40_TC_01_Case_01_ $it _when user in field assignee is $userInFieldAssignee and user in field Reporter is $userToCheck:",
				 expected    : expected,
				 parameters  : [
						 issue     : { -> defaultIssue[] },
						 transition: it,
				 ],
				],
		])
	}
}

// USER_CONDITION_TS_40_TC_05_Verify the user in field assignee should be of admin role
// USER_CONDITION_TS_40_TC_07_Verify the user in field assignee should specific user_checkUser
// USER_CONDITION_TS_40_TC_14_Verify the user in field reporter should be specific user_checkUser
// USER_CONDITION_TS_40_TC_13_Verify the user in field reporter should be in admin group
def transitionListForUsersAndGroupsServer = [
		'verify_user_in_field_assignee_should_be_inAdminRole',
		'verify_user_in_field_reporter_should_be_inAdminRole',
		'verify_user_in_field_assignee_should_be_checkUser',
		'verify_user_in_field_reporter_should_be_checkUser',
		'verify_user_in_field_reporter_should_be_inAdminGroup',
		//'verify_user_in_field_creator_should_be_inAdminRole',
]
def transitionListForUsersAndGroupsCloud = [
		'verify_user_in_field_assignee_should_be_inAdminRole',
		'verify_user_in_field_reporter_should_be_inAdminRole',
		//'verify_user_in_field_assignee_should_be_checkUser',
		//'verify_user_in_field_reporter_should_be_checkUser',
		//'verify_user_in_field_reporter_should_be_inAdminGroup'
		//'verify_user_in_field_creator_should_be_inAdminRole',
]
def transitionListForUsersAndGroups = info?.isCloud? transitionListForUsersAndGroupsCloud : transitionListForUsersAndGroupsServer

transitionListForUsersAndGroups.eachWithIndex { transition, index ->
	listOfUsers.collect {
		def expected;
		if(it == testUser){
			expected = -1
		}
		else {
			expected = 0
		}

		def fieldToCheck;

		if (transition == 'verify_user_in_field_assignee_should_be_inAdminRole') {
			fieldToCheck = "Assignee"
		} else if (transition == 'verify_user_in_field_reporter_should_be_inAdminRole') {
			fieldToCheck = "Reporter"
		}
		else if(transition == 'verify_user_in_field_assignee_should_be_checkUser'){
			fieldToCheck = "Assignee"
		}
		else if( transition == 'verify_user_in_field_reporter_should_be_checkUser'){
			fieldToCheck = "Reporter"
		}
		else if( transition == 'verify_user_in_field_reporter_should_be_inAdminGroup'){
			fieldToCheck = "Reporter"
		}
		gint.taskHelper.add([
				[action    : 'setFieldValue',
				 sleep : sleep,
				 ext       : ": Of Field $fieldToCheck to $it _to check _ $transition : ",
				 parameters: [
						 issue: { -> defaultIssue[] },
						 field: fieldToCheck,
						 value: it
				 ],],
				[action    : 'transitionIssue',
				 sleep : sleep,
				 ext       : ":USER_CONDITION_TS_40_TC_05_Case_01_ $transition _user in field_ $fieldToCheck is $it not in admin role: ",
				 expected  : expected,
				 parameters: [
						 issue     : { -> defaultIssue[] },
						 transition: transition,
				 ],
				],
		])
	}
}

// USER_CONDITION_TS_40_TC_08_Verify the user in field reporter should be
[
		'verify_user_in_field_reporter_should_be_assignee',
		'verify_user_in_field_reporter_should_be_inFieldAssignee'
].eachWithIndex { transition, index ->
	listOfUsers.collect {
		def userInfieldReporter = currentUser
		def expected;
		if(it == testUser){
			expected = -1
		}
		else {
			expected = 0
		}
		def fieldToCheck = "Assignee";

		gint.taskHelper.add([
				[action    : 'setFieldValue',
				 sleep : sleep,
				 ext       : ":Of field Reporter $userInfieldReporter _to check $transition _when the user in field_ $fieldToCheck is _$it: ",
				 parameters: [
						 issue: { -> defaultIssue[] },
						 field: "Reporter",
						 value: userInfieldReporter
				 ],
				],
				[action    : 'setFieldValue',
				 sleep : sleep,
				 ext       : ":Of field_ $fieldToCheck to $it _to check $transition _when user in field _ $fieldToCheck is _$it : ",
				 parameters: [
						 issue: { -> defaultIssue[] },
						 field: fieldToCheck,
						 value: it
				 ],
				],
				/*[action    : 'getFieldValue',
				 sleep : sleep,
				 ext: ": Of $fieldToCheck should be_ $it _to check $transition : ",
				 parameters: [
						 issue     : { ->defaultIssue[] },
						 field: fieldToCheck,
				 ],
				 finalClosure: {Task task ->
					 assert ("$task.outData").contains(it)
				 }
				],*/
				[action    : 'transitionIssue',
				 sleep : sleep,
				 ext       : ":USER_CONDITION_TS_40_TC_08_Case_01_ to check $transition _when user in field _ $fieldToCheck is _$it: ",
				 expected  : expected,
				 parameters: [
						 issue     : { -> defaultIssue[] },
						 transition: transition,
				 ],
				],
		])
	}
}

// USER_CONDITION_TS_40_TC_15_Verify the user in field creator should be reporter
[
		'verify_user_in_field_creator_should_be_reporter',
		'verify_user_in_field_creator_should_be_assignee',
		'verify_user_in_field_creator_should_be_inFieldAssignee'
].eachWithIndex { transition, index ->
	listOfUsers.collect {
		def userInFieldCreator = currentUser
		def fieldToCheck;
		if(transition == 'verify_user_in_field_creator_should_be_reporter'){
			fieldToCheck = "Reporter"
		}
		else if(transition == 'verify_user_in_field_creator_should_be_assignee'){
			fieldToCheck = "Assignee"
		}
		else if(transition == 'verify_user_in_field_creator_should_be_inFieldAssignee'){
			fieldToCheck = "Assignee"
		}
		def expected;
		if(it == testUser){
			expected = -1
		}
		else {
			expected = 0
		}
		gint.taskHelper.add([
				[action    : 'setFieldValue',
				 sleep : sleep,
				 ext       : ":Of field _$fieldToCheck to $it _ to check $transition _when user in field creator is $userInFieldCreator and the user in field $fieldToCheck is $it: ",
				 parameters: [
						 issue: { -> defaultIssue[] },
						 field: fieldToCheck,
						 value: it
				 ],
				],
				/*[action    : 'getFieldValue',
				 sleep : sleep,
				 ext: ": Of $fieldToCheck should be_ $it _to check $transition : ",
				 parameters: [
						 issue     : { ->defaultIssue[] },
						 field: fieldToCheck,
				 ],
				 finalClosure: {Task task ->
					 assert ("$task.outData").contains(it)
				 }
				],*/
				[action    : 'transitionIssue',
				 sleep : sleep,
				 ext       : ":USER_CONDITION_TS_40_TC_15_Case_01_ $transition _when user in field creator is $userInFieldCreator and the user in field $fieldToCheck is $it: ",
				 expected  : expected,
				 parameters: [
						 issue     : { -> defaultIssue[] },
						 transition: transition,
				 ],
				],
		])
	}
}

// USER_CONDITION_TS_49_TC_01_Verify the mode: all the criteria configured below_current user
[
		'verify_current_user_should_be_in_assignee_reporter'
].each {
	listOfUsers.eachWithIndex { userToCheck, index ->
		def currentUserName = info?.isCloud? info?.userDisplayName : user
		def expected;
		if(userToCheck == testUser) {
			expected = -1
		}
		else { expected = 0 }

		["Assignee","Reporter"].eachWithIndex { fieldToCheck, idx ->
			gint.taskHelper.add([
					[action    : 'setFieldValue',
					 sleep     : info?.isCloud ? 5000 : 0,
					 ext       : ":Of field $fieldToCheck _to_ $userToCheck _to check_ $it : ",
					 parameters: [
							 issue: { -> defaultIssue[] },
							 field: fieldToCheck,
							 value: userToCheck
					 ],
					],
					/*[action      : 'getFieldValue',
					 sleep       : info?.isCloud ? 5000 : 0,
					 ext         : ":Of field $fieldToCheck _to_ $userToCheck _to check_ $it : ",
					 parameters  : [
							 issue: { -> defaultIssue[] },
							 field: fieldToCheck,
					 ],
					 finalClosure: { Task task ->
						 assert ("$task.outData").contains(userToCheck)
					 }
					],*/
			]
			)
		}
			gint.taskHelper.add([
					[action      : 'transitionIssue',
					 sleep : sleep,
					 ext         : ":USER_CONDITION_TS_49_TC_01_Case_01_ $it _when current user is_$currentUser _and user in fields_ assignee and reporter is_ $userToCheck: ",
					 expected    : expected,
					 parameters  : [
							 issue     : { -> defaultIssue[] },
							 transition: it,
					 ],
					],
			])
		}
}

// USER_CONDITION_TS_50_TC_01_Verify the mode: at least one of the criteria configured below_ current user
// USER_CONDITION_TS_50_TC_04_Verify the mode: at least one of the criteria configured below_ user in field creator

[
		'verify_current_user_should_be_in_at_least_one_field_assignee_reporter',
		'verify_user_in_field_creator_should_be_in_at_least_one_field_reporter_assignee'
].each {
	listOfUsers.eachWithIndex{ userToCheck, int idx ->
			def currentUserName = info?.isCloud? info?.userDisplayName : user
			def expected;
			if(userToCheck == testUser) {
				expected = -1
			}
			else {
				expected = 0
			}
			gint.taskHelper.add([
				[action    : 'setFieldValue',
				 sleep     : info?.isCloud ? 5000 : 0,
				 ext       : ":Of field_ Assignee to $testUser _when user in field reporter is $userToCheck _before transition issue with_ $it : ",
				 parameters: [
						 issue: { -> defaultIssue[] },
						 field: "Assignee",
						 value: testUser
				 ],
				],
				[action    : 'setFieldValue',
				 sleep     : info?.isCloud ? 5000 : 0,
				 ext       : ":Of reporter to $userToCheck _when before transition issue with_ $it : ",
				 parameters: [
						 issue: { -> defaultIssue[] },
						 field: "Reporter",
						 value: userToCheck
				 ],
				],
				/*[action      : 'getFieldValue',
				 sleep       : info?.isCloud ? 5000 : 0,
				 ext         : ":Of reporter _should be_ $userToCheck _ $it : ",
				 parameters  : [
						 issue: { -> defaultIssue[] },
						 field: "Reporter",
				 ],
				 finalClosure: { Task task ->
					 assert ("$task.outData").contains(userToCheck)
				 }
				],*/
				[action    : 'transitionIssue',
				 sleep       : info?.isCloud ? 5000 : 0,
				 ext       : ":USER_CONDITION_TS_50_TC_01_Case_01_ $it _when current user is_ $currentUserName and user in field_ assignee is $testUser and user in field reporter is $userToCheck: ",
				 expected  : expected,
				 parameters: [
						 issue     : { -> defaultIssue[] },
						 transition: it,
				 ],
				],
		])
	}
}

// USER_CONDITION_TS_22_TC_04_Verify for the Reverse condition checkbox under the current user Condition configuration page
[
		'currentUser_should_not_be_in_fields_assignee_reporter_reverse'
].each {
	listOfUsers.eachWithIndex { userToCheck, index ->
		def currentUserName = info?.isCloud? info?.userDisplayName : user
		def expected;
		if(userToCheck == testUser) {
			expected = 0
		}
		else { expected = -1 }
		["Assignee","Reporter"].eachWithIndex { fieldToCheck, idx ->
			gint.taskHelper.add([
					[action    : 'setFieldValue',
					 sleep     : info?.isCloud ? 5000 : 0,
					 ext       : ":Of field $fieldToCheck _to_ $userToCheck _to check_ $it : ",
					 parameters: [
							 issue: { -> defaultIssue[] },
							 field: fieldToCheck,
							 value: userToCheck
					 ],
					],
					/*[action      : 'getFieldValue',
					 sleep       : info?.isCloud ? 5000 : 0,
					 ext         : ":Of field $fieldToCheck _to_ $userToCheck _to check_ $it : ",
					 parameters  : [
							 issue: { -> defaultIssue[] },
							 field: fieldToCheck,
					 ],
					 finalClosure: { Task task ->
						 assert ("$task.outData").contains(userToCheck)
					 }
					],*/
			]
			)
		}
		gint.taskHelper.add([
				[action      : 'transitionIssue',
				 sleep : sleep,
				 ext         : ":USER_CONDITION_TS_22_TC_01_Case_01_ $it _when current user is_$currentUser _and user in fields_ assignee and reporter is_ $userToCheck: ",
				 expected    : expected,
				 parameters  : [
						 issue     : { -> defaultIssue[] },
						 transition: it,
				 ],
				],
		])
	}
}

// USER_CONDITION_TS_51_TC_01_Verify the mode: at least one of the criteria configured below with or the field can be empty oprion.
[
		'user_in_field_assignee_should_be_in_field_reporter_or_field_empty'
].each {
	[user,testUser," "].eachWithIndex { userToCheck, idx ->
		def expected;
		if(userToCheck == testUser){
			expected = -1
		}
		else {
			expected = 0
		}
	if(!isCloud) {
		gint.taskHelper.add([
				[action    : 'setFieldValue',
				 ext       : ":Of reporter to $user _ and assignee is $userToCheck _before transition issue with_ $it : ",
				 parameters: [
						 issue: { -> defaultIssue[] },
						 field: "Reporter",
						 value: user
				 ],
				],
				[action    : 'setFieldValue',
				 ext       : ":Of field assignee to $userToCheck _before transition issue with $it when reporter is $user and assignee is $userToCheck: ",
				 parameters: [
						 issue: { -> defaultIssue[] },
						 field: "Assignee",
						 value: userToCheck
				 ],
				],
				[action    : 'transitionIssue',
				 ext       : ":USER_CONDITION_TS_51_TC_01_Case_01_ $it _when reporter is $user _and assignee is $userToCheck: ",
				 expected  : expected,
				 parameters: [
						 issue     : { -> defaultIssue[] },
						 transition: it,
				 ],
				],
		])
	}
	}
}





/*
// USER_CONDITION_TS_40_TC_09_Verify the user in field assignee should be in field labels

// USER_CONDITION_TS_40_TC_10_Verify the user in field reporter should be return from script
[
		'verify_user_in_field_reporter_should_be_returnFromScript',
].each {
	gint.taskHelper.add([
			[action    : 'setFieldValue',
			 ext: ":reporter value set to $testUser _to check $it : ",
			 expected  : 0,
			 parameters: [
					 issue     : {->defaultIssue[]},
					 field: "Reporter",
					 value: testUser
			 ],
			],
			[action    : 'transitionIssue',
			 ext: ":USER_CONDITION_TS_40_TC_10_Case_01_ $it _when not satisfies the criteria: ",
			 expected  : -1,
			 parameters: [
					 issue     : {->defaultIssue[]},
					 transition: it,
			 ],
			],
			[action    : 'setFieldValue',
			 ext: ":reporter value set to $user _to check $it : ",
			 expected  : 0,
			 parameters: [
					 issue     : {->defaultIssue[]},
					 field: "Reporter",
					 value: user
			 ],
			],
			[action    : 'transitionIssue',
			 ext: ":USER_CONDITION_TS_40_TC_10_Case_02_ $it _when satisfies the criteria: ",
			 expected  : 0,
			 parameters: [
					 issue     : {->defaultIssue[]},
					 transition: it,
			 ],
			],
	])
}

// USER_CONDITION_TS_40_TC_13_Verify the user in field reporter should be in admin group

// USER_CONDITION_TS_40_TC_16_Verify the user in field creator should be assignee

// USER_CONDITION_TS_40_TC_17_Verify the user in field creator should be in field labels

// USER_CONDITION_TS_40_TC_18_Verify the user in field creator should be return from script
[
		'verify_user_in_field_creator_should_be_returnFromScript',
].each {
	gint.taskHelper.add([
			[action    : 'setFieldValue',
			 ext: ":reporter value set to $testUser _to check $it : ",
			 expected  : 0,
			 parameters: [
					 issue     : {->defaultIssue[]},
					 field: "Reporter",
					 value: testUser
			 ],
			],
			[action    : 'transitionIssue',
			 ext: ":USER_CONDITION_TS_40_TC_18_Case_01_ $it _when not satisfies the criteria: ",
			 expected  : -1,
			 parameters: [
					 issue     : {->defaultIssue[]},
					 transition: it,
			 ],
			],
			[action    : 'setFieldValue',
			 ext: ":reporter value set to $user _to check $it : ",
			 expected  : 0,
			 parameters: [
					 issue     : {->defaultIssue[]},
					 field: "Reporter",
					 value: user
			 ],
			],
			[action    : 'transitionIssue',
			 ext: ":USER_CONDITION_TS_40_TC_18_Case_02_ $it _when satisfies the criteria: ",
			 expected  : 0,
			 parameters: [
					 issue     : {->defaultIssue[]},
					 transition: it,
			 ],
			],
	])
}

// USER_CONDITION_TS_40_TC_19_Verify the user in field creator should be projectLead


// USER_CONDITION_TS_40_TC_20_Verify the user in field creator should be of admin role
[
		'verify_user_in_field_creator_should_be_inAdminRole',
].each {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext: ":USER_CONDITION_TS_40_TC_20_Case_01_ $it _when not satisfies the criteria: ",
			 expected  : 0,
			 parameters: [
					 issue     : {->defaultIssue[]},
					 transition: it,
			 ],
			],
	])
}

// USER_CONDITION_TS_40_TC_21_Verify the user in field creator should be in admin group
[
		'verify_user_in_field_creator_should_be_inAdminGroup',
].each {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext: ":USER_CONDITION_TS_40_TC_21_Case_01_ $it _when not satisfies the criteria: ",
			 expected  : 0,
			 parameters: [
					 issue     : {->defaultIssue[]},
					 transition: it,
			 ],
			],
	])
}

// USER_CONDITION_TS_40_TC_22_Verify the user in field creator should specific user_checkUser
[
		'verify_user_in_field_creator_should_be_checkUser',
].each {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext: ":USER_CONDITION_TS_40_TC_22_Case_01_ $it _when not satisfies the criteria: ",
			 expected  : 0,
			 parameters: [
					 issue     : {->defaultIssue[]},
					 transition: it,
			 ],
			],
	])
}

// USER_CONDITION_TS_50_TC_01_Verify the mode: at least one of the criteria configured below_ current user

// USER_CONDITION_TS_50_TC_04_Verify the mode: at least one of the criteria configured below_ user in field creator

// USER_CONDITION_TS_22_TC_04_Verify for the Reverse condition checkbox under the current user Condition configuration page

*/

/*
1. The current user should match all the following criteria:
The user is the reporter : positive - current user is reporter
 negative - other user is reporter = "DONE"

2.The current user should match at least one of the following criteria:
The user is the assignee
The user is one of the following users: jmwe-qa
 positive: check when assignee is current user / current user is jmwe_qa
 negative: when assignee is not current user  /  current user is not jmwe_qa = "DONE"

3. The current user should match all the following criteria:
The user is one of the watchers
 positive: 1.add multiple watchers 2.add multiple watchers with current user 3. check login by other watchers
 negative: 1.current user not visible when not selected as watcher
4. configure with all options under criteria and check -positives and negatives
5. Active and inactive users
 */

/* Review by Mitesh

1. Check : current user
	- with users jmwe_qa

2. Check reverse option
	- for current  user
	- user in field

 */

