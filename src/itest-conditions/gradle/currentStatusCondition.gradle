buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.gint:gint-atlassian:3.8.4"
	}
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/utils.gradle'

tearDown()
addWorkflow()

project.ext.statusIds = [ // statusIds.inProgress
		toDo: 10000,
		inProgress: 3,
		inReview : 10103,
		done : 10001
]
project.ext.fields_StatusConfig = [
		"correlationId="
]
ext.currentStatusConditionCloudNot_yes = [
		"condition.id=d150ebe9-f65f-4199-ade5-c38062e8d5b9",
		"condition.config-d150ebe9-f65f-4199-ade5-c38062e8d5b9={\"statusIds\":[10000],\"options\":{\"not\":true},\"expression\":\"!config.statusIds.includes(issue.status.id)\"}"
]
ext.currentStatusConditionCloud = [
		"condition.id=d150ebe9-f65f-4199-ade5-c38062e8d5b9",
		"condition.config-d150ebe9-f65f-4199-ade5-c38062e8d5b9={\"statusIds\":[10000],\"options\":{\"not\":false},\"expression\":\"config.statusIds.includes(issue.status.id)\"}"
]
// Configuration for conditions
['currentStatusCondition_ToDo_inStatus'].each {
	def functionKey = info?.isCloud ? functionKey.currentStatusConditionCloud : functionKey.currentStatusConditionServer
	def fields = info?.isCloud ? currentStatusConditionCloud : fields_StatusConfig + "issue_statuses=$statusIds.toDo"
	addTransitionFunction(it, 'condition', fields, functionKey )
}
['currentStatusCondition_ToDo_Reverse'].each {
	def functionKey = info?.isCloud ? functionKey.currentStatusConditionCloud : functionKey.currentStatusConditionServer
	def fields = info?.isCloud ? currentStatusConditionCloudNot_yes : fields_StatusConfig + "not=yes" + "issue_statuses=$statusIds.toDo"
	addTransitionFunction(it, 'condition', fields, functionKey)
}
['hideTransitionCondition'].each {
	def functionKey = functionKey.hideTransitionConditionServer
	def fields = fields_StatusConfig
	addTransitionFunction(it, 'condition', fields, functionKey )
}
['previousStatusCondition'].each {
	def functionKey = functionKey.previousStatusConditionServer
	def fields = fields_StatusConfig + "issue_statuses=3"
	addTransitionFunction(it, 'condition', fields, functionKey)
}
['previousStatusCondition_ReverseInProgress'].each {
	def functionKey = functionKey.previousStatusConditionServer
	def fields = fields_StatusConfig + "issue_statuses=3" + "not=yes"
	addTransitionFunction(it, 'condition', fields, functionKey)
}
['previousStatusCondition_Reverse_ToDo'].each {
	def functionKey = functionKey.previousStatusConditionServer
	def fields = fields_StatusConfig + "issue_statuses=10000" + "not=yes"
	addTransitionFunction(it, 'condition', fields, functionKey)
}
['previousStatusCondition_MostRecentStatusOnly'].each {
	def functionKey = functionKey.previousStatusConditionServer
	def fields = fields_StatusConfig + "issue_statuses=3" + "mostRecentOnly=yes"
	addTransitionFunction(it, 'condition', fields, functionKey)
}
['previousStatusCondition_includeCurrentInProgress'].each {
	def functionKey = functionKey.previousStatusConditionServer
	def fields = fields_StatusConfig + "issue_statuses=3" + "includeCurrent=yes"
	addTransitionFunction(it, 'condition', fields, functionKey)
}
['previousStatusCondition_includeCurrentToDo'].each {
	def functionKey = functionKey.previousStatusConditionServer
	def fields = fields_StatusConfig + "issue_statuses=10000" + "includeCurrent=yes"
	addTransitionFunction(it, 'condition', fields, functionKey)
}

['previousStatusCondition_SelectMultipleStatuses'].each {
	def functionKey = functionKey.previousStatusConditionServer
	def fields = fields_StatusConfig + "issue_statuses=$statusIds.inProgress,$statusIds.inReview"
	addTransitionFunction(it, 'condition', fields, functionKey)
}

createWorkflowScheme()
createProject()

def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'defaultIssue')

// checking the current status To Do and previous status In Progress
[
		'currentStatusCondition_ToDo_Reverse',
		'hideTransitionCondition',
		'previousStatusCondition',
		'previousStatusCondition_MostRecentStatusOnly',
		'previousStatusCondition_includeCurrentInProgress',
].each {
	gint.taskHelper.add([
			action    : 'transitionIssue', ext: ' : error for ' + it,
			expected  : -1,
			parameters: [
					transition: it,
					issue: { -> defaultIssue[] },
			],
	])
}
[
		'currentStatusCondition_ToDo_inStatus',
		'previousStatusCondition_ReverseInProgress',
		'In Progress',
		'To Do',
		'previousStatusCondition_MostRecentStatusOnly',
		'previousStatusCondition',
		'previousStatusCondition_includeCurrentToDo',
		'previousStatusCondition_SelectMultipleStatuses'
].each {
	gint.taskHelper.add([
			action    : 'transitionIssue', ext: ' : success for ' + it,
			expected  : 0,
			parameters: [
					transition: it,
					issue: { -> defaultIssue[] },
			],
	])
}
[
		'previousStatusCondition_Reverse_ToDo',
		'previousStatusCondition_ReverseInProgress'
].each {
	gint.taskHelper.add([
			action    : 'transitionIssue', ext: ' : error for ' + it,
			expected  : -1,
			parameters: [
					transition: it,
					issue: { -> defaultIssue[] },
			],
	])
}
def prevStatusInReview = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'prevStatusInProgress')
[
		'previousStatusCondition_SelectMultipleStatuses'
].each {
	gint.taskHelper.add([
			action    : 'transitionIssue', ext: ' : not allow transition when issue not has atleast one prev status ' + it,
			expected  : -1,
			parameters: [
					transition: it,
					issue: { -> prevStatusInReview[] },
			],
	])
}
[		'In Review',
		'To Do',
		'previousStatusCondition_SelectMultipleStatuses'
].each {
	gint.taskHelper.add([
			action    : 'transitionIssue', ext: ' : allow transition when Issue is in previous status_IN PROGRESS or IN REVIEW ' + it,
			expected  : 0,
			parameters: [
					transition: it,
					issue: { -> prevStatusInReview[] },
			],
	])
}

/*
1.  Negative  - add current status condition with in progress and check on issue when issue status is to do = Need to addTransitionFunction on workflow step
2. Positive -  add current status condition with in progress and check on issue when issue status is in progress = "DONE"
3. add current status condition with in progress,done and to do and check on issue when issue status is in progress, done, to to , in review
4. add current status condition with in progress,done and to do and check on issue when issue status is in progress, done, to to , in review - reverse
5. add current status condition with in progress,done and to do and check on issue when issue status is in progress
6. add current status condition with in progress,done and to do and check on issue when issue status is in progress - reverse
 */



