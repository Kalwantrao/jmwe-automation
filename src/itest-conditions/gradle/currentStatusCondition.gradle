buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.gint:gint-atlassian:3.8.4"
	}
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/utils.gradle'

tearDown()
addWorkflow()


def defaultFieldsServer = [
		"correlationId="
]
def defaultFieldsCloud =[
		"condition.id=d150ebe9-f65f-4199-ade5-c38062e8d5b9",
]
def currentStatusServer = [
		currentStatusCondition_ToDo_inStatus : [ defaultFieldsServer + "issue_statuses=$statusIds.toDo", "not="],
		currentStatusCondition_ToDo_Reverse : [ defaultFieldsServer +  "issue_statuses=$statusIds.toDo", "not=yes" ],
]
def currentStatusCloud = [
		currentStatusCondition_ToDo_inStatus :  [ defaultFieldsCloud + "condition.config-d150ebe9-f65f-4199-ade5-c38062e8d5b9={\"statusIds\":[10003],\"options\":{\"not\":false},\"expression\":\"config.statusIds.includes(issue.status.id)\"}" ],
		currentStatusCondition_ToDo_Reverse : [	defaultFieldsCloud + "condition.config-d150ebe9-f65f-4199-ade5-c38062e8d5b9={\"statusIds\":[10003],\"options\":{\"not\":true},\"expression\":\"!config.statusIds.includes(issue.status.id)\"}" ]
]
def currentStatus = info?.isCloud ? currentStatusCloud : currentStatusServer
// Configuration for conditions

currentStatus.eachWithIndex { transitions , fields, i ->
	def functionKey = info?.isCloud ? functionKey.currentStatusConditionCloud : functionKey.currentStatusConditionServer
	gint.taskHelper.addSetUp([
			[action    : 'addTransition', ext: ':' + transitions,
			 retry: true,
			 retrySleep: 5000,
			 sleep: 3000,
			 parameters: [
					 workflow: workflow,
					 name    : transitions,
					 step    : info?.isCloud ? startStepCloud : startStepServer,
					// screen  : screen
			 ]
			],
			[action    : 'addTransitionFunction', ext: ':' + transitions,
			 retry: true,
			 retrySleep: 5000,
			 sleep: 3000,
			 parameters: [
					 workflow   : workflow,
					 transition : transitions,
					 functionKey: functionKey,
					 type       : 'condition',
					 step       : info?.isCloud ? startStepCloud : startStepServer,
					 field : fields
			 ]
			],
	])


}

createWorkflowScheme()
createProject()

def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'defaultIssue')

[
		'currentStatusCondition_ToDo_Reverse',
].each {
	gint.taskHelper.add([
			action    : 'transitionIssue', ext: ' : error for ' + it,
			expected  : -1,
			parameters: [
					transition: it,
					issue: { -> defaultIssue[] },
			],
	])
}
[
		'currentStatusCondition_ToDo_inStatus',
].each {
	gint.taskHelper.add([
			action    : 'transitionIssue', ext: ' : success for ' + it,
			expected  : 0,
			parameters: [
					transition: it,
					issue: { -> defaultIssue[] },
			],
	])
}


/*
1.  Negative  - add current status condition with in progress and check on issue when issue status is to do = Need to addTransitionFunction on workflow step
2. Positive -  add current status condition with in progress and check on issue when issue status is in progress = "DONE"
3. add current status condition with in progress,done and to do and check on issue when issue status is in progress, done, to to , in review
4. add current status condition with in progress,done and to do and check on issue when issue status is in progress, done, to to , in review - reverse
5. add current status condition with in progress,done and to do and check on issue when issue status is in progress
6. add current status condition with in progress,done and to do and check on issue when issue status is in progress - reverse
 */



