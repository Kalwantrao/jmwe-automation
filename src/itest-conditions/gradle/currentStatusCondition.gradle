buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.gint:gint-atlassian:3.8.4"
	}
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/itest-conditions/condition.gradle'

def functionKey = info?.isCloud ? "com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.${testCloudBuild}__CurrentStatusCondition" : 'com.innovalog.jmwe.jira-misc-workflow-extensions:currentstatus-condition'
def STATUS_ID_TODO = getStatusId("To Do")
def STATUS_ID_INPROGRESS = getStatusId("In Progress")
def STATUS_ID_INREVIEW = getStatusId("In Review")
def STATUS_ID_DONE = getStatusId("Done")

def ToDo = {->STATUS_ID_TODO.getAt(0).trim()}
def InProgress = {->STATUS_ID_INPROGRESS.getAt(0).trim()}
def InReview = {->STATUS_ID_INREVIEW.getAt(0).trim()}
def Done = {->STATUS_ID_DONE.getAt(0).trim()}

def currentStatusServer = [
		SELECT_CURRENT_STATUS_TODO : [ "issue_statuses=$ToDo", "not="],
		SELECT_CURRENT_STATUS_TODO_INPROGRESS_INREVIEW_DONE : [ "issue_statuses=$ToDo,$InProgress,$InReview,$Done", "not="],
		SELECT_CURRENT_STATUS_TODO_AND_REVERSE : [  "issue_statuses=$ToDo", "not=yes" ],
		SELECT_CURRENT_STATUS_TODO_INPROGRESS_INREVIEW_DONE_REVERSE : [ "issue_statuses=$ToDo,$InProgress,$InReview,$Done", "not=yes"],
]

def currentStatusCloud = [
		SELECT_CURRENT_STATUS_TODO :  "{\"statusIds\":[$ToDo],\"options\":{\"not\":false},\"expression\":\"config.statusIds.includes(issue.status.id)\"}" ,
		SELECT_CURRENT_STATUS_TODO_INPROGRESS_INREVIEW_DONE :    "{\"statusIds\":[$ToDo,$InProgress,$InReview,$Done],\"options\":{\"not\":false},\"expression\":\"config.statusIds.includes(issue.status.id)\"}" ,
		SELECT_CURRENT_STATUS_TODO_AND_REVERSE :  "{\"statusIds\":[$ToDo],\"options\":{\"not\":true},\"expression\":\"!config.statusIds.includes(issue.status.id)\"}" ,
		SELECT_CURRENT_STATUS_TODO_INPROGRESS_INREVIEW_DONE_REVERSE : 	"{\"statusIds\":[$ToDo,$InProgress,$InReview,$Done],\"options\":{\"not\":true},\"expression\":\"!config.statusIds.includes(issue.status.id)\"}"
]

def currentStatusCondition = info?.isCloud ? currentStatusCloud : currentStatusServer


currentStatusCondition.eachWithIndex { transitions, fields, i->
	addTransitionFunction(transitions, 'condition', fields, functionKey)
}

createWorkflowScheme()
createProject()

def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'defaultIssue')

currentStatusCondition.eachWithIndex { transitions, fields, i->
	def expected;
	if(transitions == 'SELECT_CURRENT_STATUS_TODO' || transitions == 'SELECT_CURRENT_STATUS_TODO_INPROGRESS_INREVIEW_DONE'){
		expected = 0
	}else if(transitions == 'SELECT_CURRENT_STATUS_TODO_AND_REVERSE' || transitions == 'SELECT_CURRENT_STATUS_TODO_INPROGRESS_INREVIEW_DONE_REVERSE'){
		expected = -1
	}
	gint.taskHelper.add([
			[action: 'getFieldValue',
			 ext: ":Validate that the current issue in status_ TODO:$transitions ",
			 parameters: [
					 issue: {->defaultIssue[]},
					 field: "Status"
			 ],
					data: ["Status  . . . . . . . . . . . : To Do"]
			],
			[action    : 'transitionIssue',
			 ext: ": CURRENT_STATUS_CONDITION_TC_10-Verify transition tab $transitions _when current issue in selected status:",
			 expected  : expected,
			 parameters: [
					 transition: transitions,
					 issue: { -> defaultIssue[] },
			 ],
			]
	])
}

def transitionByUserTask =  { transition, issue, expected ->
	if(!isCloud) {
		gint.taskHelper.add(
				[expected    : expected,
				 name        : ":check transition trigger by other user:" + transition,
				 cmd         : /acli $testUser -a transitionIssue --issue $issue --transition $transition/,
				]
		)
	}
}

// CURRENT_STATUS_CONDITION-Verify transition by user other than admin
transitionByUserTask('SELECT_CURRENT_STATUS_TODO', {->defaultIssue[]}, 0)
transitionByUserTask('SELECT_CURRENT_STATUS_TODO_REVERSE', {->defaultIssue[]}, -1)
transitionByUserTask('SELECT_CURRENT_STATUS_TODO_INPROGRESS_INREVIEW_DONE', {->defaultIssue[]}, 0)
transitionByUserTask('SELECT_CURRENT_STATUS_TODO_INPROGRESS_INREVIEW_DONE_REVERSE', {->defaultIssue[]}, -1)

/*

1. Negative  - add current status condition with in progress and check on issue when issue status is to do = Need to addTransitionFunction on workflow step
2. Positive -  add current status condition with in progress and check on issue when issue status is in progress = "DONE"
3. add current status condition with in progress,done and to do and check on issue when issue status is in progress, done, to to , in review
4. add current status condition with in progress,done and to do and check on issue when issue status is in progress, done, to to , in review - reverse
5. add current status condition with in progress,done and to do and check on issue when issue status is in progress
6. add current status condition with in progress,done and to do and check on issue when issue status is in progress - reverse
7. Select all the statuses and check on issue by changing the statuses
	- for example - select all status checkboxes and check on issue when the issue status is
	- TODO - DONE
	- INPROGRESS - PENDING
	- INREVIEW - PENDING
	- DONE  - PENDING
8. Select all the status checkboxes and reverse option and check on the issue by changing the statuses
	- for example - select all status checkboxes and reverse and check on issue when the issue status is
	- TODO - DONE
	- INPROGRESS - PENDING
	- INREVIEW - PENDING
	- DONE  - PENDING
9. update the existing configuration -
	- unselect status checkbox and then check on issue - PENDING
	- unselect the reverse checkbox and check on issue - PENDING

 */