buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.3"
    }
}

apply plugin: "org.gint.atlassian"
apply from: gint.resourceDirectory +'/src/itest-postfunction5/postfunction.gradle'

def functionKey = info?.isCloud ? "com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.${testCloudBuild}__AssignToLastRoleMemberFunction" : 'com.innovalog.jmwe.jira-misc-workflow-extensions:assigntolastrolemember'

def TEST_USER_ID = getUserId(testUser)
def testUserId = {->TEST_USER_ID.getAt(0).trim()}

def JIRA_ADMIN_PROJECT_ROLE_ID = getProjectRoleId("Administrators")
def jiraAdminRoleId = {->JIRA_ADMIN_PROJECT_ROLE_ID.getAt(0).trim()}

def JIRA_TEST_PROJECT_ROLE_ID = getProjectRoleId("testprojectrole")
def testProjectRoleId = {->JIRA_TEST_PROJECT_ROLE_ID.getAt(0).trim()}

ext.EMPTY_PROJECT_ROLE_ID = getProjectRoleId("emptyprojectrole")
project.ext.emptyProjectRoleId = {->EMPTY_PROJECT_ROLE_ID.getAt(0).trim()}

def projectRole = [
        admin : ["jira.projectrole.id=$jiraAdminRoleId"],
        testRole : ["jira.projectrole.id=$testProjectRoleId"],
        emptyRole : ["jira.projectrole.id=$emptyProjectRoleId"],
]

def option = [
        includeReporter : ["includeReporter=yes"],
        includeCurrentAssignee : ["includeCurrentAssignee=yes"],
        skipInactiveUsers :["skipInactiveUsers=yes"],
]

def action = [
        force : ["assigneeMode=default"],
        ifAutomatic : ["assigneeMode=skipIfAssignee"],
        ifChangedOnTransitionScreen : ["assigneeMode=forceSelectedUser"],
]

def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'defaultIssue')

if(!isCloud) {
    gint.taskHelper.add(
            action: 'updateUser',
            sleep: sleep,
            ext: ": Make user active",
            parameters: [
                    activate: null,
                    userId  : inactiveAdmin,
            ]
    )
}
/*
[testUser1, testUser, inactiveAdmin, testAdmin, "@self"].collect{
    def role;
    if (it == "@self" || it == inactiveAdmin || it == testAdmin){
        role = "Administrators"
    }
    else {
        role = testRole
    }
    gint.taskHelper.add(
            action: 'removeProjectRoleActors',
            sleep: info?.isCloud? 5000 : 0,
            ext: ":remove user $it from project role_ $role",
            parameters:[
                    project: projectName,
                    role: role,
                    userId: it
            ]
    )
}
*/
def usersToAddInProjectRoleServer = [testUser,testUser1,inactiveAdmin, testAdmin,"@self"]
def usersToAddInProjectRoleCloud = [testUser,testUser1, testAdmin,"@self"]
def usersToAddInProjectRole = info?.isCloud? usersToAddInProjectRoleCloud : usersToAddInProjectRoleServer

usersToAddInProjectRole.collect{
    def role;
    if (it == "@self" || it == inactiveAdmin || it == testAdmin){
        role = "Administrators"
    }
    else {
        role = testRole
    }
    gint.taskHelper.add(
            action: 'addProjectRoleActors',
            sleep: info?.isCloud? 5000 : 0,
            ext: ": add user $it to project role $role",
            parameters:[
                    project: projectName,
                    role: role,
                    userId: it,
                    continue: null
            ]
    )
}

[user,testAdmin, " "].collect{
    gint.taskHelper.add(
            [action    : 'updateIssue',
             sleep: info?.isCloud? 5000 : 0,
             ext       : ': change assignee to: '+it  ,
             parameters: [
                     issue: { -> defaultIssue[] },
                     assignee: it
             ],
            ],
    )
}

relatedIssuesList.each {
    def relatedIssuesConfigurationFieldsMap = createRelatedIssuesMap("CONFIGURATION", it, projectName, " ")
    def transition = "assignIssueToLastAdminRole" + it
    relatedIssuesConfigurationFieldsMap.eachWithIndex { key, value, i ->
        def server =  [projectRole.admin , conditionalExecution.false]
        def cloud =  "{\"targetIssue\":\"$value\",\"conditionalExecution\":false,\"includeReporter\":false,\"includeCurrentAssignee\":false,\"skipInactiveUsers\":false,\"sendNotifications\":false,\"role\":$jiraAdminRoleId,\"runAsType\":\"addonUser\"}"
        if(isCloud){
            addTransitionFunction( transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
        }
    }
    def relatedIssuesMap = createRelatedIssuesMap("TRANSITION", it, projectName, " ")
    if(isCloud) {
        relatedIssuesMap.eachWithIndex { key, value, i ->
            [user, testAdmin, " "].collect {
                gint.taskHelper.add(
                        [action    : 'updateIssue',
                         sleep     : sleep,
                         ext       : ": change assignee to: $it before transition issue with" + transition,
                         parameters: [
                                 issue   : value,
                                 assignee: it
                         ],
                        ],
                )
            }
            gint.taskHelper.add([
                    [action    : 'transitionIssue',
                     sleep     : sleep,
                     ext       : "By " + transition,
                     parameters: [
                             issue     : key,
                             transition: transition,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     sleep     : sleep,
                     ext       : "Of assignee after transition with " + transition,
                     parameters: [
                             issue: value,
                             field: "Assignee"
                     ],
                     data      : [/Assignee  . . . . . . . . . . : $testAdmin/],
                    ],
            ])
        }
    }
}

['1. assignToLastAdminRole'].each {
    def server =  [projectRole.admin , conditionalExecution.false]
    def cloud =  "{\"conditionalExecution\":false,\"includeReporter\":false,\"includeCurrentAssignee\":false,\"skipInactiveUsers\":false,\"sendNotifications\":false,\"role\":$jiraAdminRoleId,\"runAsType\":\"addonUser\"}"
    addTransitionFunction( it, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

['2. assignToLastTestRole'].each {
    def server =  [projectRole.testRole , conditionalExecution.true]
    def cloud =  "{\"conditionalExecution\":false,\"includeReporter\":false,\"includeCurrentAssignee\":false,\"skipInactiveUsers\":false,\"sendNotifications\":false,\"role\":$testProjectRoleId,\"runAsType\":\"addonUser\"}"
    addTransitionFunction( it, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

['3. assignToLastRoleIncludeReporter'].each {
    def server = [ projectRole.admin , option.includeReporter , conditionalExecution.false]
    def cloud =  "{\"conditionalExecution\":false,\"includeReporter\":true,\"includeCurrentAssignee\":false,\"skipInactiveUsers\":false,\"sendNotifications\":false,\"role\":$jiraAdminRoleId,\"runAsType\":\"addonUser\"}"
    addTransitionFunction( it, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

['4. assignToLastRoleIncludeReporterIfAutomatic'].each {
    def server =  [projectRole.admin , option.includeReporter , action.ifAutomatic , conditionalExecution.false]
    if(!isCloud) {
        addTransitionFunction(it, 'postfunction', server, functionKey)
    }
}

['5. assignToLastRoleIncludeReporterIfNotAutomatic'].each {
    def server =  [projectRole.admin , option.includeReporter , action.ifAutomatic , conditionalExecution.false]
    if(!isCloud) {
        addTransitionFunction(it, 'postfunction', server, functionKey)
    }
}
['6. assignToLastRoleIncludeReporterIfChangeOnTransitionScreen'].each {
    def server =  [projectRole.admin , option.includeReporter , action.ifChangedOnTransitionScreen , conditionalExecution.false]
    if(!isCloud) {
        addTransitionFunction(it, 'postfunction', server, functionKey)
    }
}

['7. assignToLastRoleIncludeReporterIfNotChangeOnTransitionScreen'].each {
    def server =  [projectRole.admin , option.includeReporter , action.ifChangedOnTransitionScreen , conditionalExecution.false]
    if(!isCloud) {
        addTransitionFunction(it, 'postfunction', server, functionKey)
    }
}

['8. assignToLastRoleIncludeCurrentAssignee'].each {
    def server =  [projectRole.admin , option.includeCurrentAssignee, conditionalExecution.false]
    def cloud =  "{\"conditionalExecution\":false,\"includeReporter\":false,\"includeCurrentAssignee\":true,\"skipInactiveUsers\":false,\"sendNotifications\":true,\"role\":$jiraAdminRoleId,\"runAsType\":\"addonUser\"}"
    addTransitionFunction( it, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

['9. assignToLastRoleIncludeCurrentAssigneeNegative'].each {
    def server =  [projectRole.admin , option.includeCurrentAssignee, conditionalExecution.false]
    def cloud =  "{\"conditionalExecution\":false,\"includeReporter\":false,\"includeCurrentAssignee\":true,\"skipInactiveUsers\":false,\"sendNotifications\":true,\"role\":$jiraAdminRoleId,\"runAsType\":\"addonUser\"}"
    addTransitionFunction( it, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

['10. assignToLastRoleIncludeCurrentAssigneeIfAutomatic'].each {
    def server =  [projectRole.admin , option.includeCurrentAssignee , action.ifAutomatic , conditionalExecution.false]
    if(!isCloud) {
        addTransitionFunction(it, 'postfunction', server, functionKey)
    }
}

['11. assignToLastRoleIncludeCurrentAssigneeIfAutomaticNegative'].each {
    def server =  [projectRole.admin , option.includeCurrentAssignee , action.ifAutomatic , conditionalExecution.false]
    if(!isCloud) {
        addTransitionFunction(it, 'postfunction', server, functionKey)
    }
}

['12. assignToLastRoleIncludeCurrentAssigneeIfChangeOnTransitionScreen'].each {
    def server =  [projectRole.admin , option.includeCurrentAssignee , action.ifChangedOnTransitionScreen , conditionalExecution.false]
    if(!isCloud) {
        addTransitionFunction(it, 'postfunction', server, functionKey)
    }
}
['13. assignToLastRoleIncludeCurrentAssigneeIfChangeOnTransitionScreenNegative'].each {
    def server =  [projectRole.admin , option.includeCurrentAssignee , action.ifChangedOnTransitionScreen , conditionalExecution.false]
    if(!isCloud) {
        addTransitionFunction(it, 'postfunction', server, functionKey)
    }
}
['14. assignToLastRoleSkipInactiveUsers'].each {
    def server =  [projectRole.admin , option.skipInactiveUsers, conditionalExecution.false]
    def cloud =  "{\"conditionalExecution\":false,\"includeReporter\":false,\"includeCurrentAssignee\":false,\"skipInactiveUsers\":true,\"sendNotifications\":true,\"role\":$jiraAdminRoleId,\"runAsType\":\"addonUser\"}"
    addTransitionFunction( it, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}


[
        '1. assignToLastAdminRole'
].collect {
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             sleep: sleep,
             ext: it + ': of related issue' ,
             parameters: [
                     issue     : { -> defaultIssue[] },
                     transition: it ,
             ]
            ],
            [action    : 'getFieldValue',
             sleep: sleep,
             ext       : it + ': of related issue' ,
             parameters: [
                     issue: { -> defaultIssue[] },
                     field: "Assignee"
             ],
             data      : [/Assignee  . . . . . . . . . . : $testAdmin/],
            ],
    ])
}

[testUser1,testUser, " "].collect{
    gint.taskHelper.add(
            [action    : 'updateIssue',
             sleep: sleep,
             ext       : it + ': change assignee2' ,
             parameters: [
                     issue: { -> defaultIssue[] },
                     assignee: it
             ],
            ],
    )
}

[
        '2. assignToLastTestRole'
].collect {
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             sleep: sleep,
             ext: it + ': of related issue' ,
             parameters: [
                     issue     : { -> defaultIssue[] },
                     transition: it ,
                     priority:'High',
             ]
            ],
            [action    : 'getFieldValue',
             sleep: sleep,
             ext       : it + ': of related issue' ,
             parameters: [
                     issue: { -> defaultIssue[] },
                     field: "Assignee"
             ],
             data      : [/Assignee  . . . . . . . . . . : $testUser/],
            ],
    ])
}
def defaultIssue1 = createIssue([type: 'Task', summary: 'JMWE_Issue1'], 'defaultIssue1')
[
        '3. assignToLastRoleIncludeReporter'
].collect {
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             sleep: sleep,
             ext: it + ': of related issue' ,
             parameters: [
                     issue     : { -> defaultIssue1[] },
                     transition: it ,
             ]
            ],
            [action    : 'getFieldValue',
             sleep: sleep,
             ext       : it + ': of related issue' ,
             parameters: [
                     issue: { -> defaultIssue1[] },
                     field: "Assignee"
             ],
             data      : [/Assignee  . . . . . . . . . . : $getCurrentUserName/],
            ],
    ])
}
def defaultIssue2 = createIssue([type: 'Task', summary: 'JMWE_Issue2'], 'defaultIssue2')
[
        '4. assignToLastRoleIncludeReporterIfAutomatic'
].collect {
    if(!isCloud) {
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 sleep: sleep,
                 ext: it + ': of related issue',
                 parameters: [
                         issue     : { -> defaultIssue2[] },
                         transition: it,
                         assignee  : -1,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : it + ': of related issue',
                 parameters: [
                         issue: { -> defaultIssue2[] },
                         field: "Assignee"
                 ],
                 data      : [/Assignee  . . . . . . . . . . : $getCurrentUserName/],
                ],
        ])
    }
}
def defaultIssue3 = createIssue([type: 'Task', summary: 'JMWE_Issue3'], 'defaultIssue3')
[
        '5. assignToLastRoleIncludeReporterIfNotAutomatic'
].collect {
    if(!isCloud) {
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 sleep: sleep,
                 ext: it + ': of related issue',
                 parameters: [
                         issue     : { -> defaultIssue3[] },
                         transition: it,
                         assignee  : testUser1,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : it + ': of related issue',
                 parameters: [
                         issue: { -> defaultIssue3[] },
                         field: "Assignee"
                 ],
                 data      : [/Assignee  . . . . . . . . . . : $testUser1/],
                ],
        ])
    }
}

/*
def defaultIssue4 = createIssue([type: 'Task', summary: 'JMWE_Issue4'], 'defaultIssue4')
[
        '6. assignToLastRoleIncludeReporterIfChangeOnTransitionScreen'
].collect {
if(!isCloud) {
    gint.taskHelper.add([
            [action    : 'transitionIssue',
            sleep: sleep,
            ext: it + ': of related issue' ,
             parameters: [
                     issue     : { -> defaultIssue4[] },
                     transition: it ,
                     assignee: testUser,
             ]
            ],
            [action    : 'getFieldValue',
            sleep: sleep,
             ext       : it + ': of related issue' ,
             parameters: [
                     issue: { -> defaultIssue4[] },
                     field: "Assignee"
             ],
             data      : [/Assignee  . . . . . . . . . . : $testUser/],
            ],
    ])
    }
}
*/
def defaultIssue5 = createIssue([type: 'Task', summary: 'JMWE_Issue5'], 'defaultIssue5')
[
        '7. assignToLastRoleIncludeReporterIfNotChangeOnTransitionScreen'
].collect {
    if(!isCloud) {
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 sleep: sleep,
                 ext: it + ': of related issue',
                 parameters: [
                         issue     : { -> defaultIssue5[] },
                         transition: it,
                         assignee  : " ",
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : it + ': of related issue',
                 parameters: [
                         issue: { -> defaultIssue5[] },
                         field: "Assignee"
                 ],
                 data      : [/Assignee  . . . . . . . . . . : $getCurrentUserName/],
                ],
        ])
    }
}

def defaultIssue6 = createIssue([type: 'Task', summary: 'JMWE_Issue6'], 'defaultIssue6')

[testAdmin].collect{
    gint.taskHelper.add(
            [action    : 'updateIssue',
             sleep: sleep,
             ext       : it + ': change assignee3' ,
             parameters: [
                     issue: { -> defaultIssue6[] },
                     assignee: it
             ],
            ],
    )
}
[
        '8. assignToLastRoleIncludeCurrentAssignee'
].collect {
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             sleep: sleep,
             ext: it + ': of related issue' ,
             parameters: [
                     issue     : { -> defaultIssue6[] },
                     transition: it ,
             ]
            ],
            [action    : 'getFieldValue',
             sleep: sleep,
             ext       : it + ': of related issue' ,
             parameters: [
                     issue: { -> defaultIssue6[] },
                     field: "Assignee"
             ],
             data      : [/Assignee  . . . . . . . . . . : $testAdmin/],
            ],
    ])
}

def defaultIssue7 = createIssue([type: 'Task', summary: 'JMWE_Issue7'], 'defaultIssue7')
[testUser].collect{
    gint.taskHelper.add(
            [action    : 'updateIssue',
             sleep: sleep,
             ext       : ":" + ': change assignee to' + it ,
             parameters: [
                     issue: { -> defaultIssue7[] },
                     assignee: it
             ],
            ],
    )
}
[
        '9. assignToLastRoleIncludeCurrentAssigneeNegative'
].collect {
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             sleep: sleep,
             ext: it + ': of related issue',
             parameters: [
                     issue     : { -> defaultIssue7[] },
                     transition: it,
             ]
            ],
            [action    : 'getFieldValue',
             sleep: sleep,
             ext       : it + ': of related issue',
             parameters: [
                     issue: { -> defaultIssue7[] },
                     field: "Assignee"
             ],
             failData      : [/Assignee  . . . . . . . . . . : $testUser1/],
            ],
    ])
}
def defaultIssue8 = createIssue([type: 'Task', summary: 'JMWE_Issue8'], 'defaultIssue8')
[getCurrentUserName," "].collect{
    gint.taskHelper.add(
            [action    : 'updateIssue',
             sleep: sleep,
             ext       : it + ': change assignee5' ,
             parameters: [
                     issue: { -> defaultIssue8[] },
                     assignee: it
             ],
            ],
    )
}
[
        '10. assignToLastRoleIncludeCurrentAssigneeIfAutomatic'
].collect {
    if(!isCloud) {
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 sleep: sleep,
                 ext: it + ': of related issue',
                 parameters: [
                         issue     : { -> defaultIssue8[] },
                         transition: it,
                         assignee  : -1,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : it + ': of related issue',
                 parameters: [
                         issue: { -> defaultIssue8[] },
                         field: "Assignee"
                 ],
                 data      : [/Assignee  . . . . . . . . . . : $getCurrentUserName/],
                ],
        ])
    }
}
def defaultIssue9 = createIssue([type: 'Task', summary: 'JMWE_Issue9'], 'defaultIssue9')
[getCurrentUserName," "].collect{
    gint.taskHelper.add(
            [action    : 'updateIssue',
             sleep: sleep,
             ext       :  ': change assignee to : '+ it ,
             parameters: [
                     issue: { -> defaultIssue9[] },
                     assignee: it
             ],
            ],
    )
}

[
        '11. assignToLastRoleIncludeCurrentAssigneeIfAutomaticNegative'
].collect {
    if(!isCloud) {
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             sleep: sleep,
             ext: it + ': of related issue' ,
             parameters: [
                     issue     : { -> defaultIssue9[] },
                     transition: it ,
                     assignee: testUser ,
             ]
            ],
            [action    : 'getFieldValue',
             sleep: sleep,
             ext       : it + ': of related issue' ,
             parameters: [
                     issue: { -> defaultIssue9[] },
                     field: "Assignee"
             ],
             data      : [/Assignee  . . . . . . . . . . : $testUser/],
            ],
    ])
    }
}

def defaultIssue10 = createIssue([type: 'Task', summary: 'JMWE_Issue10'], 'defaultIssue10')

[testAdmin].collect{
    gint.taskHelper.add(
            [action    : 'updateIssue',
             sleep: sleep,
             ext       : it + ': change assignee7' ,
             parameters: [
                     issue: { -> defaultIssue10[] },
                     assignee: it
             ],
            ],
    )
}

[
        '12. assignToLastRoleIncludeCurrentAssigneeIfChangeOnTransitionScreen'
].collect {
    if(!isCloud) {
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 sleep: sleep,
                 ext: it + ': of related issue',
                 parameters: [
                         issue     : { -> defaultIssue10[] },
                         transition: it,
                         assignee  : " ",
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : ":" + it + ': of related issue',
                 parameters: [
                         issue: { -> defaultIssue10[] },
                         field: "Assignee"
                 ],
                 data      : [/Assignee  . . . . . . . . . . : $testAdmin/],
                ],
        ])
    }
}

[
        //'13. assignToLastRoleIncludeCurrentAssigneeIfChangeOnTransitionScreenNegative'
].collect {
    if(!isCloud) {
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 sleep: sleep,
                 ext: it + ': of related issue',
                 parameters: [
                         issue     : { -> defaultIssue10[] },
                         transition: it,
                         assignee  : testUser,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : it + ': of related issue',
                 parameters: [
                         issue: { -> defaultIssue10[] },
                         field: "Assignee"
                 ],
                 data      : [/Assignee  . . . . . . . . . . : $testUser/],
                ],
        ],
        )
    }
}

def defaultIssue11 = createIssue([type: 'Task', summary: 'JMWE_Issue11'], 'defaultIssue11')
if(!isCloud) {
    gint.taskHelper.add(
            action: 'updateUser',
            sleep: sleep,
            ext: ": Make user active1",
            parameters: [
                    activate: null,
                    userId  : inactiveAdmin,
            ]
    )
}

def listOfUserToCheckActiveUserServer = [testAdmin,inactiveAdmin," "]
def listOfUserToCheckActiveUserCloud = [testAdmin," "]
def listOfUserToCheckActiveUser = info?.isCloud ? listOfUserToCheckActiveUserCloud : listOfUserToCheckActiveUserServer

listOfUserToCheckActiveUser.collect{
    gint.taskHelper.add(
            [action    : 'updateIssue',
             sleep: sleep,
             ext       : it + ': change assignee8' ,
             parameters: [
                     issue: { -> defaultIssue11[] },
                     assignee: it
             ],
            ],
    )
}

if(!isCloud) {
    gint.taskHelper.add(
            action: 'updateUser',
            ext: ": Make user inactive",
            sleep: sleep,
            parameters: [
                    deactivate: null,
                    userId    : inactiveAdmin,
            ]
    )
}

[
        '14. assignToLastRoleSkipInactiveUsers'
].collect {
    if(!isCloud) {
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 sleep     : sleep,
                 ext       : it + ': of related issue',
                 parameters: [
                         issue     : { -> defaultIssue11[] },
                         transition: it,
                         assignee  : " ",
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep     : sleep,
                 ext       : it + ': of related issue',
                 parameters: [
                         issue: { -> defaultIssue11[] },
                         field: "Assignee"
                 ],
                 data      : [/Assignee  . . . . . . . . . . : $testAdmin/],
                ],
        ])
    }
}
