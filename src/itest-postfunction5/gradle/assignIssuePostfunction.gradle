buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/itest-postfunction5/postfunction.gradle'

def functionKey = info?.isCloud? "com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.${testCloudBuild}__AssignIssueFunction" : "com.innovalog.jmwe.jira-misc-workflow-extensions:AssignIssue-function"

def TEST_USER_ID = getUserId(testUser)
def testUserId = {->TEST_USER_ID.getAt(0).trim()}

def JIRA_ADMIN_PROJECT_ROLE_ID = getProjectRoleId("Administrators")
def jiraAdminRoleId = {->JIRA_ADMIN_PROJECT_ROLE_ID.getAt(0).trim()}

def JIRA_TEST_PROJECT_ROLE_ID = getProjectRoleId("testprojectrole")
def testProjectRoleId = {->JIRA_TEST_PROJECT_ROLE_ID.getAt(0).trim()}

addComponentForConfiguration()

def COMPONENT_ID = getComponentId(defaultValueOfComponent)
def component1Id = {->COMPONENT_ID.getAt(0).trim()}

def selectUser = [
        currentUser :  info?.isCloud ? /"selectUserType":"currentUser"/ : [ "assignmentType=currentUser"  ],
        Reporter : info?.isCloud ? /"selectUserType":"reporter"/ : [ "assignmentType=reporter" ],
        ProjectLead : info?.isCloud ? /"selectUserType":"projectLead"/ : [ "assignmentType=projectLead" ],
        //UserReturnFromScript: info?.isCloud ? /"selectUserType":"$nunjuckExpression.returnsReporter"/ : ["assignmentType=script","script=$groovyExpression.returnsReporter"],
        //UserWhoIsDefaultAssigneeOfProject: info?.isCloud ? /"selectUserType":"projectDefault"/ : [ "assignmentType=projectDefault"],
        UserWhoLastCommented: info?.isCloud ? /"selectUserType":"userLastCommented"/ : ["assignmentType=lastCommenter"],
        UserByUserName : info?.isCloud ? /"selectUserType":"specificUser","selectUser":"$info.userKey"/ : ["assignmentType=specificUser","user=$info.userKey"],
        //UserWhoIsComponentLead : info?.isCloud ? /"selectUserType":"componentLead","selectComponent":"$component1Id"/ : ["assignmentType=componentLead","component=$component1Id"],
        //ReturnFromUserObjectFieldAssignee: info?.isCloud ? /"selectUserType":"userFromField","selectUserField":"assignee","multipleUserBehavior":"alphabetical"/ : ["assignmentType=userFromField", "field=assignee"],
        ReturnFromUserObjectFieldReporter: info?.isCloud ? /"selectUserType":"userFromField","selectUserField":"reporter","multipleUserBehavior":"alphabetical"/ : ["assignmentType=userFromField", "field=reporter"],
        ReturnFromUserObjectFieldCreator: info?.isCloud ? /"selectUserType":"userFromField","selectUserField":"creator","multipleUserBehavior":"alphabetical"/ : ["assignmentType=userFromField", "field=creator"],
        //LastAdminRoleMember: info?.isCloud ? /"selectUserType":"lastRoleMember","role":$jiraAdminRoleId,"multipleUserBehavior":"alphabetical"/ : [ "assignmentType=lastRoleMember", "role=$jiraAdminRoleId","multipleUserBehavior=alphabetical"],
        //TestRoleMember: info?.isCloud ? /"selectUserType":"roleMember","role":$testProjectRoleId","multipleUserBehavior":"alphabetical"/ : ["assignmentType=roleMember", "role=$testProjectRoleId", "multipleUserBehavior=alphabetical"],
        AdminRoleMember: info?.isCloud ? /"selectUserType":"roleMember","selectRole":$jiraAdminRoleId,"multipleUserBehavior":"alphabetical"/ : ["assignmentType=roleMember", "role=$jiraAdminRoleId", "multipleUserBehavior=alphabetical"],
]

def throwException = [
        no : ["throwIfNoMatch="],
        yes : ["throwIfNoMatch=yes"],
]

def assignmentBehavior = [
        force : [ "assignmentBehavior=force" ],
        automatic : [ "useValuesFromTransitionedIssue=","assignmentBehavior=onlyAutomatic" ],
        ifTransitionValueChanged : [ "useValuesFromTransitionedIssue", "assignmentBehavior=preferTransition" ],
        ifTransitionUserValueIsNotRoleMember : [ "useValuesFromTransitionedIssue","assignmentBehavior=ifRoleMember" ]
]

def skipIfAssigned = [
        no : [ "skipIfAlreadyAssigned=no" ],
        yes : [ "skipIfAlreadyAssigned=yes" ]
]

def multipleUser = [
        alphabetical : [ "multipleUserBehavior=alphabetical" ],
        roundRobin: [ "multipleUserBehavior=roundRobin" ],
        leastBusy : [ "multipleUserBehavior=leastBusy" ],
        random : [ "multipleUserBehavior=random" ],
        scripted : [ "multipleUserBehavior=scripted", "multipleUsersScript=$groovyExpression.returnsReporter" ]
]


def fieldValueMap = fields("GET", 'assignee')

def relatedIssue = [:]
def relatedIssuesMap = [:]

relatedIssuesList.each{
    relatedIssue.putAll(createRelatedIssuesMap('CONFIGURATION', it, projectName, " "))
    relatedIssuesMap.putAll(createRelatedIssuesMap('TRANSITION', it, projectName, " "))
}

selectUser.eachWithIndex { userType, userValues, userIndex ->
    relatedIssue.take(1).eachWithIndex { targetIssue, value, issueIndex ->
        def transition = "assign_current_issue_to_$userType"
        def server =  [userValues , "selectedLinkType=$value" , throwException.no , assignmentBehavior.force , skipIfAssigned.no , conditionalExecution.false]
        def cloud =  "{\"targetIssue\":\"$value\",\"runAsType\":\"currentUser\",\"assignmentBehavior\":\"force\",\"throwIfNoMatch\":false,$userValues}"
        addTransitionFunction(transition, 'postfunction', info?.isCloud? cloud : server, functionKey)
    }
}

relatedIssue.eachWithIndex { targetIssue, value, issueIndex ->
    def transition = "assignIssueToCurrentUserToCheckTargetIssues_" + issueIndex
    def server = ["assignmentType=currentUser", "selectedLinkType=$value", throwException.no, assignmentBehavior.force, skipIfAssigned.no, conditionalExecution.false]
    def cloud = "{\"targetIssue\":\"$value\",\"runAsType\":\"currentUser\",\"assignmentBehavior\":\"force\",\"throwIfNoMatch\":false,\"selectUserType\":\"currentUser\"}"
    addTransitionFunction(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssuesMap.eachWithIndex{ currentIssues, targetIssues, int i ->
    def transition = "assignIssueToCurrentUserToCheckTargetIssues_" + i
    gint.taskHelper.add([
            [action    : 'setFieldValue',
             sleep:  sleep,
             ext       : ":unassign the :targetIssue before transition issue with_" + transition,
             parameters: [
                     issue   : targetIssues,
                     field: "Assignee",
                     value: " "
             ]
            ],
            [action    : 'transitionIssue',
             sleep:  sleep,
             ext       : ":by_ $transition:",
             parameters: [
                     issue     : currentIssues,
                     transition: transition,
             ]
            ],
            [action    : 'getFieldValue',
             sleep:  sleep,
             ext       : ":Of assignee of targetIssue after transition issue by:$transition:",
             parameters: [
                     issue: targetIssues,
                     field: "Assignee"
             ],
             data      : [fieldValueMap.assignee],
            ],
    ])
}

[
        'CreateTransition'
].each {transition ->
    relatedIssue.take(1).eachWithIndex { targetIssue, value, issueIndex ->
        def server = ["assignmentType=currentUser", "selectedLinkType=$value", throwException.no, assignmentBehavior.force, skipIfAssigned.no, conditionalExecution.false]
        def cloud = "{\"targetIssue\":\"$value\",\"runAsType\":\"currentUser\",\"assignmentBehavior\":\"force\",\"throwIfNoMatch\":false,\"selectUserType\":\"currentUser\"}"
        if(isCloud){
            addTransitionFunctionOnCreateTransition(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
        }
    }
}

[
        'assign_currentIssue_issue_to_currentUser_if_condition_true'
].each {
    relatedIssue.take(1)eachWithIndex { targetIssue, value, issueIndex ->
        def server =  ["assignmentType=currentUser" , "selectedLinkType=$value" , throwException.no , assignmentBehavior.force , skipIfAssigned.no , conditionalExecution.true]
        def cloud = "{$conditionalExecution.true,\"targetIssue\":\"$value\",\"runAsType\":\"currentUser\",\"assignmentBehavior\":\"force\",\"throwIfNoMatch\":false,\"selectUserType\":\"currentUser\"}"
        addTransitionFunction(it + issueIndex, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    }
}

addComponent(projectName)

[inactiveAdmin, testAdmin].collect{
        gint.taskHelper.add(
                action: 'removeProjectRoleActors',
                ext: ":remove user $it from Administrator role to check_ASSIGN_ISSUE_PF: ",
                parameters: [
                        project: projectName,
                        role   : 'Administrators',
                        userId : it
                ]
        )
}

[testUser1,testUser].collect{
        gint.taskHelper.add(
                action: 'removeProjectRoleActors',
                ext: ": remove user $it from $testRole _to check ASSIGN_ISSUE_PF",
                parameters: [
                        project: projectName,
                        role   : testRole,
                        userId : it
                ]
        )
}

[testUser1,testUser].collect{
        gint.taskHelper.add(
                action: 'addProjectRoleActors',
                ext: ": add user $it to specific role $testRole _to check ASSIGN_ISSUE_PF",
                parameters: [
                        project: projectName,
                        role   : testRole,
                        userId : it
                ]
        )
}

relatedIssuesMap.eachWithIndex{ key, value, i ->
        gint.taskHelper.add(
                action: 'addComment',
                ext: " : to check ASSIGN_ISSUE_PF_user who last commented option: " + i,
                parameters: [
                        issue  : value,
                        comment: 'add comment to  check lastCommentedUserOption'
                ]
        )
}

selectUser.eachWithIndex { userType, userValues, userIndex ->
    def transition = "assign_current_issue_to_$userType"
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
            gint.taskHelper.add([
                    [action    : 'updateIssue',
                            sleep:  sleep,
                     ext       : ": unassign current issue_ASSIGN_ISSUE_PF :" + transition,
                     parameters: [
                             issue   : value,
                             assignee: " ",
                     ]
                    ],
                    [action    : 'transitionIssue',
                     sleep:  sleep,
                     ext       : ":by_ $transition:ASSIGN_ISSUE_PF_:",
                     parameters: [
                             issue     : key,
                             transition: transition,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     sleep:  sleep,
                     ext       : ":Of current issue_after transition issue by:$transition:ASSIGN_ISSUE_PF_:",
                     parameters: [
                             issue: value,
                             field: "Assignee"
                     ],
                     data      : [fieldValueMap.assignee],
                    ],
            ])
        }
}

[
        'assign_currentIssue_issue_to_currentUser_if_condition_true'
].each {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        def transition = it + i
            gint.taskHelper.add([
                    [action    : 'updateIssue',
                     sleep: sleep,
                     ext       : ": unassign current issue_ASSIGN_ISSUE_PF :" + transition,
                     parameters: [
                             issue   : value,
                             assignee: " ",
                     ]
                    ],
                    [action: 'setFieldValue',
                     sleep: sleep,
                    ext: ":Set priority of issue to Low_before transition_ $transition:",
                    parameters: [
                            issue: key,
                            field: "Priority",
                            value: 'Low'
                    ]
                    ],
                    [action    : 'transitionIssue',
                     sleep: sleep,
                     ext       : ":by_ $transition:ASSIGN_ISSUE_PF_:when condition false:",
                     parameters: [
                             issue     : key,
                             transition: transition,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     sleep: sleep,
                     ext       : ":Of current issue_after transition issue by:$transition:ASSIGN_ISSUE_PF_:when condition false:",
                     parameters: [
                             issue: value,
                             field: "Assignee"
                     ],
                     failData      : [fieldValueMap.assignee],
                    ],
                    [action: 'setFieldValue',
                     sleep: sleep,
                     ext: ":Set priority of issue to High_before transition_ $transition:",
                     parameters: [
                             issue: key,
                             field: "Priority",
                             value: 'High'
                     ]
                    ],
                    [action    : 'transitionIssue',
                     sleep: sleep,
                     ext       : ":by_ $transition:ASSIGN_ISSUE_PF_:when condition true:",
                     parameters: [
                             issue     : key,
                             transition: transition,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     sleep: sleep,
                     ext       : ":Of current issue_after transition issue by:$transition:ASSIGN_ISSUE_PF_:when condition true:",
                     parameters: [
                             issue: value,
                             field: "Assignee"
                     ],
                     data      : [fieldValueMap.assignee],
                    ],
            ])
        }
}
