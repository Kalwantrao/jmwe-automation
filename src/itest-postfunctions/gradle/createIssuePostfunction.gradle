buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory + '/src/common/utils.gradle'

tearDown()
addWorkflow()

def relatedIssue = info?.isCloud ? relatedIssueCloud : relatedIssueServer
def functionKey =	info ?.isCloud ?  functionKey.createIssuePostfunctionCloud : functionKey.createIssuePostfunctionServer

def testUser = info?.isCloud ? cloudUser : serverUser

def defaultFieldsServer = [
        "restrictToInternal=no",
        "sendNotification=no",
        "correlationId=",
]
def defaultFieldsCloud = [ "postFunction.id=18b36491-f556-48cd-b476-7b82f02c7249" ]

def setSpecificField = [
        defaultFields : ["fieldsToSet={\"summary\":{\"action\":\"template\",\"value\":\"CLONE - <%=issue.get('summary')%>\"}}"],
        setSummary : ["fieldsToSet={\"summary\":{\"action\":\"template\",\"value\":\"JMWE_Issue_Postfunction\"}}"],
]
def project = [
        current : [/projectKey= "$sameAsCurrentIssue$"/, "calculatedProjectKey="],
]
def issueType = [
        subtask : ["issuetype=$issueType.subtask", "calculatedIssueType="],
]
def parentIssue = [
        current: ["parentIssueType=currentIssue","calculatedParentIssue="]
]
def linkToNewIssue = [
        notSelected: ["selectedLinkType="],
]
def setFields = [
        onlySelected : ["fieldsToCopy=selected-fields-only"],
]
def addFields = [
        not : ["fieldsToCopy=selected-fields-only","createMissingValues=no"]
]

def postCreationScript = [
        no : ["runPostCreationScript=no","postCreationScript="],
        yes : ["runPostCreationScript=yes","postCreationScript=newIssue.setFieldValue('Priority','High')"],
]
def copySubtask = [
        no : ["copySubtasks=no"]
]
def commentType = [
        template : ["commentIssue=no", "commentType=template", "comment=template" ],
        expression : [ "commentIssue=no","commentType=expression", "comment=$groovyExpression.getDescription" ],
]
def commentVisibility = [
        notSelected : [ "restrictToGroup=", "restrictToProjectRole=" ],
        jiraAdminGroups : [ "restrictToGroup=$jiraAdminGrooup", "restrictToProjectRole=" ],
        jiraAdminRoles : [ "restrictToGroup=", "restrictToProjectRole=$jiraAdminRoleId" ],
        jiraSoftwareUsers : ["restrictToGroup=$testGroup", "restrictToProjectRole="]
]
def createMultipleIssues = [
        no : ["createMultiple=no","iterationScript="],
        two: ["createMultiple=yes","iterationScript=1..2"],
        three:["createMultiple=yes","iterationScript=1..3"]
]

['createIssue'].eachWithIndex { key, value, i ->
    def server = defaultFieldsServer +  + runAsUser.currentUser
    def cloud = defaultFieldsCloud
    addTransitionFunction( it, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'expression'
    def fields = commentIssuePfFields + commentType.expression + commentVisibility.notSelected+  "selectedLinkType=$value" + conditionalExecution.false + runAsUser.currentUser
    addTransitionFunction( transition + i, 'postfunction', fields, functionKey)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'addCommentIfConditionTrue'
    def fields = commentIssuePfFields + commentType.addCommentIfConditionTrue + commentVisibility.notSelected+  "selectedLinkType=$value" + conditionalExecution.true + runAsUser.currentUser
    addTransitionFunction( transition + i, 'postfunction', fields, functionKey)
}
relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'runAsSpecificUser'
    def fields = commentIssuePfFields + commentType.runAsSpecificUser + commentVisibility.notSelected +  "selectedLinkType=$value" + conditionalExecution.false + runAsUser.specificUser
    addTransitionFunction( transition + i, 'postfunction', fields, functionKey)
    moveTransitionFunction ( transition + i, 4)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'runAsUserInFieldAssignee'
    def fields = commentIssuePfFields + commentType.runAsUserInFieldAssignee + commentVisibility.notSelected +  "selectedLinkType=$value" + conditionalExecution.false + runAsUser.userInFieldAssignee
    addTransitionFunction( transition + i, 'postfunction', fields, functionKey)
    moveTransitionFunction ( transition + i, 4)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'runAsUserInFieldReporter'
    def fields = commentIssuePfFields + commentType.runAsUserInFieldReporter + commentVisibility.notSelected +  "selectedLinkType=$value" + conditionalExecution.false + runAsUser.userInFieldReporter
    addTransitionFunction( transition + i, 'postfunction', fields, functionKey)
    moveTransitionFunction ( transition + i, 4)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'runAsUserInFieldCreator'
    def fields = commentIssuePfFields + commentType.runAsUserInFieldCreator + commentVisibility.notSelected +  "selectedLinkType=$value" + conditionalExecution.false + runAsUser.userInFieldCreator
    addTransitionFunction( transition + i, 'postfunction', fields, functionKey)
    moveTransitionFunction ( transition + i, 4)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'runAsUserFromScript'
    def fields = commentIssuePfFields + commentType.runAsUserFromScript + commentVisibility.notSelected +  "selectedLinkType=$value" + conditionalExecution.false + runAsUser.userFromScript
    addTransitionFunction( transition + i, 'postfunction', fields, functionKey)
    moveTransitionFunction ( transition + i, 4)
}
relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'visibleToJiraAdminRoles'
    def fields = commentIssuePfFields + commentType.visibleToJiraAdminRoles + commentVisibility.jiraAdminRoles +  "selectedLinkType=$value" + conditionalExecution.false + runAsUser.currentUser
    addTransitionFunction( transition + i, 'postfunction', fields, functionKey)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'visibleToJiraSoftwareUsers'
    def fields = commentIssuePfFields + commentType.visibleToJiraSoftwareUsers + commentVisibility.jiraSoftwareUsers +  "selectedLinkType=$value" + conditionalExecution.false + runAsUser.currentUser
    addTransitionFunction( transition + i, 'postfunction', fields, functionKey)
}




createWorkflowScheme()
createProject()

// set issue status to In Progress

def current = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'current')
def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[]}], 'Sub-task')
def epic = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic')
def issueBelongsToEpic = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic[]} ], 'BelongsToEpic')
def initiative = createIssue([type: 'Initiative', summary: 'JMWE_Issue' ], 'Initiative')
def epic_initiative = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative')
def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def blocks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'blocks')
def isBlockedBy = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'isBlockedBy')
def clones = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'clones')
def isClonedBy = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'isClonedBy')
def duplicates = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'duplicates')
def isDuplicatedBy = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'isDuplicatedBy')
def relatesTo = createIssue([type: 'Task', summary: 'JMWE_Task'], 'relatesTo')

updateIssue([issue: {->epic_initiative[]}, field: "Parent Link", value: {->initiative[]}], "parent initiative child epic")

def linkIssuesMap = [

        blocks : {->blocks[]},
        'is blocked by' : {->isBlockedBy[]},
        clones : {->clones[]},
        'is cloned by' : {->isClonedBy[]},
        duplicates : {->duplicates[]},
        'is duplicated by' : {->isDuplicatedBy[]},
        'relates to': {->relatesTo[]}
]

linkIssuesMap.eachWithIndex { key, value, i ->
    linkIssue([issue: {->issueLinks[]}, toIssue: value, link: "$key"], key)
}


def relatedIssuesMap = [
        {->current[]} : {->current[]},
        {->parent[]} : {->subtask[]},
        {->subtask[]} : {->parent[]},
        {->epic[]} : {->issueBelongsToEpic[]},
        {->issueBelongsToEpic[]} : {->epic[]},
        {-> initiative[]} : {->epic_initiative[]},
        {->epic_initiative[]} : {-> initiative[]},
        {->issueLinks[]} : {->blocks[]},
        {->issueLinks[]} : {->blocks[]},
        {->issueLinks[]} : {->isBlockedBy[]},
        {->issueLinks[]} : {->clones[]},
        {->issueLinks[]} : {->isClonedBy[]},
        {->issueLinks[]} : {->duplicates[]},
        {->issueLinks[]} : {->isDuplicatedBy[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->issueLinks[]} : {->relatesTo[]},
]


relatedIssuesMap.eachWithIndex{ key, value, i ->
    gint.taskHelper.add(
            action: 'updateIssue' , ext: " : add description to add in comment : " + i,
            parameters: [
                    issue: value,
                    description : expressionComment
            ]
    )
}

[
        'template',
        'expression',
        'runAsUserInFieldReporter',
        'runAsUserInFieldCreator',
        'runAsUserFromScript',
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: it + ': add comment by template :' + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action: 'getComments', ext: " : add comment by template :" + it + i,
                 parameters: [
                         issue: value
                 ],
                 data:[   /$user added a comment on/,
                          /$it/
                 ],
                ]
        ])
    }
}

[
        'visibleToJiraSoftwareUsers',
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: it + ': ' + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action: 'getComments', ext: " : " + it + i,
                 parameters: [
                         issue: value
                 ],
                 failData:[ /$it/  ],
                ]
        ])
    }
}

[
        'visibleToJiraAdminRoles',
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: it + ': ' + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action: 'getComments', ext: " : " + it + i,
                 parameters: [
                         issue: value
                 ],
                 data:[ /$it/  ],
                ]
        ])
    }
}

['addCommentIfConditionTrue'].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: it + ': when conditional validation false do not add comment: ' + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action: 'getComments', ext: it +" : when conditional validation false do not add comment :" + i,
                 parameters: [
                         issue: value
                 ],
                 failData:[/$it/],
                ]
        ])
    }
}
relatedIssuesMap.eachWithIndex{ key, value, i ->
    gint.taskHelper.add(
            action: 'updateIssue' , ext: " : to check conditional validation and assignee field : " + i,
            parameters: [
                    issue: value,
                    priority : 'High',
                    assignee: testUser
            ]
    )
}
['addCommentIfConditionTrue'].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: it + ': when conditional validation true do add comment: ' + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action: 'getComments', ext: it +" : when conditional validation true do add comment :" + i,
                 parameters: [
                         issue: value
                 ],
                 data:[/$it/],
                ]
        ])
    }
}
[
        'runAsSpecificUser',
        'runAsUserInFieldAssignee'
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: it + ' :' + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action: 'getComments', ext: " : " + it + i,
                 parameters: [
                         issue: value
                 ],
                 data:[   /$testUser added a comment on/,
                          /$it/
                 ],
                ]
        ])
    }
}
*/

/*
import groovy.json.JsonSlurper
import java.nio.file.Paths

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/testPostfunctions.gradle'

def info = gint.getJiraHelper().getServerInfoWithVerify() // Verify access to Jira instance otherwise end test if server not available
def project = 'AUTOMATION'//gint.getJiraHelper().getProjectKey()	//get project key using jira helper functions
def transition = 'createIssuePostfunction'
def workflow = project
def screen = project
def user = info.user
def userId = 'jmwe_qa'
gint.xmlReport =	true	//xml report generates in projects root directory
gint.verbose =	true

def jsonSlurper = new JsonSlurper();
def path = Paths.get(gint.directories.resource + "/resources/postfunctionsData/CreateIssuePostfunction${info?.isCloud ? "Cloud" : ""}.json")
def transitionFunctions = jsonSlurper.parse(path)
def functionKey =	info ?.isCloud ? 'com.innovalog.jmwe.jira-misc-workflow-extensions:link-issues-function' : 'com.innovalog.jmwe.jira-misc-workflow-extensions:CreateIssue-function'
def startStep = info?.isCloud ? '1':'11' // depends on workflow. '1' for cloud and '11' (To Do)for server works for custom jira workflow

// Create transitions and add transition function for multiple scenarios using json data file from resources
createTransitionsWithFunctions(transitionFunctions, transition, functionKey, 'postfunction', startStep, workflow, screen, 0)

createVersions(project, 5)
createComponents(project, 'component', 5)
addUsers(userId)

// TC_01-check issue creates with fields provided
def issue1 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'createIssue1')
transitionIssue(transition+0, {-> issue1[0]}, 0, 'TC_01-check issue creates with fields provided', null, null)
checkIssueList('summary~JMWE_Issue_Postfunction','JMWE_Issue_Postfunction', '1', 'Sub-task', 'TC_01-check issue creates with current fields provided')

// TC_02-check issue creates with copy current issue fields
def issue2 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue_Subtask']}, 'createIssue2')
transitionIssue(transition+1, {-> issue2[0]}, 0, 'TC_02-check issue creates with copy current issue fields', null, null)
checkIssueList('summary~JMWE_Issue_Subtask','JMWE_Issue_Subtask', '2','Sub-task', 'TC_02-check issue creates with copy current issue fields')

// TC_03-check issue created with specific issuetype
//def issue3 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'createIssue3')
transitionIssue(transition+2, {-> issue1[0]}, 0, 'TC_03-check issue creates with specific issuetype', null, null)
checkIssueList('summary~JMWE_Issue_Story','JMWE_Issue_Story', '1', 'Story', 'TC_03-check issue creates with specific issuetype')

// TC_04-check issue creates in project return from script
def issue4 = createIssue(project,{[ type: 'Bug', summary: 'Summary_Project_fromScript']}, 'createIssue4')
transitionIssue(transition+3, {-> issue4[0]}, 0, 'TC_04-check issue creates in project return from script', null, null)
checkIssueList('summary~summary_project_script','AUTOMATION', '1', 'Sub-task', 'TC_04-check issue creates in project return from script')

// TC_05-check issue creates in project selected from projects dropdown and copy summary of current issue
def issue5 = createIssue(project,{[ type: 'Bug', summary: 'summary_copyToNewIssue_task']}, 'createIssue5')
transitionIssue(transition+4, {-> issue5[0]}, 0, 'TC_05-check issue creates in project selected from projects dropdown copy summary from current issue', null, null)
checkIssueList('summary~summary_copyToNewIssue_task','AUTOMATION', '2', 'Task', 'TC_05-check issue creates in project AUTOMATION, selected from projects dropdown and copy summary of current issue')

// TC_06-check issue creates in project selected from projects dropdown and set summary from groovy template
//def issue6 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'createIssue6')
transitionIssue(transition+5, {-> issue1[0]}, 0, 'TC_06-check issue creates in project selected from projects dropdown copy summary from current issue', null, null)
checkIssueList("summary~Summary_template_story",'AUTOMATION', '1', 'Story', 'TC_06-check issue creates in project AUTOMATION, selected from projects dropdown and set summary from groovy template')

// TC_07-Creates issue with calculated issuetypes
//def issue7 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'createIssue7')
transitionIssue(transition+6, {-> issue1[0]}, 0, 'TC_07-Creates issue with calculated issuetypes ', null, null)
checkIssueList("summary~summary_calculated_issuetype_bug",'AUTOMATION', '1', 'Bug', 'TC_07-Creates issue with calculated issuetypes_bug')

// TC_08-Creates issue with calculated issuetypes
//def issue8 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'createIssue8')
transitionIssue(transition+7, {-> issue1[0]}, 0, 'TC_08-Creates issue with calculated issuetypes ', null, null)
checkIssueList("summary~summary_calculated_issuetype_task",'AUTOMATION', '1', 'Task', 'TC_08-Creates issue with calculated issuetypes_task')

// TC_09-Creates issue with calculated issuetypes
//def issue9 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'createIssue9')
transitionIssue(transition+8, {-> issue1[0]}, 0, 'TC_09-Creates issue with calculated issuetypes_Story ', null, null)
checkIssueList("summary~summary_calculated_issuetype_story",'AUTOMATION', '1', 'Story', 'TC_09-Creates issue with calculated issuetypes_story')

// TC_10-Creates issue with calculated issuetypes
//def issue9 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'createIssue9')
transitionIssue(transition+9, {-> issue1[0]}, 0, 'TC_10-Creates issue with calculated issuetype_subtask ', null, null)
checkIssueList("summary~summary_calculated_issuetype_story",'AUTOMATION', '1', 'Sub-task', 'TC_10-Creates issue with calculated issuetypes_subtask')

// TC_11-check issues link to current issue through links
def blocks = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'blocks')
transitionIssue(transition+10, {-> blocks[0]}, 0, 'linkIssueByBlocksLink', null, null)
getLinkedIssueList({-> blocks[0]}, '1', 'linkIssuesOfBlocksType', "Blocks", "blocks")

def isBlockedBy = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'isBlockedBy')
transitionIssue(transition+11, {-> isBlockedBy[0]}, 0, 'linkIssuesByIsBlockedByLink', null, null)
getLinkedIssueList({-> isBlockedBy[0]}, '1', 'linkIssuesOfIsBlockByType', "Blocks", "is blocked by")

def clones = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'clones')
transitionIssue(transition+12, {-> clones[0]}, 0, 'linkIssuesByClonesLink', null, null)
getLinkedIssueList({-> clones[0]}, '1', 'linkIssuesOfClonesType', "Cloners", "clones")

def isClonedBy = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'isClonedBy')
transitionIssue(transition+13, {-> isClonedBy[0]}, 0, 'linkIssueOfIsClonedByLink', null, null)
getLinkedIssueList({-> isClonedBy[0]}, '1', 'linkIssuesOfIsClonedByType', "Cloners", "is cloned by")

def duplicates = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'duplicates')
transitionIssue(transition+14, {-> duplicates[0]}, 0, 'linkIssueOfDuplicatesLink', null, null)
getLinkedIssueList({-> duplicates[0]}, '1', 'linkIssueOfDuplicatesLink', "Duplicate", "duplicates")

def isDuplicateBy = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'isDuplicateBy')
transitionIssue(transition+15, {-> isDuplicateBy[0]}, 0, 'linkIssueOfIsDuplicatesLink', null, null)
getLinkedIssueList({-> isDuplicateBy[0]}, '1', 'linkIssueOfIsDuplicatesLink', "Duplicate", "is duplicated by")

def causes = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'causes')
transitionIssue(transition+16, {-> causes[0]}, 0, 'linkIssueOfCausesLink', null, null)
getLinkedIssueList({-> causes[0]}, '1', 'linkIssueOfCausesLink', "Problem/Incident", "causes")

def isCausedBy = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'isCausedBy')
transitionIssue(transition+17, {-> isCausedBy[0]}, 0, 'linkIssueOfIsCausedByLink', null, null)
getLinkedIssueList({-> isCausedBy[0]}, '1', 'linkIssueOfisCausedByLink', "Problem/Incident", "is caused by")

def relates = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'relatesTo')
transitionIssue(transition+18, {-> relates[0]}, 0, 'linkIssueOfrelatesToLink', null, null)
getLinkedIssueList({-> relates[0]}, '1', 'linkIssueOfrelatesToLink', "Relates", "relates to")

// TC_12-Copy only selected fields
// Case1: Copy from the current issue
def issue6 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue', labels: 'label_copy_to_newIssue']}, 'createIssue6')
transitionIssue(transition+19, {-> issue6[0]}, 0, 'copySelectedFieldsFromCurrentIssue', null, null)
checkIssueList("summary~label_copy_to_newIssue",'Labels', '1', 'label_copy_to_newIssue', 'TC_12-Case1: Copy from the current issue')

// Case2: testLabel_set_groovyTemplate
transitionIssue(transition+20, {-> issue6[0]}, 0, 'testLabel_set_groovyTemplate', null, null)
checkIssueList("summary~testLabel_set_groovyTemplate",'Labels', '1', 'testLabel_set_groovyTemplate', 'TC_12-Case2: testLabel_set_groovyTemplate')

// Case3: testLabel_set_groovyExpression
transitionIssue(transition+21, {-> issue6[0]}, 0, 'testLabel_set_groovyExpression', null, null)
checkIssueList("summary~testLabel_set_groovyExpression",'Labels', '1', 'testLabel_set_groovyExpression', 'TC_12-Case3: testLabel_set_groovyExpression')



