buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory + '/src/common/utils.gradle'

def functionKey =	info ?.isCloud ?  'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__CreateIssueFunction' : 'com.innovalog.jmwe.jira-misc-workflow-extensions:CreateIssue-function'

String testSummary = "copySummaryOfCurrentIssue"
String customSummary = "customSummary"
String testLabel = "addLabelToNewIssue"
String description = "description"

def sameAsCurrentIssue = '$sameAsCurrentIssue$'
def currentIssue = '$currentIssue$'

def createSubtask = [
        subtask : ["issuetype=$SubtaskIssueTypeServer", "calculatedIssueType="],
]

def parentIssue = [
        current: ["parentIssueType=currentIssue","calculatedParentIssue="]
]

def setFields = [
        onlySelected : ["fieldsToCopy=selected-fields-only"],
]

def addFields = [
        not : ["fieldsToCopy=selected-fields-only","createMissingValues=no"]
]

def postCreationScript = [
        no : ["runPostCreationScript=no","postCreationScript="],
        yes : ["runPostCreationScript=yes","postCreationScript=newIssue.setFieldValue('Priority','High')"],
]

def copySubtask = [
        no : ["copySubtasks=no"]
]

def commentTypeServer = [
        template : ["commentIssue=yes", "commentType=template", "comment=template" ],
        description : [ "commentIssue=yes","commentType=expression", "comment=$groovyExpression.getDescription" ],
]

def commentTypeCloud = [
        template : ["postFunction.config-1cbe04f4-b379-4913-a819-87795214407d={\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$createSubtask.subtask\",\"selectedLinkType\":\"\",\"parentIssue\":\"$currentIssue\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"comment\":\"template\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",\"commentAs\":\"\",\"commentAsType\":\"currentUser\",\"navigateToNewIssue\":false}"]
]

def commentType = info?.isCloud ? commentTypeCloud : commentTypeServer

def commentVisibility = [
        notSelected : [ "restrictToGroup=", "restrictToProjectRole=" ],
        jiraAdminGroups : [ "restrictToGroup=$jiraAdminGrooup", "restrictToProjectRole=" ],
        jiraAdminRoles : [ "restrictToGroup=", "restrictToProjectRole=$jiraAdminRoleId" ],
        jiraSoftwareUsers : ["restrictToGroup=$testGroup", "restrictToProjectRole="]
]

def createMultipleIssues = [
        no : ["createMultiple=no","iterationScript="],
        two: ["createMultiple=yes","iterationScript=1..2"],
        three: ["createMultiple=yes","iterationScript=1..3"]
]


def createIssueTypeServer = [
        Story : ["issuetype=$StoryIssueTypeServer", "calculatedIssueType="],
        Bug : ["issuetype=$BugIssueTypeServer", "calculatedIssueType="],
        Initiative : ["issuetype=$InitiativeIssueTypeServer", "calculatedIssueType="],
]
def createIssueTypeCloud = [
        Story :"postFunction.config-1cbe04f4-b379-4913-a819-87795214407d={\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$StoryIssueTypeCloud\",\"selectedLinkType\":\"\",\"parentIssue\":\"$currentIssue\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}",
        Bug : "postFunction.config-1cbe04f4-b379-4913-a819-87795214407d={\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$BugIssueTypeCloud\",\"selectedLinkType\":\"\",\"parentIssue\":\"$currentIssue\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}",
        Initiative : "postFunction.config-1cbe04f4-b379-4913-a819-87795214407d={\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$InitiativeIssueTypeCloud\",\"selectedLinkType\":\"\",\"parentIssue\":\"$currentIssue\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}",
]
def linkToNewIssueServer = [
        Blocks: ["selectedLinkType=$linkByBlock"],
        Cloners: ["selectedLinkType=$linkByClones"],
        Duplicate: ["selectedLinkType=$linkByDuplicates"],
        Relates: ["selectedLinkType=$linkByRelatesTo"],
]
def linkToNewIssueCloud = [
        Blocks: "postFunction.config-1cbe04f4-b379-4913-a819-87795214407d={\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$StoryIssueTypeCloud\",\"selectedLinkType\":\"$relatedIssueCloud.linkByBlock\",\"parentIssue\":\"$currentIssue\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}",
        Cloners: "postFunction.config-1cbe04f4-b379-4913-a819-87795214407d={\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$StoryIssueTypeCloud\",\"selectedLinkType\":\"$relatedIssueCloud.linkByClones\",\"parentIssue\":\"$currentIssue\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}",
        Duplicate: "postFunction.config-1cbe04f4-b379-4913-a819-87795214407d={\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$StoryIssueTypeCloud\",\"selectedLinkType\":\"$relatedIssueCloud.linkByDuplicates\",\"parentIssue\":\"$currentIssue\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}",
        Relates: "postFunction.config-1cbe04f4-b379-4913-a819-87795214407d={\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$StoryIssueTypeCloud\",\"selectedLinkType\":\"$relatedIssueCloud.linkByRelatesTo\",\"parentIssue\":\"$currentIssue\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}",
]

def createIssueType = info?.isCloud ? createIssueTypeCloud : createIssueTypeServer
def linkToNewIssue = info?.isCloud ? linkToNewIssueCloud : linkToNewIssueServer

def defaultFieldsCloud= [
        "postFunction.id=18b36491-f556-48cd-b476-7b82f02c7249"
]

def setSpecificFieldServer = [
        setDefault : ["fieldsToSet={\"summary\":{\"action\":\"template\",\"value\":\"CLONE - <%=issue.get('summary')%>\"}}"],
        setSummary : ["fieldsToSet={\"summary\":{\"action\":\"template\",\"value\":\"$customSummary\"}}"],
        copyLabelsFromCurrentIssue: ["fieldsToSet={\"summary\":{\"action\":\"template\",\"value\":\"CLONE - <%=issue.get('summary')%>\"},\"labels\":{\"action\":\"copy\"}}"],
        setLabelsByTemplate: ["fieldsToSet={\"summary\":{\"action\":\"template\",\"value\":\"CLONE - <%=issue.get('summary')%>\"},\"labels\":{\"action\":\"template\",\"value\":\"$testLabel\"}}"],
        setLabelsFromDescription: ["fieldsToSet={\"summary\":{\"action\":\"template\",\"value\":\"CLONE - <%=issue.get('summary')%>\"},\"labels\":{\"action\":\"script\",\"value\":\"issue.get('description')\"}}"],
]

def setSpecificFieldCloud = [
        setDefault : "postFunction.config-1cbe04f4-b379-4913-a819-87795214407d={\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$SubtaskIssueTypeCloud\",\"selectedLinkType\":\"\",\"parentIssue\":\"$currentIssue\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}",
        setSummary : "postFunction.config-1cbe04f4-b379-4913-a819-87795214407d={\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$SubtaskIssueTypeCloud\",\"selectedLinkType\":\"\",\"parentIssue\":\"$currentIssue\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}",
        copyLabelsFromCurrentIssue: ["fieldsToSet={\"summary\":{\"action\":\"template\",\"value\":\"CLONE - <%=issue.get('summary')%>\"},\"labels\":{\"action\":\"copy\"}}"],
        setLabelsByTemplate: ["fieldsToSet={\"summary\":{\"action\":\"template\",\"value\":\"CLONE - <%=issue.get('summary')%>\"},\"labels\":{\"action\":\"template\",\"value\":\"$testLabel\"}}"],
        setLabelsFromDescription: ["fieldsToSet={\"summary\":{\"action\":\"template\",\"value\":\"CLONE - <%=issue.get('summary')%>\"},\"labels\":{\"action\":\"script\",\"value\":\"issue.get('description')\"}}"],
]

def setSpecificField = info?.isCloud ? setSpecificFieldCloud : setSpecificFieldServer

[
        'createIssueOfTypeSubtask'
].each {
    def server = defaultFieldsServer + setSpecificField.setDefault+ createSubtask.subtask + parentIssue.current  + conditionalExecution.false + runAsUser.currentUser
    def cloud = defaultFieldsCloud + "postFunction.config-1cbe04f4-b379-4913-a819-87795214407d={\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$SubtaskIssueTypeCloud\",\"selectedLinkType\":\"\",\"parentIssue\":\"$currentIssue\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

createIssueType.eachWithIndex { issueTypes, value, i ->
    def transition = 'createIssueOfType'
    def server = defaultFieldsServer + setSpecificField.setDefault+ value + parentIssue.current  + runAsUser.currentUser
    def cloud = defaultFieldsCloud +  value
    addTransitionFunction( transition + issueTypes, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

['createIssueIfConditionTrue'].each {
    def server = defaultFieldsServer + setSpecificField.setDefault+ createSubtask.subtask + parentIssue.current  + conditionalExecution.true + runAsUser.currentUser
    def cloud = defaultFieldsCloud + "postFunction.config-1cbe04f4-b379-4913-a819-87795214407d={\"conditionalExecution\":true,\"conditionalExecutionScript\":\"$nunjuckExpression.checkPriorityHigh\",\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$SubtaskIssueTypeCloud\",\"selectedLinkType\":\"\",\"parentIssue\":\"$currentIssue\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

[
        'setCustomSummary'
].each {
    def server = defaultFieldsServer + setSpecificField.setSummary + createSubtask.subtask + parentIssue.current  + runAsUser.currentUser
    def cloud = defaultFieldsCloud + "postFunction.config-1cbe04f4-b379-4913-a819-87795214407d={\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$SubtaskIssueTypeCloud\",\"selectedLinkType\":\"\",\"parentIssue\":\"$currentIssue\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"customSummary\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}    "
    addTransitionFunction( it, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

linkToNewIssue.eachWithIndex { linkType, value, i ->
        def transition = 'createAndLinkIssueBy'
        def server = defaultFieldsServer + value + setSpecificField.setDefault+ createIssueType.Story + parentIssue.current  + conditionalExecution.false + runAsUser.currentUser
        def cloud = defaultFieldsCloud +  value
        addTransitionFunction( transition + linkType, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

commentType.eachWithIndex{ type, value, i->
    def server = defaultFieldsServer + value + setSpecificField.setDefault + createSubtask.subtask + parentIssue.current  + conditionalExecution.false + runAsUser.currentUser
    def cloud = defaultFieldsCloud + value
    addTransitionFunction( type, 'postfunction', info?.isCloud ? cloud : server, functionKey )
}

createWorkflowScheme()
createProject()

// set issue status to In Progress

def defaultIssue = createIssue([type: 'Task', summary: testSummary, description: description], 'defaultIssue')

linkToNewIssue.eachWithIndex { linkType, value, i ->
    def issue = {-> defaultIssue[]}
    gint.taskHelper.add([
            [action    : 'transitionIssue', 
             ext: ': create issue created by postfunction of type  :' + linkType,
             sleep: info?.isCloud ? 5000 : 0,
             parameters: [
                     issue     : { ->defaultIssue[] },
                     transition: 'createAndLinkIssueBy' + linkType,
             ],
            ],
            [action: 'getIssueList',
             sleep: info?.isCloud ? 5000 : 0,
             ext: " : check issue created by postfunction of type :" + linkType,
             parameters: [
                     project: projectName,
                     jql: "project = $projectName AND summary ~ $testSummary AND type = Story",
                     outputType: "Text",
                     columns:"Type,Summary"
             ],
             data:[  "Story" ,
                     /$testSummary/  ],
            ],
            [action: 'getLinkList',
             sleep: info?.isCloud ? 5000 : 0,
             ext: ": check new issue linked by : $linkType ",
                parameters: [
                        issue: {-> defaultIssue[]},
                        outputType: "Text",
                        columns: "Issue,'Type Name'"
                ],
                    data: ["$issue","$linkType"],
            ],
            [action: 'runFromIssueList',
             sleep: info?.isCloud ? 5000 : 0,
             ext: " : delete issue created by post function to check next option: " + linkType,
             parameters:[
                     jql: "project = $projectName AND summary ~ $testSummary AND type = Story",
                     common: [ "--action deleteIssue --issue @issue@ --continue"
                     ]
             ]
            ]
    ])
}

['createIssueIfConditionTrue'].each {
        gint.taskHelper.add([
                [action    : 'transitionIssue', 
                 ext: ': create issue of type subtask :' + it,
                 sleep: info?.isCloud ? 5000 : 0,
                 parameters: [
                         issue     : { ->defaultIssue[] },
                         transition: it,
                 ],
                ],
                [action: 'getIssueList', 
                 ext: " : when condition returns false :" + it,
                 sleep: info?.isCloud ? 5000 : 0,
                 parameters: [
                         project: projectName,
                         jql: "project = $projectName AND summary ~ $testSummary AND type = Sub-task",
                         outputType: "Text",
                         columns:"Type,Summary"
                 ],
                 failData:[  "Sub-task" ,
                         /$testSummary/  ],
                ],
        ])
}

gint.taskHelper.add(
        action: 'updateIssue', 
        ext: ": set issue priority high to check conditional execution true",
        sleep: info?.isCloud ? 5000 : 0,
        parameters: [
                issue: {-> defaultIssue[]},
                priority: 'High'
                ]
)
createIssueType.eachWithIndex{ issueTypes,value,i->
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             ext: ': create issue created by postfunction of type  :' + issueTypes,
             sleep: info?.isCloud ? 5000 : 0,
             parameters: [
                     issue     : { ->defaultIssue[] },
                     transition: 'createIssueOfType' + issueTypes,
             ],
            ],
            [action: 'getIssueList',
             ext: " : check issue created by postfunction of type :" + issueTypes,
             sleep: info?.isCloud ? 5000 : 0,
             parameters: [
                     project: projectName,
                     jql: "project = $projectName AND summary ~ $testSummary AND type = $issueTypes",
                     outputType: "Text",
                     columns:"Type,Summary"
             ],
             data:[  "$issueTypes" ,
                     /$testSummary/  ],
            ],
            [action: 'runFromIssueList',
             sleep: info?.isCloud ? 5000 : 0,
             ext: " : delete issue created by post function to check next option: " + issueTypes,
             parameters:[
                     jql: "project = $projectName AND summary ~ $testSummary AND type = $issueTypes",
                     common: [ "--action deleteIssue --issue @issue@ --continue"
                     ]
             ]
            ]
    ])
}

[
        'createIssueOfTypeSubtask',
].each {
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 ext: ': create issue of type subtask when :' + it,
                 sleep: info?.isCloud ? 5000 : 0,
                 parameters: [
                         issue     : { ->defaultIssue[] },
                         transition: it,
                 ],
                ],
                [action: 'getIssueList',
                 ext: " : check new issue:" + it,
                 sleep: info?.isCloud ? 5000 : 0,
                 parameters: [
                         project: projectName,
                         jql: "project = $projectName AND summary ~ $testSummary AND type = Sub-task",
                         outputType: "Text",
                         columns:"Type,Summary"
                 ],
                 data:[  "Sub-task" ,
                         /$testSummary/  ],
                ],
                [action: 'runFromIssueList',
                 sleep: info?.isCloud ? 5000 : 0,
                 ext: " : delete issue created by post function to check next option: " + it,
                        parameters:[
                                jql: "project = $projectName AND summary ~ $testSummary AND type = Sub-task",
                                common: [ "--action deleteIssue --issue @issue@ --continue"
                                ]
                        ]
                ]
        ])
}

['setCustomSummary'].each {
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             ext: ': create issue of type subtask with :' + it,
             sleep: info?.isCloud ? 5000 : 0,
             parameters: [
                     issue     : { -> defaultIssue[] },
                     transition: it,
             ],
            ],
            [action    : 'getIssueList',
             ext: " : create issue of type subtask with:" + it,
             sleep: info?.isCloud ? 5000 : 0,
             parameters: [
                     project   : projectName,
                     jql       : "project = $projectName AND summary ~ $customSummary AND type = Sub-task",
                     outputType: "Text",
                     columns   : "Type,Summary"
             ],
             data      : ["Sub-task",
                          /$customSummary/],
            ],
            [action    : 'runFromIssueList',
             sleep: info?.isCloud ? 5000 : 0,
             ext: " : delete issue created by post function to check next option: " + it,
             parameters: [
                     jql   : "project = $projectName AND summary ~ $customSummary AND type = Sub-task",
                     common: ["--action deleteIssue --issue @issue@ --continue"
                     ]
             ]
            ]
    ])
}

commentType.eachWithIndex{ transitions, value, i ->
    gint.taskHelper.add([
            [action: 'transitionIssue',
             sleep: info?.isCloud ? 5000 : 0,
             ext: ': create issue of type subtask and add this comment: ' + transitions,
            parameters: [
                    issue: {->defaultIssue[]},
                    transition: transitions,
                    ]
            ],
            [action    : 'getIssueList',
             sleep: info?.isCloud ? 5000 : 0,
             ext: " : create issue of type subtask with:" + transitions,
             parameters: [
                     project   : projectName,
                     jql       : "project = $projectName AND summary ~ $testSummary AND type = Sub-task",
                     outputType: "Text",
                     columns   : "Type,Summary"
             ],
             data      : ["Sub-task",
                          /$testSummary/],
            ],
            [action: 'getComments',
             sleep: info?.isCloud ? 5000 : 0,
             ext: " : add comment by :" + transitions + i,
             parameters: [
                     issue: { ->defaultIssue[] }
             ],
             data:[   /$user added a comment on/,
                      /$transitions/
             ],
            ],
            [action    : 'runFromIssueList',
             sleep: info?.isCloud ? 5000 : 0,
             ext: " : delete issue created by post function to check next option: " + transitions,
             parameters: [
                     jql   : "project = $projectName AND summary ~ $testSummary AND type = Sub-task",
                     common: ["--action deleteIssue --issue @issue@ --continue" ],
                     ],
             ]
    ]
    )
}
