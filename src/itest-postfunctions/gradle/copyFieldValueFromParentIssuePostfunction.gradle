buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/utils.gradle'

def functionKey = info?.isCloud? 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__CopyFieldValueFromParentFunction' : 'com.innovalog.jmwe.jira-misc-workflow-extensions:CopyFieldValueFromParent-function'

def sourceField = [
        labels : [ "field=labels" ],
        components : [ "field=components" ]
]

def destField = [
        sameAsSource : [ "destField=" ],
        labels : [ "destField=labels" ],
        components : [ "destField=components" ]
]

def options = [
        noOption : ["copyOnlyIfNotSet=no","ignoreEmptyValue=no","createMissingValues=no","appendValues=no"],
        copyOnlyIfNotSet : "copyOnlyIfNotSet=yes",
        ignoreEmptyValue : "ignoreEmptyValue=yes",
        createMissingValues : "createMissingValues=yes",
        appendValues : "appendValues=yes"
]

def defaultFieldsCloud = [
        "postFunction.id=18b36491-f556-48cd-b476-7b82f02c7249",
]

['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent'].each {
    def server = defaultFieldsServer + sourceField.labels + destField.sameAsSource +  options.noOption + conditionalExecution.false
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"fieldId\":\"labels\",\"destFieldId\":\"\",\"copyOnlyIfNotSet\":false,\"createMissingValues\":false,\"sendNotifications\":true,\"appendValues\":false,\"ignoreEmptyValue\":false,\"runAsType\":\"addonUser\"}"
    addTransitionFunction(it, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}
['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent_copyOnlyIfNotSet'].each {
    def server = defaultFieldsServer + sourceField.labels + destField.sameAsSource +  options.copyOnlyIfNotSet + conditionalExecution.false
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"fieldId\":\"labels\",\"destFieldId\":\"\",\"copyOnlyIfNotSet\":true,\"createMissingValues\":false,\"sendNotifications\":true,\"appendValues\":false,\"ignoreEmptyValue\":false,\"runAsType\":\"addonUser\"}"
    addTransitionFunction(it, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}
['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent_ignoreEmptyValue'].each {
    def server = defaultFieldsServer + sourceField.labels + destField.sameAsSource+  options.ignoreEmptyValue + conditionalExecution.false
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"fieldId\":\"labels\",\"destFieldId\":\"\",\"copyOnlyIfNotSet\":false,\"createMissingValues\":false,\"sendNotifications\":true,\"appendValues\":false,\"ignoreEmptyValue\":true,\"runAsType\":\"addonUser\"}"
    addTransitionFunction(it, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent_createMissingValues'].each {
    def server = defaultFieldsServer + sourceField.labels + destField.components +  options.createMissingValues + conditionalExecution.false
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"fieldId\":\"labels\",\"destFieldId\":\"\",\"copyOnlyIfNotSet\":false,\"createMissingValues\":true,\"sendNotifications\":true,\"appendValues\":false,\"ignoreEmptyValue\":false,\"runAsType\":\"addonUser\"}"
    addTransitionFunction(it, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent_appendValues'].each {
    def server = defaultFieldsServer + sourceField.labels + destField.sameAsSource +  options.appendValues + conditionalExecution.false
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"fieldId\":\"labels\",\"destFieldId\":\"\",\"copyOnlyIfNotSet\":false,\"createMissingValues\":false,\"sendNotifications\":true,\"appendValues\":true,\"ignoreEmptyValue\":false,\"runAsType\":\"addonUser\"}"
    addTransitionFunction(it, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent_ifConditionTrue'].each {
    def server = defaultFieldsServer + sourceField.labels + destField.sameAsSource +  options.noOption + conditionalExecution.true
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":true,\"conditionalExecutionScript\":\"$nunjuckExpression.checkPriorityHigh\",\"fieldId\":\"labels\",\"destFieldId\":\"\",\"copyOnlyIfNotSet\":false,\"createMissingValues\":false,\"sendNotifications\":true,\"appendValues\":false,\"ignoreEmptyValue\":false,\"runAsType\":\"addonUser\"}"
    addTransitionFunction(it, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

createWorkflowScheme()
createProject()

(1..2).each {
    gint.taskHelper.addSetUp([
            [action: 'addVersion', ext: ': create versions : ' + it,
             parameters: [
                     project: projectName,
                     version: it
             ]
            ],
            [action: 'addComponent', ext: ': create Component : ' + it,
             parameters: [
                     project: projectName,
                     component: 'component' + it
             ],
            ]
    ])
}
// set issue status to In Progress

def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[]}], 'Sub-task')

def testLabel1 = "testLabel1"
def testLabel2 = "testLabel2"
def createMissingValue = "createMissingValueOfComponent"

gint.taskHelper.add(
        action: 'setFieldValue', ext: ': set labels to issue to check COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF option  : ',
        parameters: [
                issue: { ->parent[] },
                field: "Labels",
                value: testLabel1
        ]
)

gint.taskHelper.add(
        action: 'setFieldValue', ext: ': set labels to some value of subtask to check COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF option  : ',
        parameters: [
                issue: { ->subtask[] },
                field: "Labels",
                value: testLabel2
        ]
)

['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent_copyOnlyIfNotSet'].collect {
    gint.taskHelper.add([
            [action    : 'transitionIssue', ext: ': check COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF_copyOnlyIfNotSet when field is not empty :' + it,
             sleepAfter: 3000,
             parameters: [
                     issue     : { ->subtask[] },
                     transition: it ,
             ]
            ],
            [action    : 'getFieldValue',
             ext       : ":TC_01: The values of field Labels will be copied from the issues parent unless the field already has a value when field is not empty :" + it,
             parameters: [
                     issue: { ->subtask[] },
                     field: "Labels"
             ],
             failData      : [/Labels  . . . . . . . . . . . : $testLabel1/],
             data      : [/Labels  . . . . . . . . . . . : $testLabel2/],
            ],
    ])
}

gint.taskHelper.add(
        action: 'setFieldValue', ext: ': set labels empty of subtask to check COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF option  : ',
        parameters: [
                issue: { ->subtask[] },
                field: "Labels",
                value: " "
        ]
)

['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent_copyOnlyIfNotSet'].collect {
    gint.taskHelper.add([
            [action    : 'transitionIssue', ext: ': check COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF_copyOnlyIfNotSet when field is empty :' + it,
             sleepAfter: 3000,
             parameters: [
                     issue     : { ->subtask[] },
                     transition: it ,
             ]
            ],
            [action    : 'getFieldValue',
             ext       : ":TC_02: The values of field Labels will be copied from the issue's parent unless the field already has a value when field is empty :" + it,
             parameters: [
                     issue: { ->subtask[] },
                     field: "Labels"
             ],
             data      : [/Labels  . . . . . . . . . . . : $testLabel1/],
             failData      : [/Labels  . . . . . . . . . . . : $testLabel2/],
            ],
    ])
}

gint.taskHelper.add(
        action: 'setFieldValue', ext: ': set labels empty of subtask to check next option of COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF option  : ',
        parameters: [
                issue: { ->subtask[] },
                field: "Labels",
                value: " "
        ]
)

['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent'].collect {
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ': To CHECK_ COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF :' + it,
                 sleepAfter: 3000,
                 parameters: [
                         issue     : { ->subtask[] },
                         transition: it,
                 ]
                ],
                [action    : 'getFieldValue',
                 ext       : ":TC_03: The values of field Labels will be copied from the issues parent_replacing existing values: "  + it,
                 parameters: [
                         issue: { ->subtask[] },
                         field: "Labels"
                 ],
                 data      : [/Labels  . . . . . . . . . . . : $testLabel1/],
                ],
        ])
}

gint.taskHelper.add(
        action: 'setFieldValue', ext: ': set labels empty of parent issue to check ignoreEmptyValue_option of COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF option  : ',
        parameters: [
                issue: { ->parent[] },
                field: "Labels",
                value: " "
        ]
)

['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent_ignoreEmptyValue'].each {
    gint.taskHelper.add([
            [action    : 'transitionIssue', ext: ': To CHECK_ COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF_ignoring empty values :' + it,
             sleepAfter: 3000,
             parameters: [
                     issue     : { ->subtask[] },
                     transition: it,
             ]
            ],
            [action    : 'getFieldValue',
             ext       : ":TC_04: The values of field Labels will be copied from the issues parent_when parent issue has empty value_ignoring empty values :"  + it,
             parameters: [
                     issue: { ->subtask[] },
                     field: "Labels"
             ],
             data      : [/Labels  . . . . . . . . . . . : $testLabel1/],
            ],
    ])
}

['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent'].collect {
    gint.taskHelper.add([
            [action    : 'transitionIssue', ext: ': To CHECK_ COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF_when not ignoring empty values :' + it,
             sleepAfter: 3000,
             parameters: [
                     issue     : { ->subtask[] },
                     transition: it,
             ]
            ],
            [action    : 'getFieldValue',
             ext       : ":TC_05: The values of field Labels will be copied from the issues parent_replacing existing values_when parent issue has empty field value_not ignoring empty values :"  + it,
             parameters: [
                     issue: { ->subtask[] },
                     field: "Labels"
             ],
             failData      : [/Labels  . . . . . . . . . . . : $testLabel1/],
            ],
    ])
}

gint.taskHelper.add(
        action: 'setFieldValue', ext: ": set labels to $createMissingValue of parent issue to check createMissingValues_option of COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF  : ",
        parameters: [
                issue: { ->parent[] },
                field: "Labels",
                value: createMissingValue
        ]
)

['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent_createMissingValues'].each {
    gint.taskHelper.add([
            [action    : 'transitionIssue', ext: ': To CHECK_ COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF_when create missing values :' + it,
             sleepAfter: 3000,
             parameters: [
                     issue     : { ->subtask[] },
                     transition: it,
             ]
            ],
            [action    : 'getFieldValue',
             ext       : ":TC_06: The values of field Labels will be copied from the issues parent_replacing existing values_when parent issue has empty field value_not ignoring empty values :"  + it,
             parameters: [
                     issue: { ->subtask[] },
                     field: "Component/s"
             ],
             data      : ["Component/s . . . . . . . . . : $createMissingValue"],
            ],
    ])
}

gint.taskHelper.add([
        [action: 'setFieldValue', ext: ": set labels to empty value of parent issue to check appendValue_option of COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF  : ",
        parameters: [
                issue: { ->subtask[] },
                field: "Labels",
                value: " "
        ]
        ],
        [action: 'setFieldValue', ext: ": set labels to $testLabel2 value of parent issue to check appendValue_option of COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF  : ",
         parameters: [
                 issue: { ->subtask[] },
                 field: "Labels",
                 value: testLabel2
         ]
        ],
        [action: 'setFieldValue', ext: ": set labels to $testLabel1 of subtask issue to check appendValues_option of COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF  : ",
         parameters: [
                 issue: { ->parent[] },
                 field: "Labels",
                 value: testLabel1
         ]
        ]
        ]
)


['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent_appendValues'].each {
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ': To CHECK_ COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF_when append values :' + it,
                 sleepAfter: 3000,
                 parameters: [
                         issue     : { -> subtask[] },
                         transition: it,
                 ]
                ],
                [action    : 'getFieldValue',
                 ext       : ":TC_07: The values of field Labels will be copied from the issues parent_replacing existing values_when parent issue has empty field value_append values :" + it,
                 parameters: [
                         issue: { -> subtask[] },
                         field: "Labels"
                 ],
                 data      : ["Labels  . . . . . . . . . . . : $testLabel1 $testLabel2"],
                ],
        ])
}

gint.taskHelper.add([
        [action: 'setFieldValue', ext: ": set labels to empty value of parent issue to check conditionalExecution_option of COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF  : ",
         parameters: [
                 issue: { ->subtask[] },
                 field: "Labels",
                 value: " "
         ]
        ],
]
)

['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent_ifConditionTrue'].each {
    gint.taskHelper.add([
            [action    : 'transitionIssue', ext: ': To CHECK_ COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF_when condition false :' + it,
             sleepAfter: 3000,
             parameters: [
                     issue     : { -> subtask[] },
                     transition: it,
             ]
            ],
            [action    : 'getFieldValue',
             ext       : ":TC_08: The values of field Labels will not be copied from the issues parent_replacing existing values_when condition returns false for issue :" + it,
             parameters: [
                     issue: { -> subtask[] },
                     field: "Labels"
             ],
             failData      : ["Labels  . . . . . . . . . . . : $testLabel1"],
            ],
            [action: 'setFieldValue', ext: ": set priority to High of subtask to check conditional execution true_option of COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF  : ",
             parameters: [
                     issue: { ->subtask[] },
                     field: "Priority",
                     value: "High"
             ]
            ],
            [action    : 'transitionIssue', ext: ': To CHECK_ COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF_when condition true :' + it,
             sleepAfter: 3000,
             parameters: [
                     issue     : { -> subtask[] },
                     transition: it,
             ]
            ],
            [action    : 'getFieldValue',
             ext       : ":TC_09: The values of field Labels will be copied from the issues parent_replacing existing values_when condition returns true for issue :" + it,
             parameters: [
                     issue: { -> subtask[] },
                     field: "Labels"
             ],
             data      : ["Labels  . . . . . . . . . . . : $testLabel1"],
            ],
    ])
}
