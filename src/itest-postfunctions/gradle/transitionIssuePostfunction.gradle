buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/utils.gradle'

tearDown()
addWorkflow()

def relatedIssue = info?.isCloud ? relatedIssueCloud : relatedIssueServer
def statusList = info?.isCloud ? statusListCloud :  statusListServer

project.ext.defaultFieldsServer = [
        "fieldsToSet={}",
        "relationshipTypeSelect=",
        "selectedLinkType-group=",
        "useGroovyCondition=false",
        "groovyExpression=",
        "transition-list=",
        "transitionType=rawValue", // expression
        "eventTypeId=13",
        "skipValidators=no",
        "restrictToProjectRole=",
        "runAsUserSelector=",
        "skipConditions=no",
        "restrictToGroup=",
        "skipPermissions=no",
        "restrictToInternal=no",
        "commentType=template",
        "triggerEvent=no",
        "comment=",
        "throwExceptions=false",
        "correlationId="
]
project.ext.transitionIssueFunctionsServer = [
        "fieldsToSet={}",
        "relationshipTypeSelect=",
        "selectedLinkType-group=",
        "useGroovyCondition=false",
        "groovyExpression=",
        "transition-list=",
        "transitionType=rawValue",
        "eventTypeId=13",
        "skipValidators=no",
        "restrictToProjectRole=",
        "runAsUserSelector=",
        "skipConditions=no",
        "restrictToGroup=",
        "skipPermissions=no",
        "restrictToInternal=no",
        "commentType=template",
        "triggerEvent=no",
        "comment=",
        "throwExceptions=false",
        "correlationId="
]
def groovyScript = '''def trigger = !issue.subtasks.collect { it.status.name }.any { it != 'Done'}'''
def nunjucksScript = '''{{ (targetIssue | subtasks("status") | map(attribute="fields.status.name") | select("!=","Done") | list) | length > 0 ? false : true }'''

relatedIssue.eachWithIndex { key, value, i ->
    def defaultFieldsCloud = ["postFunction.id=d597971e-9524-4881-9edd-577b8b7b84c2"]
    def targetIssueFieldsMap = [
            conditionalExecution: false,
            targetIssue: "${value}",
            transition: "In Progress@@AUTOMATION",
            runAsType: "currentUser"
    ]
    def targetIssueString = new groovy.json.JsonBuilder(targetIssueFieldsMap).toString()
    def targetIssue = "postFunction.config-d597971e-9524-4881-9edd-577b8b7b84c2=${targetIssueString}"
    defaultFieldsCloud.add(targetIssue)
    def fields = info?.isCloud ? defaultFieldsCloud.each{element -> element } : defaultFieldsServer + "transitions=In Progress"+ "selectedLinkType=$value"
    def transition = 'transitionIssuePF_checkTargetIssues'
    def functionKey = info?.isCloud ? functionKey.transitionIssuePostfunctionCloud : functionKey.transitionIssuePostfunctionServer
    addTransitionFunction(transition + i, 'postfunction', fields, functionKey)
    moveTransitionFunction(transition + i, 4)
}

statusList.eachWithIndex { key, value, i ->
    def transition = 'transitionIssuePF_checkStatus'
    def fields = defaultFieldsServer + "transitions=$value" + "selectedLinkType=$relatedIssue.currentIssue"
    def functionKey = info?.isCloud ? functionKey.transitionIssuePostfunctionCloud : functionKey.transitionIssuePostfunctionServer
    addTransitionFunction(transition + i,'postfunction', fields, functionKey)
    moveTransitionFunction(transition + i, 4)
}

statusList.eachWithIndex { key, value, i ->
    def resultingList = ["postFunction.id=d597971e-9524-4881-9edd-577b8b7b84c2"]
    def configMap = [
            conditionalExecution: false,
            transition: "${value}@@AUTOMATION",
            runAsType: "currentUser"
    ]
    def configStr = new groovy.json.JsonBuilder(configMap).toString()
    def newElement = "postFunction.config-d597971e-9524-4881-9edd-577b8b7b84c2=${configStr}"
    resultingList.add(newElement)

    def transition = 'transitionParentIssuePF_checkStatus'
    def fields = info?.isCloud ? resultingList : defaultFieldsServer + "transitions=$value" + "selectedLinkType=$relatedIssue.currentIssue"
    def functionKey = info?.isCloud ? functionKey.transitionParentIssuePostfunctionCloud : functionKey.transitionParentIssuePostfunctionServer
    addTransitionFunction(transition+ i,'postfunction', fields, functionKey)
    moveTransitionFunction(transition + i, 4)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'transitionRelatedIssuePF_checkIssueTypes'
    def fields = info?.isCloud ? defaultFieldsCloud : defaultFieldsServer + "transitions=In Progress"+ "selectedLinkType=$value"
    def functionKey = info?.isCloud ? functionKey.transitionRelatedIssuesPostfunctionCloud : functionKey.transitionRelatedIssuesPostfunctionServer
    addTransitionFunction(transition + i, 'postfunction', fields, functionKey)
    moveTransitionFunction(transition + i, 4)
}

statusList.eachWithIndex { key, value, i ->
    def transition = 'transitionRelatedIssuePF_checkStatus'
    def functionKey = info?.isCloud ? functionKey.transitionRelatedIssuesPostfunctionCloud : functionKey.transitionRelatedIssuesPostfunctionServer
    def fields = defaultFieldsServer + "transitions=$value" + "selectedLinkType=$relatedIssue.currentIssue"
    addTransitionFunction(transition+ i, 'postfunction', fields, functionKey)
    moveTransitionFunction(transition + i, 4)
}

createWorkflowScheme()
createProject()

// set issue status to In Progress

def current = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'current')
def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[]}], 'Sub-task')
def epic = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic')
def issueBelongsToEpic = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic[]} ], 'BelongsToEpic')
def initiative = createIssue([type: 'Initiative', summary: 'JMWE_Issue' ], 'Initiative')
def epic_initiative = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative')
def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def blocks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'blocks')
def isBlockedBy = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'isBlockedBy')
def clones = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'clones')
def isClonedBy = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'isClonedBy')
def duplicates = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'duplicates')
def isDuplicatedBy = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'isDuplicatedBy')
def relatesTo = createIssue([type: 'Task', summary: 'JMWE_Task'], 'relatesTo')

updateIssue([issue: {->epic_initiative[]}, field: "Parent Link", value: {->initiative[]}], "parent initiative child epic")

def linkIssuesMap = [

         blocks : {->blocks[]},
         'is blocked by' : {->isBlockedBy[]},
         clones : {->clones[]},
         'is cloned by' : {->isClonedBy[]},
         duplicates : {->duplicates[]},
         'is duplicated by' : {->isDuplicatedBy[]},
         'relates to': {->relatesTo[]}
]

linkIssuesMap.eachWithIndex { key, value, i ->
    linkIssue([issue: {->issueLinks[]}, toIssue: value, link: "$key"], key)
}
def relatedIssuesMap = [
        {->current[]} : {->current[]},
        {->parent[]} : {->subtask[]},
        {->subtask[]} : {->parent[]},
        {->epic[]} : {->issueBelongsToEpic[]},
        {->issueBelongsToEpic[]} : {->epic[]},
        {-> initiative[]} : {->epic_initiative[]},
        {->epic_initiative[]} : {-> initiative[]},
        {->issueLinks[]} : {->blocks[]},
        {->issueLinks[]} : {->blocks[]},
        {->issueLinks[]} : {->isBlockedBy[]},
        {->issueLinks[]} : {->clones[]},
        {->issueLinks[]} : {->isClonedBy[]},
        {->issueLinks[]} : {->duplicates[]},
        {->issueLinks[]} : {->isDuplicatedBy[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->issueLinks[]} : {->relatesTo[]},
]
['transitionIssuePF_checkTargetIssues'].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ':' + it + i,
                 sleepAfter: 5000,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: 5000,
                 ext       : it + i,
                 parameters: [
                         issue: value,
                         field: "Status"
                 ],
                 data      : [/Status  . . . . . . . . . . . : In Progress/],
                 failData  : [/Status  . . . . . . . . . . . : To Do/]
                ],
                [action    : 'transitionIssue', ext: ': To Do' + it+ i,
                 sleep: 5000,
                 parameters: [
                         issue     : value,
                         transition: "To Do",
                 ]
                ],
        ])
    }
}

[
        'transitionIssuePF_checkStatus',
        'transitionRelatedIssuePF_checkStatus'
].collect {
    statusList.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: it + key + i,
                 sleepAfter: 5000,
                 parameters: [
                         issue     : { -> current[] },
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: 5000,
                 ext       : it + i,
                 parameters: [
                         issue: { -> current[] },
                         field: "Status"
                 ],
                 data      : [/Status  . . . . . . . . . . . : $value/],
                 failData  : [/Status  . . . . . . . . . . . : To Do/]
                ],
                [action    : 'transitionIssue', ext: it + i + ': To Do' + key,
                 sleep: 5000,
                 parameters: [
                         issue     : { -> current[] },
                         transition: "To Do",
                 ]
                ],
        ])
    }
}

['transitionParentIssuePF_checkStatus'].each {
    statusList.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: it + key + i,
                 sleepAfter: 5000,
                 parameters: [
                         issue     : { -> subtask[] },
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: 5000,
                 ext       : it + i,
                 parameters: [
                         issue: { -> parent[] },
                         field: "Status"
                 ],
                 data      : [/Status  . . . . . . . . . . . : $value/],
                 failData  : [/Status  . . . . . . . . . . . : To Do/]
                ],
                [action    : 'transitionIssue', ext: it + i + ': To Do' + key,
                 sleep: 5000,
                 parameters: [
                         issue     : { -> parent[] },
                         transition: "To Do",
                 ]
                ],
        ])
    }
}

