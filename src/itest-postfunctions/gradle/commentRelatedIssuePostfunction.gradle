buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
//apply from: gint.resourceDirectory +'/src/common/utils.gradle'
apply from: gint.resourceDirectory +'/src/itest-postfunctions/postfunction.gradle'

def relatedIssue = info?.isCloud ? relatedIssueCloud : relatedIssueServer
def listOfItemsToRemove = info?.isCloud? ["currentIssue","returnsByNunjucksExpression","returnsFromJqlSearch"] : ["currentIssue"]

listOfItemsToRemove.each {
    relatedIssue.remove(it)
}

def functionKey = info?.isCloud ? 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__CommentLinkedIssuesFunction' : 'com.innovalog.jmwe.jira-misc-workflow-extensions:commentLinkedIssues-function'
def expressionComment = "expression"

def commentVisibility = [
        notSelected : [ "restrictToGroup=", "restrictToProjectRole=" ],
        jiraAdminGroups : [ "restrictToGroup=$jiraAdminGrooup", "restrictToProjectRole=" ],
        jiraAdminRoles : [ "restrictToGroup=", "restrictToProjectRole=$jiraAdminRoleId" ],
        jiraSoftwareUsers : ["restrictToGroup=$testGroup", "restrictToProjectRole="]
]


relatedIssue.eachWithIndex { key, value, i ->
    def transition = "comment_added_by_template_" + i
    def server = defaultFieldsServer + "valueType=template" + "value=$transition" + "selectedLinkType=$value"
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.false,\"selectedLinkType\":\"$value\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",$runAsUser.currentUser}"
    addTransitionFunction( transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = "comment_added_by_expression_" + i
    def server = defaultFieldsServer + "valueType=expression" + "value=$groovyExpression.getDescription" + "selectedLinkType=$value"
    if(!isCloud) {
        addTransitionFunction(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    }
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'addCommentIfConditionTrue' + i
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.true,\"selectedLinkType\":\"$value\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",$runAsUser.currentUser}"
    def server = defaultFieldsServer + "valueType=template" + "value=$transition" + commentVisibility.notSelected+  "selectedLinkType=$value" + conditionalExecution.true + runAsUser.currentUser
    addTransitionFunction( transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'visibleToJiraAdminRoles'+i
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.false,\"selectedLinkType\":\"$value\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",\"restrictToProjectRoleId\":$jiraAdminRoleId,$runAsUser.currentUser}"
    def server = defaultFieldsServer + "valueType=template" + "value=$transition" + commentVisibility.jiraAdminRoles +  "selectedLinkType=$value" + conditionalExecution.false + runAsUser.currentUser
    addTransitionFunction( transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'visibleToJiraSoftwareUsers' + i
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.false,\"selectedLinkType\":\"$value\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"$testGroupIdCloud\",$runAsUser.currentUser}"
    def server = defaultFieldsServer + "valueType=template" + "value=$transition" + commentVisibility.jiraSoftwareUsers +  "selectedLinkType=$value" + conditionalExecution.false + runAsUser.currentUser
    addTransitionFunction( transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

runAsUser.remove("currentUser")

runAsUser.eachWithIndex { userToCheck, configFields, idx ->
    relatedIssue.eachWithIndex { key, value, i ->
        def transition = 'run_as_'+ userToCheck + i
        def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.false,\"selectedLinkType\":\"$value\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",$configFields}"
        def server = defaultFieldsServer + configFields + "valueType=template" + "value=$transition" + commentVisibility.notSelected +  "selectedLinkType=$value" + conditionalExecution.false
        addTransitionFunction( transition , 'postfunction', info?.isCloud ? cloud : server, functionKey)
        if(!isCloud){
            moveTransitionFunction ( transition, 4)
        }
    }
}

createWorkflowScheme()
createProject()

def current = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'current')
def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[]}], 'Sub-task')
def epic = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic')
def issueBelongsToEpic = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic[]} ], 'BelongsToEpic')
def initiative = createIssue([type: 'Initiative', summary: 'JMWE_Issue' ], 'Initiative')
def epic_initiative = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative')
def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def blocks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'blocks')
def clones = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'clones')
def duplicates = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'duplicates')
def relatesTo = createIssue([type: 'Task', summary: 'JMWE_Task'], 'relatesTo')
def jqlIssue = createIssue([type: 'Task', summary: 'JQL_ISSUE'], 'jqlIssue')
updateIssue([issue: {->epic_initiative[]}, field: "Parent Link", value: {->initiative[]}], "parent initiative child epic")

def linkIssuesMap = [
        blocks : {->blocks[]},
        "$clonesLinkType" : {->clones[]},
        duplicates : {->duplicates[]},
        'relates to': {->relatesTo[]}
]

linkIssuesMap.eachWithIndex { key, value, i ->
    linkIssue([issue: {->issueLinks[]}, toIssue: value, link: "$key"], key)
}

def relatedIssuesMapServer = [
        {->parent[]} : {->subtask[]},
        {->subtask[]} : {->parent[]},
        {->epic[]} : {->issueBelongsToEpic[]},
        {->issueBelongsToEpic[]} : {->epic[]},
        {-> initiative[]} : {->epic_initiative[]},
        {->epic_initiative[]} : {-> initiative[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->blocks[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->clones[]},
        {->clones[]} : {->issueLinks[]},
        {->issueLinks[]} : {->duplicates[]},
        {->duplicates[]} : {->issueLinks[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->relatesTo[]} : {->issueLinks[]},
        {->issueLinks[]} : {->jqlIssue[]}
]
def relatedIssuesMapCloud = [
        {->parent[]} : {->subtask[]},
        {->subtask[]} : {->parent[]},
        {->epic[]} : {->issueBelongsToEpic[]},
        {->issueBelongsToEpic[]} : {->epic[]},
        {-> initiative[]} : {->epic_initiative[]},
        {->epic_initiative[]} : {-> initiative[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->blocks[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->clones[]},
        {->clones[]} : {->issueLinks[]},
        {->issueLinks[]} : {->duplicates[]},
        {->duplicates[]} : {->issueLinks[]},
        {->issueLinks[]} : {->relatesTo[]},
]

def relatedIssuesMap = info?.isCloud ? relatedIssuesMapCloud : relatedIssuesMapServer

def getCurrentUserName = info?.isCloud? info?.userDisplayName : user

relatedIssuesMap.eachWithIndex{ key, value, i ->
    gint.taskHelper.add(
            action: 'updateIssue' , ext: " : add description to add in comment : " + i,
            parameters: [
                    issue: value,
                    description : expressionComment
            ]
    )
}

[
        'comment_added_by_template_',
        'run_as_userInFieldReporter',
        'run_as_userInFieldCreator',
        'run_as_userFromScript',
        'run_as_specificUser',
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: it + ': add comment by template :' + i,
                 sleep: info?.isCloud ? 5000 : 0,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action: 'getComments', ext: " : add comment by template :" + it + i,
                 sleep: info?.isCloud ? 5000 : 0,
                 parameters: [
                         issue: value
                 ],
                 data:[   /$getCurrentUserName added a comment on/,
                          /$it/
                 ],
                ]
        ])
    }
}

[
        'visibleToJiraSoftwareUsers',
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: it + ': ' + i,
                 sleep: info?.isCloud ? 5000 : 0,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action: 'getComments', ext: " : " + it + i,
                 sleep: info?.isCloud ? 5000 : 0,
                 parameters: [
                         issue: value
                 ],
                 failData:[ /$it/  ],
                ]
        ])
    }
}

[
        'visibleToJiraAdminRoles',
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: it + ': ' + i,
                 sleep: info?.isCloud ? 5000 : 0,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action: 'getComments', ext: " : " + it + i,
                 sleep: info?.isCloud ? 5000 : 0,
                 parameters: [
                         issue: value
                 ],
                 data:[ /$it/  ],
                ]
        ])
    }
}

['addCommentIfConditionTrue'].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 ext: it + ': when conditional validation false do not add comment: ' + i,
                 sleep: info?.isCloud ? 5000 : 0,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action: 'getComments', ext: it +" : when conditional validation false do not add comment :" + i,
                 sleep: info?.isCloud ? 5000 : 0,
                 parameters: [
                         issue: value
                 ],
                 failData:[/$it/],
                ]
        ])
    }
}

relatedIssuesMap.eachWithIndex{ key, value, i ->
    gint.taskHelper.add([
            [action: 'updateIssue' , ext: " : target issue_ to check conditional validation and assignee field : " + i,
             sleep: info?.isCloud ? 5000 : 0,
             parameters: [
                     issue: value,
                     priority : 'High',
                     assignee: testUser
             ],
            ],
            [action: 'updateIssue' , ext: " : current issue_ to check conditional validation and assignee field : " + i,
             sleep: info?.isCloud ? 5000 : 0,
             parameters: [
                     issue: key,
                     priority : 'High',
                     assignee: testUser
             ],
            ],
    ]
    )
}

['addCommentIfConditionTrue'].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: it + ': when conditional validation true do add comment: ' + i,
                 sleep: info?.isCloud ? 5000 : 0,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action: 'getComments', ext: it +" : when conditional validation true do add comment :" + i,
                 sleep: info?.isCloud ? 5000 : 0,
                 parameters: [
                         issue: value
                 ],
                 data:[/$it/],
                ]
        ])
    }
}
[
        'run_as_userInFieldAssignee'
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: it + ' :' + i,
                 sleep: info?.isCloud ? 5000 : 0,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action: 'getComments', ext: " : " + it + i,
                 sleep: info?.isCloud ? 5000 : 0,
                 parameters: [
                         issue: value
                 ],
                 data:[   /$testUser added a comment on/,
                          /$it/
                 ],
                ]
        ])
    }
}
