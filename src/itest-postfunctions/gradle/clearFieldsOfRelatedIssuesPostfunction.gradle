buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
// apply from: gint.resourceDirectory +'/src/common/utils.gradle'
apply from: gint.resourceDirectory +'/src/itest-postfunctions/postfunction.gradle'

def relatedIssue = info?.isCloud ? relatedIssueCloud : relatedIssueServer
relatedIssue.remove("currentIssue")
def functionKey = info?.isCloud ? 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__ClearFieldsOfLinkedIssuesFunction' : 'com.innovalog.jmwe.jira-misc-workflow-extensions:ClearFieldValueOfLinkedIssues-function'

def fieldsServer = [
        labels : [ "fields=labels"],
        components : [ "fields=components"],
        fixVersions : [ "fields=fixVersions"],
        affectsVersions : [ "fields=versions"],
        assignee : [ "fields=assignee"]
]
def fieldsCloud = [
        labels : /"fields":"labels"/,
        components : /"fields":"components"/,
        fixVersions : /"fields":"fixVersions"/,
        affectsVersions : /"fields":"versions"/,
        assignee : /"fields":"assignee"/
]

def fields = info?.isCloud ? fieldsCloud : fieldsServer

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'clearFieldLabel'
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.false,\"selectedLinkType\":\"$value\",$fields.labels,$runAsUser.currentUser}"
    def server = defaultFieldsServer + fields.labels + "selectedLinkType=$value" + conditionalExecution.false + runAsUser.currentUser
    addTransitionFunction( transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'runAsSpecificUser'
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.false,\"selectedLinkType\":\"$value\",$fields.components,$runAsUser.specificUser}"
    def server = defaultFieldsServer + fields.components + "selectedLinkType=$value" + conditionalExecution.false + runAsUser.specificUser
    addTransitionFunction( transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud) {
        moveTransitionFunction(transition + i, 4)
    }
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'runAsUserInFieldAssignee'
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.false,\"selectedLinkType\":\"$value\",$fields.fixVersions,$runAsUser.userInFieldAssignee}"
    def server = defaultFieldsServer +fields.fixVersions + "selectedLinkType=$value" + conditionalExecution.false + runAsUser.userInFieldAssignee
    addTransitionFunction( transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud) {
        moveTransitionFunction(transition + i, 4)
    }
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'runAsUserInFieldReporter'
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.false,\"selectedLinkType\":\"$value\",$fields.assignee,$runAsUser.userInFieldReporter}"
    def server = defaultFieldsServer +fields.assignee + "selectedLinkType=$value" + conditionalExecution.false + runAsUser.userInFieldReporter
    addTransitionFunction( transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud) {
        moveTransitionFunction(transition + i, 4)
    }
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'runAsUserInFieldCreator'
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.false,\"selectedLinkType\":\"$value\",$fields.affectsVersions,$runAsUser.userInFieldCreator}"
    def server = defaultFieldsServer +fields.affectsVersions + "selectedLinkType=$value" + conditionalExecution.false + runAsUser.userInFieldCreator
    addTransitionFunction( transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud) {
        moveTransitionFunction(transition + i, 4)
    }
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'clearFieldsIfConditionalExecutionTrue'
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.true,\"selectedLinkType\":\"$value\",$fields.labels,$runAsUser.currentUser}"
    def server = defaultFieldsServer + fields.labels + "selectedLinkType=$value" + conditionalExecution.true + runAsUser.currentUser
    addTransitionFunction( transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

createWorkflowScheme()
createProject()

(1..1).each {
    gint.taskHelper.addSetUp([
            [action: 'addVersion',
             ext: ': create versions : ' + it,
             parameters: [
                     project: projectName,
                     version: it
             ]
            ],
            [action: 'addComponent',
             ext: ': create Component : ' + it,
             parameters: [
                     project: projectName,
                     component: 'component' + it
             ],
            ]
    ])
}

def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[]}], 'Sub-task')
def epic = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic')
def issueBelongsToEpic = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic[]} ], 'BelongsToEpic')
def initiative = createIssue([type: 'Initiative', summary: 'JMWE_Issue' ], 'Initiative')
def epic_initiative = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative')
def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def blocks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'blocks')
def clones = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'clones')
def duplicates = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'duplicates')
def relatesTo = createIssue([type: 'Task', summary: 'JMWE_Task'], 'relatesTo')
def jqlIssue = createIssue([type: 'Task', summary: 'JQL_ISSUE'], 'jqlIssue')
updateIssue([issue: {->epic_initiative[]}, field: "Parent Link", value: {->initiative[]}], "parent initiative child epic")

def linkIssuesMap = [
        blocks : {->blocks[]},
        "$clonesLinkType" : {->clones[]},
        duplicates : {->duplicates[]},
        'relates to': {->relatesTo[]}
]

linkIssuesMap.eachWithIndex { key, value, i ->
    linkIssue([issue: {->issueLinks[]}, toIssue: value, link: "$key"], key)
}

def relatedIssuesMapServer = [
        {->parent[]} : {->subtask[]},
        {->subtask[]} : {->parent[]},
        {->epic[]} : {->issueBelongsToEpic[]},
        {->issueBelongsToEpic[]} : {->epic[]},
        {-> initiative[]} : {->epic_initiative[]},
        {->epic_initiative[]} : {-> initiative[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->blocks[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->clones[]},
        {->clones[]} : {->issueLinks[]},
        {->issueLinks[]} : {->duplicates[]},
        {->duplicates[]} : {->issueLinks[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->relatesTo[]} : {->issueLinks[]},
        {->issueLinks[]} : {->jqlIssue[]}
]
def relatedIssuesMapCloud = [
        {->parent[]} : {->subtask[]},
        {->subtask[]} : {->parent[]},
        {->epic[]} : {->issueBelongsToEpic[]},
        {->issueBelongsToEpic[]} : {->epic[]},
        {-> initiative[]} : {->epic_initiative[]},
        {->epic_initiative[]} : {-> initiative[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->blocks[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->clones[]},
        {->clones[]} : {->issueLinks[]},
        {->issueLinks[]} : {->duplicates[]},
        {->duplicates[]} : {->issueLinks[]},
        {->issueLinks[]} : {->relatesTo[]},
]

def relatedIssuesMap = info?.isCloud? relatedIssuesMapCloud : relatedIssuesMapServer

def testLabel = 'test_label'
int fixVersions = 1
def affectsVersions = 1
def component = 'component1'

// CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_TS_11-Verify to select fields from the Field(s) picker
[
        'clearFieldLabel',
].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action: 'updateIssue',
                 ext: " : add field labels to before transition issue with_ $it$i _  : ",
                 sleep: info?.isCloud? 5000 : 0,
                parameters: [
                        issue: value,
                        labels: testLabel,
                ],
                ],
                [action: "getFieldValue",
                 sleep: info?.isCloud? 5000 : 0,
                 ext: ":CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_validate that before transition value of field _labels should be: $testLabel :$it$i",
                 parameters:[
                         issue: value,
                         field: "Labels"
                 ],
                 finalClosure:{Task task ->
                     def actualValue = "$task.outData"
                     assert actualValue.contains(testLabel)
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ":CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_TS_11_TC_ $i to check _$it$i:",
                sleep: info?.isCloud? 5000 : 0,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 ext       : ":CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_TS_11_TC_ $i _validate that the after transition value of field _labels should be clear: $testLabel :$it$i _",
                sleep: info?.isCloud? 5000 : 0,
                 parameters: [
                         issue: value,
                         field: "Labels"
                 ],
                 failData      : [/Labels  . . . . . . . . . . . : $testLabel/],
                 finalClosure:{Task task ->
                     def actualValue = "$task.outData"
                     assert !actualValue.contains(testLabel)
                 }
                ],
        ])
    }
}

// CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_TS_26_Verify the run as specific user
[
        'runAsSpecificUser',
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action: 'updateIssue',
                 ext: " : add field component to check $it _" + i,
                sleep: info?.isCloud? 5000 : 0,
                 parameters: [
                         issue: value,
                         components: component,
                 ]],
                [action: "getFieldValue",
                 ext: ":CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_validate that the before transition value of field component should be: $component :$it$i",
                sleep: info?.isCloud? 5000 : 0,
                 parameters:[
                         issue: value,
                         field: "Components"
                 ],
                 finalClosure:{Task task ->
                     def actualValue = "$task.outData"
                     assert actualValue.contains("$component")
                 }
                ],
                [action    : 'transitionIssue',
                 ext: ": CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_TS_26_TC_ $i _to check $it _ Verify the run as specific user: ",
                sleep: info?.isCloud? 5000 : 0,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action: "getFieldValue",
                 ext: ":CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_validate that the after transition value of field component should be clear: $component :$it$i",
                sleep: info?.isCloud? 5000 : 0,
                 parameters:[
                         issue: value,
                         field: "Components"
                 ],
                 finalClosure:{Task task ->
                     def actualValue = "$task.outData"
                     assert !actualValue.contains("$component")
                 }
                ],
                [action    : 'getIssueHistoryList',
                 ext: ": CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_TS_26_TC_ $i _to check $it$i _ Verify the run as specific user: ",
                sleep: info?.isCloud? 5000 : 0,
                 parameters: [
                         issue: value,
                         outputType: "text",
                         select: "Field:Component",
                         columns: "Author,'From String','To String'"
                 ],
                 data      : ["$getCurrentUserName","$component", ""],
                 finalClosure:{Task task ->
                     def output = "$task.outData"
                     assert output.contains(getCurrentUserName) && output.contains(component) && output.contains(" ")
                 }
                ],
        ])
    }
}

// CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_TS_28_Case_01_Verify the run as user in field assignee option
[
        'runAsUserInFieldAssignee'
].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        def userInFieldAssignee1 = info?.isCloud? info?.userDisplayName : user
        def getFixVersions = info?.isCloud ? "Fix versions  . . . . . . . . : 1" : "Fix Version/s . . . . . . . . : 1"
        gint.taskHelper.add([
                [action: 'assignIssue',
                 ext: ": target issue to check run as user in field assignee related issue: " + it+i ,
                sleep: info?.isCloud? 5000 : 0,
                 parameters: [
                         issue: value,
                         assignee: user
                 ],
                ],
                [action: 'assignIssue',
                 ext: ": current issue to check run as user in field assignee related issue: " + it+i ,
                sleep: info?.isCloud? 5000 : 0,
                 parameters: [
                         issue: key,
                         assignee: user
                 ],
                ],
                [action: "getFieldValue",
                 ext: ":CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_validate that the after transition value of field _assignee should be: $userInFieldAssignee1 :$it$i",
                sleep: info?.isCloud? 5000 : 0,
                 parameters:[
                         issue: value,
                         field: "Assignee"
                 ],
                 finalClosure:{Task task ->
                     def actualValue = "$task.outData"
                     assert actualValue.contains(userInFieldAssignee1)
                 }
                ],
                [action: 'updateIssue',
                 ext: " : add field fix versions_ current issue to check $it _" + i,
                sleep: info?.isCloud? 5000 : 0,
                 parameters: [
                         issue: value,
                         fixVersions: fixVersions,
                 ]
                ],
                [action: "getFieldValue",
                 ext: ":CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_validate that the before transition value of field fix versions should be: $fixVersions :$it$i",
                sleep: info?.isCloud? 5000 : 0,
                 parameters:[
                         issue: value,
                         field: "fixVersions"
                 ],
                        data: [ getFixVersions ],
                ],
                [action    : 'transitionIssue',
                 ext: ": CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_TS_28_Case_01_ TC_ $i _ to check $it _Verify the run as user in field assignee option : ",
                sleep: info?.isCloud? 5000 : 0,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action: "getFieldValue",
                 ext: ":CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_validate that the value of field fix versions should not be: $fixVersions : after transition_ $it$i",
                sleep: info?.isCloud? 5000 : 0,
                 parameters:[
                         issue: value,
                         field: "fixVersions"
                 ],
                 failData: [ getFixVersions ],
                ],
                [action    : 'getIssueHistoryList',
                 ext: ": CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_TS_28_Case_01_ TC_ $i _ to check $it _Verify the run as user in field assignee option : ",
                sleep: info?.isCloud? 5000 : 0,
                 parameters: [
                         issue: value,
                         outputType: "text",
                         select: "Field:Fix Version",
                         columns: "Author,'From String','To String'"
                 ],
                 data      : [ "$userInFieldAssignee1","$fixVersions", "" ],
                 finalClosure:{Task task ->
                     def actualValue = "$task.outData"
                     assert actualValue.contains(userInFieldAssignee1) && actualValue.toString().contains(fixVersions.toString()) && actualValue.contains(" ")
                 }
                ],
        ])
    }
}

// CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_TS_28_Case_02_Verify the run as user in field reporter option
[
        'runAsUserInFieldReporter',
].each {
    def userInFieldReporter1 = info?.isCloud? info?.userDisplayName : user
    def userInFieldAssignee1 = info?.isCloud? info?.userDisplayName : user
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action: "getFieldValue",
                 ext: ":CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_validate that the value of field assignee should be: $userInFieldAssignee1 : after transition_ $it$i",
                sleep: info?.isCloud? 5000 : 0,
                 parameters:[
                         issue: value,
                         field: "Reporter"
                 ],
                 finalClosure:{Task task ->
                     def actualValue = "$task.outData"
                     assert actualValue.contains("$userInFieldReporter1")
                 }
                ],
                [action: 'assignIssue',
                 ext: ": to check run as user in field reporter related issue: " +it + i ,
                sleep: info?.isCloud? 5000 : 0,
                 parameters: [
                         issue: value,
                         assignee: userInFieldAssignee1
                 ],
                ],
                [action: "getFieldValue",
                 ext: ":CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_validate that the value of field assignee should be: $userInFieldAssignee1 : before transition_ $it$i",
                sleep: info?.isCloud? 5000 : 0,
                 parameters:[
                         issue: value,
                         field: "Assignee"
                 ],
                 finalClosure:{Task task ->
                     def actualValue = "$task.outData"
                     assert actualValue.contains(userInFieldAssignee1)
                 }
                ],
                [action    : 'transitionIssue',
                 ext: ": CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_TS_28_Case_02_ TC_ $i _ to check $it _Verify the run as user in field reporter option : ",
                sleep: info?.isCloud? 5000 : 0,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action: "getFieldValue",
                 ext: ":CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_validate that the value of field assignee should be clear: $userInFieldAssignee1 : after transition_ $it$i",
                sleep: info?.isCloud? 5000 : 0,
                 parameters:[
                         issue: value,
                         field: "Assignee"
                 ],
                 failData:["Assignee  . . . . . . . . . . : $userInFieldAssignee1"],
                 finalClosure:{Task task ->
                     def actualValue = "$task.outData"
                     assert !actualValue.contains(userInFieldAssignee1)
                 }
                ],
                [action    : 'getIssueHistoryList',
                 ext: ": CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_TS_28_Case_02_ TC_ $i _ to check $it _Verify the run as user in field assignee option : ",
                sleep: info?.isCloud? 5000 : 0,
                 parameters: [
                         issue: value,
                         outputType: "text",
                         select: "Field:assignee",
                         columns: "Author,'From String','To String'"
                 ],
                 data      : ["$userInFieldReporter1","$userInFieldAssignee1", ""],
                 finalClosure:{Task task ->
                     def actualValue = "$task.outData"
                     assert actualValue.contains(userInFieldReporter1) && actualValue.contains(userInFieldAssignee1) && actualValue.contains(" ")
                 }
                ],
        ])
    }
}

// CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_TS_28_Case_03_Verify the run as user in field creator option
[
        'runAsUserInFieldCreator'
].each {
    def userInFieldCreator1 = info?.isCloud? info?.userDisplayName : user
    def affectsVersionToCheck = info?.isCloud? "Affects versions  . . . . . . : $affectsVersions" : "Affects Version/s . . . . . . : $affectsVersions"
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action: 'updateIssue',
                 ext: " : add field affects versions_target issue to check $it _" + i,
                sleep: info?.isCloud? 5000 : 0,
                 parameters: [
                         issue: value,
                         affectsVersions: affectsVersions,
                 ]
                ],
                [action: "getFieldValue",
                 ext: ":CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_validate that the before transition value of field affects versions should be: $affectsVersions :$it$i",
                sleep: info?.isCloud? 5000 : 0,
                 parameters:[
                         issue: value,
                         field: "affectsVersions"
                 ],
                 finalClosure:{Task task ->
                     def actualValue = "$task.outData"
                     assert actualValue.contains(affectsVersionToCheck)
                 }
                ],
                [action    : 'transitionIssue',
                 ext: ": CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_TS_28_Case_03_ TC_ $i _ to check $it _Verify the run as user in field assignee option : ",
                sleep: info?.isCloud? 5000 : 0,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action    : 'getIssueHistoryList',
                 ext: ": CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_TS_28_Case_03_ TC_ $i _ to check $it _Verify the run as user in field assignee option : ",
                sleep: info?.isCloud? 5000 : 0,
                 parameters: [
                         issue: value,
                         outputType: "text",
                         select: "Field:Version",
                         columns: "Author,'From String','To String'"
                 ],
                 data      : ["$userInFieldCreator1","$affectsVersions", ""],
                 finalClosure:{Task task ->
                     def actualValue = "$task.outData"
                     assert actualValue.contains(userInFieldCreator1) && actualValue.toString().contains(affectsVersions.toString()) && actualValue.contains(" ")
                 }
                ],
        ])
    }
}

// CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_TS_31-Verify the Conditional Execution
[
        'clearFieldsIfConditionalExecutionTrue'
].each {
    if(!isCloud){
        relatedIssuesMap.eachWithIndex { key, value, i ->
            gint.taskHelper.add([
                    [action: 'updateIssue',
                     ext: " : add field labels to before transition issue with_ $it$i _  : ",
                    sleep: info?.isCloud? 5000 : 0,
                     parameters: [
                             issue: value,
                             labels: testLabel,
                     ],
                    ],
                    [action: "getFieldValue",
                     ext: ":CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_validate that before transition value of field _labels should be: $testLabel :$it$i",
                    sleep: info?.isCloud? 5000 : 0,
                     parameters:[
                             issue: value,
                             field: "Labels"
                     ],
                     finalClosure:{Task task ->
                         def actualValue = "$task.outData"
                         assert actualValue.contains("$testLabel")
                     }
                    ],
                    [action    : 'updateIssue',
                     ext       : " : set priority of current issue to Low to check $it _when condition returns false: " + i,
                     sleep     : 5000,
                     parameters: [
                             issue   : key,
                             priority: 'Low'
                     ]
                    ],
                    [action: "getFieldValue",
                     ext: ":CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_validate that priority of the issue should not be high: $testLabel :$it$i",
                    sleep: info?.isCloud? 5000 : 0,
                     parameters:[
                             issue: key,
                             field: "Priority"
                     ],
                     finalClosure:{Task task ->
                         def actualValue = "$task.outData"
                         assert !actualValue.contains("High")
                     }
                    ],
                    [action    : 'transitionIssue',
                     ext       : ":CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_TS_31_Case_01_ TC_$i _check $it _When condition false: ",
                     sleep     : 5000,
                     parameters: [
                             issue     : key,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     ext       : ":CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_TS_31_Case_01_ TC_$i _check $it _When condition false_labels should not clear: ",
                     sleep     : 5000,
                     parameters: [
                             issue: value,
                             field: "Labels"
                     ],
                     data      : [/Labels  . . . . . . . . . . . : $testLabel/],
                     finalClosure:{Task task ->
                         def actualValue = "$task.outData"
                         assert actualValue.contains("$testLabel")
                     }
                    ],
                    [action    : 'updateIssue',
                     ext       : " : set priority of current issue to High to check $it _when condition returns true: " + i,
                     sleep     : 5000,
                     parameters: [
                             issue   : key,
                             priority: 'High'
                     ]
                    ],
                    [action: "getFieldValue",
                     ext: ":CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_validate that priority of the issue should be high: $testLabel :$it$i",
                    sleep: info?.isCloud? 5000 : 0,
                     parameters:[
                             issue: key,
                             field: "Priority"
                     ],
                     finalClosure:{Task task ->
                         def actualValue = "$task.outData"
                         assert actualValue.contains("High")
                     }
                    ],
                    [action    : 'transitionIssue',
                     ext       : ":CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_TS_31_Case_02 TC_$i _check $it _When condition true: ",
                     sleep     : 5000,
                     parameters: [
                             issue     : key,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     ext       : ":CLEAR_FIELDS_OF_RELATED_ISSUE_POSTFUNCTION_TS_31_Case_02_TC_$i _check $it _When condition true_labels should be clear: ",
                     sleep     : 5000,
                     parameters: [
                             issue: value,
                             field: "Labels"
                     ],
                     failData  : [/Labels  . . . . . . . . . . . : $testLabel/],
                     finalClosure:{Task task ->
                         def actualValue = "$task.outData"
                         assert !actualValue.contains("$testLabel")
                     }
                    ],
            ])
        }
    }
}


/*
subtask:[{->parent[]} : {->subtask[]}] ,
        parent : [{->subtask[]} : {->parent[]}],
        issueBelongsToEpic: [{->epic[]} : {->issueBelongsToEpic[]}],
        epicOfTheCurrentIssue : [{->issueBelongsToEpic[]} : {->epic[]}],
        childPortfolio: [{-> initiative[]} : {->epic_initiative[]}],
        parentPortfolio:[{->epic_initiative[]} : {-> initiative[]}],
        linkByAnyLink:[{->blocks[]} : {->issueLinks[]}],
        linkByBlock:[{->issueLinks[]} : {->blocks[]}],
        linkByisBlockedBy:[{->blocks[]} : {->issueLinks[]}],
        linkByClones:[{->issueLinks[]} : {->clones[]}],
        linkByIsClonedBy:[{->clones[]} : {->issueLinks[]}],
        linkByDuplicates: [{->issueLinks[]} : {->duplicates[]}],
        linkByIsDuplicatedBy: [{->duplicates[]} : {->issueLinks[]}],
        linkByRelatesTo : [{->relatesTo[]} : {->issueLinks[]}],
         [{->issueLinks[]} : {->relatesTo[]}],
         [{->issueLinks[]} : {->jqlIssue[]}]
 */
