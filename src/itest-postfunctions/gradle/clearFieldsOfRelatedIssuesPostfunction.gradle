buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/utils.gradle'

tearDown()
addWorkflow()

def relatedIssue = info?.isCloud ? relatedIssueCloud : relatedIssueServer
relatedIssue.remove("currentIssue")
def functionKey = info?.isCloud ? 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__ClearFieldsOfLinkedIssuesFunction' : 'com.innovalog.jmwe.jira-misc-workflow-extensions:ClearFieldValueOfLinkedIssues-function'

def clearFieldsPfFields = [
        "correlationId=",
]

def fields = [
        labels : [ "fields=labels"],
        components : [ "fields=components"],
        fixVersions : [ "fields=fixVersions"],
        affectsVersions : [ "fields=versions"],
        assignee : [ "fields=assignee"]
]
relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'clearFieldLabel'
    def server = clearFieldsPfFields + fields.labels + "selectedLinkType=$value" + conditionalExecution.false + runAsUser.currentUser
    addTransitionFunction( transition + i, 'postfunction', server, functionKey)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'runAsSpecificUser'
    def server = clearFieldsPfFields + fields.components + "selectedLinkType=$value" + conditionalExecution.false + runAsUser.specificUser
    addTransitionFunction( transition + i, 'postfunction', server, functionKey)
    moveTransitionFunction ( transition + i, 4)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'runAsUserInFieldAssignee'
    def server = clearFieldsPfFields +fields.fixVersions + "selectedLinkType=$value" + conditionalExecution.false + runAsUser.userInFieldAssignee
    addTransitionFunction( transition + i, 'postfunction', server, functionKey)
    moveTransitionFunction ( transition + i, 4)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'runAsUserInFieldReporter'
    def server = clearFieldsPfFields +fields.assignee + "selectedLinkType=$value" + conditionalExecution.false + runAsUser.userInFieldReporter
    addTransitionFunction( transition + i, 'postfunction', fields, functionKey)
    moveTransitionFunction ( transition + i, 4)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'runAsUserInFieldCreator'
    def server = clearFieldsPfFields +fields.affectsVersions + "selectedLinkType=$value" + conditionalExecution.false + runAsUser.userInFieldCreator
    addTransitionFunction( transition + i, 'postfunction', server, functionKey)
    moveTransitionFunction ( transition + i, 4)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'clearFieldsIfConditionalExecutionTrue'
    def server = clearFieldsPfFields + fields.labels + "selectedLinkType=$value" + conditionalExecution.true + runAsUser.currentUser
    addTransitionFunction( transition + i, 'postfunction', server, functionKey)
}

createWorkflowScheme()
createProject()

(1..1).each {
    gint.taskHelper.addSetUp([
            [action: 'addVersion', ext: ': create versions : ' + it,
             parameters: [
                     project: projectName,
                     version: it
             ]
            ],
            [action: 'addComponent', ext: ': create Component : ' + it,
             parameters: [
                     project: projectName,
                     component: 'component' + it
             ],
            ]
    ])
}

// set issue status to In Progress

def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[]}], 'Sub-task')
def epic = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic')
def issueBelongsToEpic = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic[]} ], 'BelongsToEpic')
def initiative = createIssue([type: 'Initiative', summary: 'JMWE_Issue' ], 'Initiative')
def epic_initiative = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative')
def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def blocks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'blocks')
def isBlockedBy = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'isBlockedBy')
def clones = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'clones')
def isClonedBy = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'isClonedBy')
def duplicates = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'duplicates')
def isDuplicatedBy = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'isDuplicatedBy')
def relatesTo = createIssue([type: 'Task', summary: 'JMWE_Task'], 'relatesTo')
def jqlIssue = createIssue([type: 'Task', summary: 'JQL_ISSUE'], 'jqlIssue')

updateIssue([issue: {->epic_initiative[]}, field: "Parent Link", value: {->initiative[]}], "parent initiative child epic")

def linkIssuesMap = [
        blocks : {->blocks[]},
        'is blocked by' : {->isBlockedBy[]},
        clones : {->clones[]},
        'is cloned by' : {->isClonedBy[]},
        duplicates : {->duplicates[]},
        'is duplicated by' : {->isDuplicatedBy[]},
        'relates to': {->relatesTo[]}
]

linkIssuesMap.eachWithIndex { key, value, i ->
    linkIssue([issue: {->issueLinks[]}, toIssue: value, link: "$key"], key)
}

def relatedIssuesMap = [
        {->parent[]} : {->subtask[]},
        {->subtask[]} : {->parent[]},
         {->epic[]} : {->issueBelongsToEpic[]},
         {->issueBelongsToEpic[]} : {->epic[]},
         {-> initiative[]} : {->epic_initiative[]},
         {->epic_initiative[]} : {-> initiative[]},
        {->blocks[]} : {->issueLinks[]},
         {->issueLinks[]} : {->blocks[]},
         {->issueLinks[]} : {->isBlockedBy[]},
         {->issueLinks[]} : {->clones[]},
         {->issueLinks[]} : {->isClonedBy[]},
         {->issueLinks[]} : {->duplicates[]},
         {->issueLinks[]} : {->isDuplicatedBy[]},
         {->issueLinks[]} : {->relatesTo[]},
         {->issueLinks[]} : {->relatesTo[]},
         {->issueLinks[]} : {->jqlIssue[]},
]

def clearLabel = 'test_label'
def fixVersions = 1
def affectsVersions = 1
def component = 'component1'
def assignee = user

relatedIssuesMap.eachWithIndex{ key ,value,i ->
    gint.taskHelper.add(
            action: 'updateIssue', ext: " : add fields to clear " + i,
            parameters: [
                    issue: value,
                    labels: clearLabel,
                    fixVersions: fixVersions,
                    affectsVersions : affectsVersions,
                    components: component,
                    assignee: assignee
            ]
    )
}

[
        'clearFieldLabel',
].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: it + ': of related issue'  + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 ext       : it + ': of related issue' + i,
                 parameters: [
                         issue: value,
                         field: "Labels"
                 ],
                 failData      : [/Labels  . . . . . . . . . . . : $clearLabel/],
                ],
                [action: 'addLabels', ext: " : add labels to check next option " + it + i,
                 parameters: [
                         issue: value,
                         labels: clearLabel
                 ]]
        ])
    }
}

['clearFieldsIfConditionalExecutionTrue'].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ': when condition return false' + it + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 ext       : 'labels should not clear when condition false : '+ it + i,
                 parameters: [
                         issue: value,
                         field: "Labels"
                 ],
                 data      : [/Labels  . . . . . . . . . . . : $clearLabel/],
                ],
        ])
    }
}

relatedIssuesMap.eachWithIndex{ key ,value,i ->
    gint.taskHelper.add(
            action: 'updateIssue', ext: " : set priority to return condition true for issues: " + i,
            parameters: [
                    issue: key,
                    priority: 'High'
            ]
    )
}

['clearFieldsIfConditionalExecutionTrue'].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ': when condition return true' + it + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 ext       : 'labels should clear when condition true'+ it + i,
                 parameters: [
                         issue: value,
                         field: "Labels"
                 ],
                 failData      : [/Labels  . . . . . . . . . . . : $clearLabel/],
                ],
                [action: 'addLabels', ext: " : add labels to check next option " + it + i,
                 parameters: [
                         issue: value,
                         labels: clearLabel
                 ]]
        ])
    }
}

[
        'runAsSpecificUser',
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ': clear components and ' + it + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action    : 'getIssueHistoryList',
                 ext       : ' : to check clear components : '+ it + i,
                 parameters: [
                         issue: value,
                         outputType: "text",
                         select: "Field:Component",
                         columns: "Author,'From String','To String'"
                 ],
                 data      : ["$testUser","$component", ""],
                ],
        ])
    }
}

def userInFieldAssignee = user

relatedIssuesMap.eachWithIndex { key, value, i ->
    gint.taskHelper.add([
            [action: 'assignIssue', ext: ': to check run as user in field assignee related issue: ' + i ,
            parameters: [
                    issue: value,
                    assignee: userInFieldAssignee
                    ],
            ],
            [action: 'assignIssue', ext: ': to check run as user in field assignee current issue: ' + i ,
            parameters: [
                    issue: key,
                    assignee: userInFieldAssignee
                    ]
            ]
    ])
}
['runAsUserInFieldAssignee'].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ': clear fixVersions : ' + it + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action    : 'getIssueHistoryList',
                 ext       : ' : to check clear fix version : '+ it + i,
                 parameters: [
                         issue: value,
                         outputType: "text",
                         select: "Field:Fix Version",
                         columns: "Author,'From String','To String'"
                 ],
                 data      : ["$userInFieldAssignee","$fixVersions", ""],
                ],
        ])
    }
}

[
        'clearFieldsIfConditionalExecutionTrue',
].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action: 'updateIssue', ext: ': change the reporter' + it + i,
                 parameters: [
                         issue: key,
                         labels: 'test_label',
                 ],
                ],
                [action    : 'transitionIssue', ext: ':after update issue' + it + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action    : 'getFieldValue',
                 ext       : 'after issue update'+ it + i,
                 parameters: [
                         issue: value,
                         field: "Labels"
                 ],
                 failData      : ["Labels  . . . . . . . . . . : test_label"],
                ],
        ])
    }
}

[
        'runAsUserInFieldReporter',
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ': clear assignee and ' + it + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action    : 'getIssueHistoryList',
                 ext       : ' : to check clear assignee : '+ it + i,
                 parameters: [
                         issue: value,
                         outputType: "text",
                         select: "Field:assignee",
                         columns: "Author,'From String','To String'"
                 ],
                 data      : ["$user","$assignee", ""],
                ],
        ])
    }

}

['runAsUserInFieldCreator'].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ': clear components and ' + it + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action    : 'getIssueHistoryList',
                 ext       : ' : to check clear affects version : '+ it + i,
                 parameters: [
                         issue: value,
                         outputType: "text",
                         select: "Field:Version",
                         columns: "Author,'From String','To String'"
                 ],
                 data      : ["$user","$affectsVersions", ""],
                ],
        ])
    }
}


