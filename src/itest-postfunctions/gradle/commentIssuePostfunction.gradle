import groovy.json.JsonSlurper
import java.nio.file.Paths

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
//apply from: 'common/setUp.gradle'
apply from: gint.resourceDirectory +'/src/common/testPostfunctions.gradle'

def info = gint.getJiraHelper().getServerInfoWithVerify() // Verify access to Jira instance otherwise end test if server not available
def project = 'AUTOMATION'//gint.getJiraHelper().getProjectKey()	//get project key using jira helper functions
def transition = 'commentIssuepf'
def workflow = project
def screen = project
def user = info.user
def userId = 'jmwe_qa'
def projectRole = 'jmwe_role'
def userGroup = 'jmwe_group'
gint.xmlReport =	true	//xml report generates in projects root directory
gint.verbose =	true

def jsonSlurper = new JsonSlurper();
def path = Paths.get(gint.directories.resource + "/resources/postfunctionsData/CommentIssuePostfunction${info?.isCloud ? "Cloud" : ""}.json")
def transitionFunctions = jsonSlurper.parse(path)
def functionKey =	info ?.isCloud ? 'com.innovalog.jmwe.jira-misc-workflow-extensions:commentIssue-function' : 'com.innovalog.jmwe.jira-misc-workflow-extensions:commentIssue-function'
def startStep = info?.isCloud ? '1':'11' // depends on workflow. '1' for cloud and '11' (To Do)for server works for custom jira workflow

createTransitionsWithFunctions(transitionFunctions, transition, functionKey, 'postfunction', startStep, workflow, screen, 0)
addUsers(userId)

// TC_01-check current issue
def currentIssue = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'createCurrentIssue')
transitionIssue(transition+0, {-> currentIssue[0]}, 0, 'commentCurrentIssue', null, null)
getComments({-> currentIssue[0]}, [0], user, 'TC_01-check current issue')

// TC_02-check the subtask of the parent issue
def parent = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'createParentIssue')
def subTask = createIssue(project,{[ type: 'Sub-task', summary: 'JMWE_Issue', parent: {-> parent[0]} ]}, 'createSubtask')
transitionIssue(transition+1, {-> parent[0]}, 0, 'commentToSubtask', null, null)
getComments({-> subTask[0]}, [0], user, 'TC_02-check the subtask of the parent issue')

// TC_03-check the parent issue of the current subtask
transitionIssue(transition+2, {-> subTask[0]}, 0, '--commentAddedToParentIssue', null, null)
getComments({-> parent[0]}, [0], user, 'TC_03-check the parent issue of the current subtask')

// TC_04-check the issue belongs to current epic
def epic = createIssue(project,{[ type: 'epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Epic"]}, 'createEpic')
def story = createIssue(project,{[ type: 'story', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic[0]} ]}, 'createStory')
transitionIssue(transition+3, {-> epic[0]}, 0, 'commentAddedToStoryOfEpic', null, null)
getComments({-> story[0]}, [0], user, 'TC_04-check the issue belongs to current epic')

// TC_05-check the epic of the current issue
transitionIssue(transition+4, {-> story[0]}, 0, 'commentAddedToEpicOfStory', null, null)
getComments({-> epic[0]}, [0], user, 'TC_05-check the epic of the current issue')

def linkIssue1 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'linkIssueAnyType1')
def linkIssue2 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'linkIssueAnyType2')
linkIssues([issue: { -> linkIssue1[0] }, toIssue: { -> linkIssue2[0] }, link: 'duplicates'], 'linkByAnyLinkType' )

// TC_06-check the issue link by any link type to current issue
transitionIssue(transition+5, {-> linkIssue1[0]}, 0, 'commentAddedToIssuesLinkByAnyLinkType', null, null)
getComments({-> linkIssue2[0]}, [0], user, 'TC_06-check the issue link by any link type to current issue')

def linkIssue3 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'linkIssueBlocksType1')
def linkIssue4 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'linkIssueBlocksType2')
linkIssues([issue: { -> linkIssue3[0] }, toIssue: { -> linkIssue4[0] }, link: 'blocks'], 'linkByBlocksLinkType' )

// TC_07-check the issue link by blocks link type to current issue
transitionIssue(transition+6, {-> linkIssue3[0]}, 0, 'commentAddedToIssuesLinkByBlocksLinkType', null, null)
getComments({-> linkIssue4[0]}, [0], user, 'TC_07-check the issue link by blocks link type to current issue')

// TC_08-check the issue return by groovy script[issue.getLinkedIssues()]
transitionIssue(transition+7, {-> linkIssue3[0]}, 0, 'commentAddedToIssuesReturnedByGroovyScript', null, null)
getComments({-> linkIssue4[0]}, [0], user, 'TC_08-check the issue return by groovy script')

// TC_09-check the issue return by jql expression
def IssueReturnByJqlSearch = createIssue(project, {[type: 'Task', summary: 'JMWE_Task']}, 'jqlSearch' )
transitionIssue(transition+8, {-> linkIssue4[0]}, 0, 'commentShouldBeAddToIssuesReturnedByJqlSearch', null, null)
getComments({-> IssueReturnByJqlSearch[0]}, [0], user, 'TC_09-check the issue return by jql expression')
 /*
// TC_10-checkCommentVisibleToGroups
def commentVisibleToGroups = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'commentVisibleToAdminGroups')
transitionIssue(transition+9, {-> commentVisibleToGroups[0]}, 0, 'commentShouldBeVisibleToJiraAdminsGroup', null, null)
checkCommentVisibleToUser( {-> commentVisibleToGroups[0]}, userId, user, 'TC_10-checkCommentVisibleToGroups')

// TC_11-checkCommentVisibleToProjectRoles
def  commentVisibleToAdminProjectRoles = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'commentVisibleToAdminProjectRoles')
transitionIssue(transition+10, {-> commentVisibleToAdminProjectRoles[0]}, 0, 'commentVisibleToAdminProjectRoles', null, null)
checkCommentVisibleToUser( {-> commentVisibleToAdminProjectRoles[0]}, userId, user, 'TC_11-checkCommentVisibleToProjectRoles')
*/
// TC_12-runAsUser specific user_jmwe_qa
def runAsUser_specificUser = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue_User']}, 'runAsUser_specificUser')
transitionIssue(transition+11, {-> runAsUser_specificUser[0]}, 0, 'runAsUser_specificUser', null, null)
getComments({-> runAsUser_specificUser[0]}, 0, userId, 'TC_12-runAsUser specific user_jmwe_qa')

// TC_13-runAsUser_user return by script : issue.get('reporter')
def runAsUser_byScript = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue_User', reporter: userId]}, 'runAsUser_byScript')
transitionIssue(transition+12, {-> runAsUser_byScript[0]}, 0, 'runAsUser_byScript', null, null)
getComments({-> runAsUser_byScript[0]}, 0, userId, 'TC_13-runAsUser_user return by script')

// TC_14-runAsUser_user in field : userField:assignee
def runAsUser_fromField = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue_User', assignee: userId]}, 'runAsUser_fromField')
transitionIssue(transition+13, {-> runAsUser_fromField[0]}, 0, 'runAsUser_fromField', null, null)
getComments({-> runAsUser_fromField[0]}, 0, userId, 'TC_14-runAsUser_user in field')

// TC_15-check conditional execution_True (issue.get('issuetype')?.name == 'Story')
def condExecTrue = createIssue(project,{[ type: 'story', summary: 'JMWE_Issue']}, 'createStoryForConditionalExcution')
transitionIssue(transition+14, {-> condExecTrue[0]}, 0, 'commentIssueIfConditionalExecTrue', null, null)
getComments({-> condExecTrue[0]}, 0, user, 'TC_15-check conditional execution_True')
