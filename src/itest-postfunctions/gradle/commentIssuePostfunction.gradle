buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
//apply from: gint.resourceDirectory +'/src/common/utils.gradle'
apply from: gint.resourceDirectory +'/src/itest-postfunctions/postfunction.gradle'

def relatedIssue = info?.isCloud ? relatedIssueCloud : relatedIssueServer

def functionKey = info?.isCloud ? 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__CommentIssueFunction' : 'com.innovalog.jmwe.jira-misc-workflow-extensions:commentIssue-function'

def commentVisibility = [
        notSelected : [ "restrictToGroup=", "restrictToProjectRole=" ],
        jiraAdminGroups : [ "restrictToGroup=$jiraAdminGrooup", "restrictToProjectRole=" ],
        jiraAdminRoles : [ "restrictToGroup=", "restrictToProjectRole=$jiraAdminRoleId" ],
        jiraSoftwareUsers : ["restrictToGroup=$testGroup", "restrictToProjectRole="]
]

relatedIssue.eachWithIndex { key, value, i ->
    def transition = "comment_added_by_template_" + i
    def server = defaultFieldsServer + "valueType=template" + "value=$transition" + "selectedLinkType=$value"
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.false,\"targetIssue\":\"$value\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",$runAsUser.currentUser}"
    addTransitionFunction( transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = "comment_added_by_expression_" + i
    def server = defaultFieldsServer + "valueType=expression" + "value=$groovyExpression.getDescription" + "selectedLinkType=$value"
    if(!isCloud) {
        addTransitionFunction(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    }
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'addCommentIfConditionTrue' + i
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.true,\"targetIssue\":\"$value\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",$runAsUser.currentUser}"
    def server = defaultFieldsServer + "valueType=template" + "value=$transition" + commentVisibility.notSelected+  "selectedLinkType=$value" + conditionalExecution.true + runAsUser.currentUser
    addTransitionFunction( transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'visibleToJiraAdminRoles'+i
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.false,\"targetIssue\":\"$value\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",\"restrictToProjectRoleId\":$jiraAdminRoleId,$runAsUser.currentUser}"
    def server = defaultFieldsServer + "valueType=template" + "value=$transition" + commentVisibility.jiraAdminRoles +  "selectedLinkType=$value" + conditionalExecution.false + runAsUser.currentUser
    addTransitionFunction( transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'visibleToJiraSoftwareUsers' + i
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.false,\"targetIssue\":\"$value\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"$testGroupIdCloud\",$runAsUser.currentUser}"
    def server = defaultFieldsServer + "valueType=template" + "value=$transition" + commentVisibility.jiraSoftwareUsers +  "selectedLinkType=$value" + conditionalExecution.false + runAsUser.currentUser
    addTransitionFunction( transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

runAsUser.remove("currentUser")

runAsUser.eachWithIndex { usersType, fieldValues, idx ->
    relatedIssue.eachWithIndex { key, value, i ->
        def transition = "runAs" + usersType + i
        def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.false,\"targetIssue\":\"$value\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",$fieldValues}"
        def server = defaultFieldsServer + "valueType=template" + "value=$transition" + commentVisibility.notSelected + "selectedLinkType=$value" + conditionalExecution.false + fieldValues
        addTransitionFunction(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
        if (!isCloud) {
            moveTransitionFunction(transition, 4)
        }
    }
}

createWorkflowScheme()
createProject()


def currentIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'currentIssue')
def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[]}], 'Sub-task')
def epic = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic')
def issueBelongsToEpic = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic[]} ], 'BelongsToEpic')
def initiative = createIssue([type: 'Initiative', summary: 'JMWE_Issue' ], 'Initiative')
def epic_initiative = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative')
def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def blocks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'blocks')
def clones = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'clones')
def duplicates = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'duplicates')
def relatesTo = createIssue([type: 'Task', summary: 'JMWE_Task'], 'relatesTo')
def jqlIssue = createIssue([type: 'Task', summary: 'JQL_ISSUE'], 'jqlIssue')
updateIssue([issue: {->epic_initiative[]}, field: "Parent Link", value: {->initiative[]}], "parent initiative child epic")

def linkIssuesMap = [
        blocks : {->blocks[]},
        "$clonesLinkType" : {->clones[]},
        duplicates : {->duplicates[]},
        'relates to': {->relatesTo[]}
]

linkIssuesMap.eachWithIndex { key, value, i ->
    linkIssue([issue: {->issueLinks[]}, toIssue: value, link: "$key"], key)
}

def relatedIssuesMap = [
        {->currentIssue[]} : {->currentIssue[]},
        {->parent[]} : {->subtask[]},
        {->subtask[]} : {->parent[]},
        {->epic[]} : {->issueBelongsToEpic[]},
        {->issueBelongsToEpic[]} : {->epic[]},
        {-> initiative[]} : {->epic_initiative[]},
        {->epic_initiative[]} : {-> initiative[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->blocks[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->clones[]},
        {->clones[]} : {->issueLinks[]},
        {->issueLinks[]} : {->duplicates[]},
        {->duplicates[]} : {->issueLinks[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->relatesTo[]} : {->issueLinks[]},
        {->issueLinks[]} : {->jqlIssue[]}
]

[
        'comment_added_by_template_',
        'runAsspecificUser',
        'runAsuserInFieldReporter',
        'runAsuserInFieldCreator',
        'runAsuserFromScript',
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        def getCurrentUserName1 = info?.isCloud? info?.userDisplayName : user
        def transition = it+i
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 ext: ":By $transition:",
                 sleep: info?.isCloud ? 8000 : 0,
                 parameters: [
                         issue     : key,
                         transition: transition,
                 ],
                ],
        ])
        if(it == 'comment_added_by_template_') {
            gint.taskHelper.add([
                    [action    : 'getComments',
                     ext       : ":verify the comment added by template after transition issue with :" +transition,
                     sleep     : info?.isCloud ? 8000 : 0,
                     parameters: [
                             issue: value
                     ],
                     data      : [ /$transition/  ],
                    ]
            ])
        }
        else {
            gint.taskHelper.add([
                    [action    : 'getComments',
                     ext       : ":verify the comment added by template after transition issue with :" + transition,
                     sleep     : info?.isCloud ? 8000 : 0,
                     parameters: [
                             issue: value
                     ],
                     data      : [/$getCurrentUserName1 added a comment on/,
                                  /$transition/
                     ],
                    ]
            ])
        }
    }
}

[
        'runAsuserInFieldAssignee'
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        def transition = it+i
        def getCurrentUserName1 = info?.isCloud? info?.userDisplayName : user
        gint.taskHelper.add([
                [action: 'setFieldValue' ,
                 ext: " : Of assignee of target issue to $testUser before transition issue with: " + transition,
                 sleep: info?.isCloud ? 5000 : 0,
                 parameters: [
                         issue: value,
                         field : "Assignee",
                         value: testUser
                 ],
                ],
                [action: 'setFieldValue' ,
                 ext: " : Of assignee of current issue to $testUser before transition issue with: " + transition,
                 sleep: info?.isCloud ? 5000 : 0,
                 parameters: [
                         issue: key,
                         field : "Assignee",
                         value: testUser
                 ],
                ],
                [action    : 'transitionIssue',
                 ext: ":With transition $transition:when user in field assignee is $testUser",
                 sleep: info?.isCloud ? 5000 : 0,
                 parameters: [
                         issue     : key,
                         transition: transition,
                 ],
                ],
                [action: 'getComments',
                 ext: ":After transition issue with_ $transition and user in field assignee is $testUser:",
                 sleep: info?.isCloud ? 5000 : 0,
                 parameters: [
                         issue: value
                 ],
                 data:[   /$testUser added a comment on/,
                          /$transition/
                 ],
                ]
        ])
    }
}

[
        'comment_added_by_expression_'
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        def transition = it+i
        if (!isCloud) {
            gint.taskHelper.add([
                    [action    : "setFieldValue",
                     sleep: defaultSleepTime,
                     ext: ":Of description of target issue:before transition issue with_ $transition ",
                     parameters: [
                             issue: key,
                             field: "Description",
                             value: transition
                     ]
                    ],
                    [action    : 'transitionIssue',
                     ext       : ":by transition_ $transition ",
                     sleep     : defaultSleepTime,
                     parameters: [
                             issue     : key,
                             transition: transition,
                     ],
                    ],
                    [action    : 'getComments',
                     ext       : " : verify comment added after transition issue with $transition :",
                     sleep     : defaultSleepTime,
                     parameters: [
                             issue: value
                     ],
                     data      : [/$getCurrentUserName added a comment on/,
                                  /$transition/
                     ],
                    ]
            ])
        }
    }
}

[
        'visibleToJiraSoftwareUsers',
].each {
    if (!isCloud) {
        relatedIssuesMap.eachWithIndex { key, value, i ->
            def transition = it + i
            gint.taskHelper.add([
                    [action    : 'transitionIssue',
                     ext       : "by $transition:",
                     sleep     : defaultSleepTime,
                     parameters: [
                             issue     : key,
                             transition: transition,
                     ],
                    ],
                    [action    : 'getComments',
                     ext       : ": verify the comment added after transition issue with:$transition",
                     sleep     : defaultSleepTime,
                     parameters: [
                             issue: value
                     ],
                     failData  : [/$transition/],
                    ]
            ])
        }
    }
}

[
        'visibleToJiraAdminRoles',
].each {
    if (!isCloud) {
        relatedIssuesMap.eachWithIndex { key, value, i ->
            def transition = it + i
            gint.taskHelper.add([
                    [action    : 'transitionIssue',
                     ext       : ":By transition_ $transition:",
                     sleep     : defaultSleepTime,
                     parameters: [
                             issue     : key,
                             transition: it + i,
                     ],
                    ],
                    [action    : 'getComments',
                     ext       : ":Verify comment added by postfunction after transition issue with_ $transition:",
                     sleep     : defaultSleepTime,
                     parameters: [
                             issue: value
                     ],
                     data      : [/$transition/],
                    ]
            ])
        }
    }
}

[
        'addCommentIfConditionTrue'
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        ["Low","High"].eachWithIndex { priority, idx ->
            def transition = it + i
        gint.taskHelper.add([
                [action: 'setFieldValue' ,
                 ext: " : Of priority to $priority to current issue before transition issue with $transition:",
                 sleep: defaultSleepTime,
                 parameters: [
                         issue: key,
                         field : "Priority",
                         value: priority
                 ],
                ],
                [action    : 'transitionIssue',
                 ext: ":by transition_ $transition _when priority of issue is_ $priority:",
                 sleep: defaultSleepTime,
                 parameters: [
                         issue     : key,
                         transition: transition,
                 ],
                ],
        ])
                if(priority == "High") {
                gint.taskHelper.add([
                        [action      : 'getComments',
                         ext         : ":verify the comments added by postfunction after transition issue with_ $transition _when issue priority is_ $priority:",
                         sleep       : defaultSleepTime,
                         parameters  : [
                                 issue: value
                         ],
                         data        : [/$transition/],
                        ]
                ])
                } else {
                    gint.taskHelper.add([
                            [action      : 'getComments',
                             ext         : ":verify the comments added by postfunction after transition issue with_ $transition _when issue priority is_ $priority:",
                             sleep       : defaultSleepTime,
                             parameters  : [
                                     issue: value
                             ],
                             failData        : [/$transition/],
                            ]
                    ])
                }
    }
}
}





