buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/utils.gradle'

tearDown()
addWorkflow()

def relatedIssue = info?.isCloud ? relatedIssueCloud : relatedIssueServer
def functionKey = info?.isCloud ? functionKey.commentIssuePostfunctionCloud : functionKey.commentIssuePostfunctionServer

def testUser = info?.isCloud ? cloudUser : serverUser

def templateComment = "test comment from template"
def expressionComment = "expression"

def commentIssuePfFields = [
        "restrictToInternal=no",
        "sendNotification=no",
        "correlationId=",
]
def defaultFieldsCloud = [
        "postFunction.id=18b36491-f556-48cd-b476-7b82f02c7249",
]
def commentType = [
        template : [ "valueType=template", "value=template" ],
        expression : [ "valueType=expression", "value=$groovyExpression.getDescription" ],
        runAsSpecificUser : [ "valueType=template", "value=runAsSpecificUser" ],
        runAsUserInFieldAssignee : [ "valueType=template", "value=runAsUserInFieldAssignee" ],
        runAsUserInFieldReporter: [ "valueType=template", "value=runAsUserInFieldReporter" ],
        runAsUserInFieldCreator : [ "valueType=template", "value=runAsUserInFieldCreator" ],
        runAsUserFromScript : [ "valueType=template", "value=runAsUserFromScript" ],
        visibleToJiraSoftwareUsers : ["valueType=template", "value=visibleToJiraSoftwareUsers"],
        visibleToJiraAdminRoles: ["valueType=template", "value=visibleToJiraAdminRoles"],
        addCommentIfConditionTrue : ["valueType=template", "value=addCommentIfConditionTrue"]
]
def commentVisibility = [
        notSelected : [ "restrictToGroup=", "restrictToProjectRole=" ],
        jiraAdminGroups : [ "restrictToGroup=$jiraAdminGrooup", "restrictToProjectRole=" ],
        jiraAdminRoles : [ "restrictToGroup=", "restrictToProjectRole=$jiraAdminRoleId" ],
        jiraSoftwareUsers : ["restrictToGroup=$testGroup", "restrictToProjectRole="]
]

def commentTypeOptionServer = [
        template : commentIssuePfFields + commentType.template + commentVisibility.notSelected +  conditionalExecution.false + runAsUser.currentUser,
        expression: commentIssuePfFields + commentType.expression + commentVisibility.notSelected+ conditionalExecution.false + runAsUser.currentUser
]
def commentTypeOptionCloud = [
        template: defaultFieldsCloud ,
]
def commentTypeOption = info?.isCloud ? commentTypeOptionCloud : commentTypeOptionServer

commentTypeOption.eachWithIndex{ transition, fields, number ->
    relatedIssue.eachWithIndex { key, value, i ->
        def server = fields + "selectedLinkType=$value"
        def cloud = fields + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",\"runAsType\":\"currentUser\"}"
        addTransitionFunction( transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    }
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'addCommentIfConditionTrue'
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":true,\"targetIssue\":\"$value\",\"conditionalExecutionScript\":\"$nunjuckExpression.checkPriorityHigh\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",\"runAsType\":\"currentUser\"}"
    def server = commentIssuePfFields + commentType.addCommentIfConditionTrue + commentVisibility.notSelected+  "selectedLinkType=$value" + conditionalExecution.true + runAsUser.currentUser
    addTransitionFunction( transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'runAsSpecificUser'
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",\"runAsType\":\"thisUser\",\"runAs\":\"accountId:$cloudUserId\"}"
    def server = commentIssuePfFields + commentType.runAsSpecificUser + commentVisibility.notSelected +  "selectedLinkType=$value" + conditionalExecution.false + runAsUser.specificUser
    addTransitionFunction( transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    moveTransitionFunction ( transition + i, 4)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'runAsUserInFieldAssignee'
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",\"runAsType\":\"userField\",\"runAsField\":\"assignee\"}"
    def server = commentIssuePfFields + commentType.runAsUserInFieldAssignee + commentVisibility.notSelected +  "selectedLinkType=$value" + conditionalExecution.false + runAsUser.userInFieldAssignee
    addTransitionFunction( transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    moveTransitionFunction ( transition + i, 4)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'runAsUserInFieldReporter'
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",\"runAsType\":\"userField\",\"runAsField\":\"reporter\"}"
    def server = commentIssuePfFields + commentType.runAsUserInFieldReporter + commentVisibility.notSelected +  "selectedLinkType=$value" + conditionalExecution.false + runAsUser.userInFieldReporter
    addTransitionFunction( transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    moveTransitionFunction ( transition + i, 4)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'runAsUserInFieldCreator'
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",\"runAsType\":\"userField\",\"runAsField\":\"creator\"}"
    def server = commentIssuePfFields + commentType.runAsUserInFieldCreator + commentVisibility.notSelected +  "selectedLinkType=$value" + conditionalExecution.false + runAsUser.userInFieldCreator
    addTransitionFunction( transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    moveTransitionFunction ( transition + i, 4)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'runAsUserFromScript'
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",\"runAsType\":\"userFromScript\",\"runAsScript\":\"$nunjuckExpression.returnsReporter\"}"
    def server = commentIssuePfFields + commentType.runAsUserFromScript + commentVisibility.notSelected +  "selectedLinkType=$value" + conditionalExecution.false + runAsUser.userFromScript
    addTransitionFunction( transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    moveTransitionFunction ( transition + i, 4)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'visibleToJiraAdminRoles'
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",\"restrictToProjectRoleId\":$jiraAdminRoleId,\"runAsType\":\"currentUser\"}"
    def server = commentIssuePfFields + commentType.visibleToJiraAdminRoles + commentVisibility.jiraAdminRoles +  "selectedLinkType=$value" + conditionalExecution.false + runAsUser.currentUser
    addTransitionFunction( transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'visibleToJiraSoftwareUsers'
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"$testGroupIdCloud\",\"runAsType\":\"currentUser\"}"
    def server = commentIssuePfFields + commentType.visibleToJiraSoftwareUsers + commentVisibility.jiraSoftwareUsers +  "selectedLinkType=$value" + conditionalExecution.false + runAsUser.currentUser
    addTransitionFunction( transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

createWorkflowScheme()
associateWorkflow(workflow)
createProject()

// set issue status to In Progress

def current = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'current')
def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[]}], 'Sub-task')
def epic = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic')
def issueBelongsToEpic = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic[]} ], 'BelongsToEpic')
def initiative = createIssue([type: 'Initiative', summary: 'JMWE_Issue' ], 'Initiative')
def epic_initiative = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative')
def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def blocks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'blocks')
def isBlockedBy = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'isBlockedBy')
def clones = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'clones')
def isClonedBy = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'isClonedBy')
def duplicates = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'duplicates')
def isDuplicatedBy = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'isDuplicatedBy')
def relatesTo = createIssue([type: 'Task', summary: 'JMWE_Task'], 'relatesTo')
def jqlIssue = createIssue([type: 'Task', summary: 'JQL_ISSUE'], 'jqlIssue')

updateIssue([issue: {->epic_initiative[]}, field: "Parent Link", value: {->initiative[]}], "parent initiative child epic")

def linkIssuesMap = [

        blocks : {->blocks[]},
        'is blocked by' : {->isBlockedBy[]},
        clones : {->clones[]},
        'is cloned by' : {->isClonedBy[]},
        duplicates : {->duplicates[]},
        'is duplicated by' : {->isDuplicatedBy[]},
        'relates to': {->relatesTo[]}
]

linkIssuesMap.eachWithIndex { key, value, i ->
    linkIssue([issue: {->issueLinks[]}, toIssue: value, link: "$key"], key)
}

def relatedIssuesMap = [
        {->current[]} : {->current[]},
        {->parent[]} : {->subtask[]},
        {->subtask[]} : {->parent[]},
        {->epic[]} : {->issueBelongsToEpic[]},
        {->issueBelongsToEpic[]} : {->epic[]},
        {-> initiative[]} : {->epic_initiative[]},
        {->epic_initiative[]} : {-> initiative[]},
        {->issueLinks[]} : {->blocks[]},
        {->issueLinks[]} : {->blocks[]},
        {->issueLinks[]} : {->isBlockedBy[]},
        {->issueLinks[]} : {->clones[]},
        {->issueLinks[]} : {->isClonedBy[]},
        {->issueLinks[]} : {->duplicates[]},
        {->issueLinks[]} : {->isDuplicatedBy[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->issueLinks[]} : {->jqlIssue[]},
]

relatedIssuesMap.eachWithIndex{ key, value, i ->
    gint.taskHelper.add(
            action: 'updateIssue' , ext: " : add description to add in comment : " + i,
            parameters: [
                    issue: value,
                    description : expressionComment
            ]
    )
}

[
        'template',
        'runAsUserInFieldReporter',
        'runAsUserInFieldCreator',
        'runAsUserFromScript',
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: it + ': add comment by template :' + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action: 'getComments', ext: " : add comment by template :" + it + i,
                 parameters: [
                         issue: value
                 ],
                 data:[   /$user added a comment on/,
                         /$it/
                 ],
                ]
        ])
    }
}

[
        'visibleToJiraSoftwareUsers',
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: it + ': ' + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action: 'getComments', ext: " : " + it + i,
                 parameters: [
                         issue: value
                 ],
                 failData:[ /$it/  ],
                ]
        ])
    }
}

[
        'visibleToJiraAdminRoles',
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: it + ': ' + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action: 'getComments', ext: " : " + it + i,
                 parameters: [
                         issue: value
                 ],
                 data:[ /$it/  ],
                ]
        ])
    }
}

['addCommentIfConditionTrue'].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: it + ': when conditional validation false do not add comment: ' + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action: 'getComments', ext: it +" : when conditional validation false do not add comment :" + i,
                        parameters: [
                                issue: value
                        ],
                 failData:[/$it/],
                ]
        ])
    }
}

relatedIssuesMap.eachWithIndex{ key, value, i ->
    gint.taskHelper.add([
            [action: 'updateIssue' , ext: " : target issue_ to check conditional validation and assignee field : " + i,
            parameters: [
                    issue: value,
                    priority : 'High',
                    assignee: testUser
            ],
            ],
            [action: 'updateIssue' , ext: " : current issue_ to check conditional validation and assignee field : " + i,
             parameters: [
                     issue: key,
                     priority : 'High',
                     assignee: testUser
             ],
            ],
            ]
    )
}
['addCommentIfConditionTrue'].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: it + ': when conditional validation true do add comment: ' + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action: 'getComments', ext: it +" : when conditional validation true do add comment :" + i,
                 parameters: [
                         issue: value
                 ],
                 data:[/$it/],
                ]
        ])
    }
}
[
        'runAsSpecificUser',
        'runAsUserInFieldAssignee'
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: it + ' :' + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
                [action: 'getComments', ext: " : " + it + i,
                 parameters: [
                         issue: value
                 ],
                 data:[   /$testUser added a comment on/,
                          /$it/
                 ],
                ]
        ])
    }
}


