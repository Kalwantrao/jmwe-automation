buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/utils.gradle'

def functionKey = 'com.innovalog.jmwe.jira-misc-workflow-extensions:AssignIssue-function'

def relatedIssue = info?.isCloud ? relatedIssueCloud : relatedIssueServer

def selectUser = [
        currentUser : [ "assignmentType=currentUser"  ],
        Reporter : [ "assignmentType=reporter" ],
        ProjectLead : [ "assignmentType=projectLead" ],
        //UserReturnFromScript: ["assignmentType=script","script=$groovyExpression.returnsReporter"],
        //UserWhoIsDefaultAssigneeOfProject: [ "assignmentType=projectDefault"],
        //UserWhoLastCommented: ["assignmentType=lastCommenter"],
        //UserByUserName : ["assignmentType=specificUser","user=$jmwe_qaUserId"],
        //UserWhoIsComponentLead : ["assignmentType=componentLead","component=$component1Id"],
        //ReturnFromUserObjectFieldAssignee:["assignmentType=userFromField", "field=assignee"],
        ReturnFromUserObjectFieldReporter:["assignmentType=userFromField", "field=reporter"],
        ReturnFromUserObjectFieldCreator:["assignmentType=userFromField", "field=creator"],
        //LastAdminRoleMember: [ "assignmentType=lastRoleMember", "role=$jiraAdminRoleId", "multipleUserBehavior=alphabetical"],
        //TestRoleMember: ["assignmentType=roleMember", "role=$testProjectRoleId", "multipleUserBehavior=alphabetical"],
        AdminRoleMember: ["assignmentType=roleMember", "role=$jiraAdminRoleId", "multipleUserBehavior=alphabetical"],
]

def throwException = [
        no : ["throwIfNoMatch="],
        yes : ["throwIfNoMatch=yes"],
]

def assignmentBehavior = [
        force : [ "assignmentBehavior=force" ],
        automatic : [ "useValuesFromTransitionedIssue=","assignmentBehavior=onlyAutomatic" ],
        ifTransitionValueChanged : [ "useValuesFromTransitionedIssue", "assignmentBehavior=preferTransition" ],
        ifTransitionUserValueIsNotRoleMember : [ "useValuesFromTransitionedIssue","assignmentBehavior=ifRoleMember" ]
]

def skipIfAssigned = [
        no : [ "skipIfAlreadyAssigned=no" ],
        yes : [ "skipIfAlreadyAssigned=yes" ]
]

def multipleUser = [
        alphabetical : [ "multipleUserBehavior=alphabetical" ],
        roundRobin: [ "multipleUserBehavior=roundRobin" ],
        leastBusy : [ "multipleUserBehavior=leastBusy" ],
        random : [ "multipleUserBehavior=random" ],
        scripted : [ "multipleUserBehavior=scripted", "multipleUsersScript=$groovyExpression.returnsReporter" ]
]

selectUser.eachWithIndex { userType, userValues, userIndex ->
    relatedIssue.take(1).eachWithIndex { targetIssue, value, issueIndex ->
        def transition = "assign_current_issue_to_$userType"
        def fields = defaultFieldsServer + userValues + "selectedLinkType=$value" + throwException.no + assignmentBehavior.force + skipIfAssigned.no + conditionalExecution.false
        if(!isCloud) {
            addTransitionFunction(transition, 'postfunction', fields, functionKey)
        }
    }
}

relatedIssue.eachWithIndex { targetIssue, value, issueIndex ->
    def transition = "assign_issue_to_currentUser" + issueIndex
    def fields = defaultFieldsServer + selectUser.currentUser + "selectedLinkType=$value" + throwException.no + assignmentBehavior.force + skipIfAssigned.no + conditionalExecution.false
    if(!isCloud) {
        addTransitionFunction(transition, 'postfunction', fields, functionKey)
    }
}

[
        'assign_currentIssue_issue_to_currentUser_if_condition_true'
].each {
    relatedIssue.take(1)eachWithIndex { targetIssue, value, issueIndex ->
        def fields = defaultFieldsServer + selectUser.currentUser + "selectedLinkType=$value" + throwException.no + assignmentBehavior.force + skipIfAssigned.no + conditionalExecution.true
        if(!isCloud) {
            addTransitionFunction(it + issueIndex, 'postfunction', fields, functionKey)
        }
    }
}

createWorkflowScheme()
createProject()

addComponent(1)

def current = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'current')
def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[]}], 'Sub-task')
def epic = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic')
def issueBelongsToEpic = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic[]} ], 'BelongsToEpic')
def initiative = createIssue([type: 'Initiative', summary: 'JMWE_Issue' ], 'Initiative')
def epic_initiative = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative')
def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def blocks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'blocks')
def clones = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'clones')
def duplicates = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'duplicates')
def relatesTo = createIssue([type: 'Task', summary: 'JMWE_Task'], 'relatesTo')
def jqlIssue = createIssue([type: 'Task', summary: 'JQL_ISSUE'], 'jqlIssue')

updateIssue([issue: {->epic_initiative[]}, field: "Parent Link", value: {->initiative[]}], "parent initiative child epic")

def linkIssuesMap = [
        blocks : {->blocks[]},
        "$clonesLinkType" : {->clones[]},
        duplicates : {->duplicates[]},
        'relates to': {->relatesTo[]}
]

linkIssuesMap.eachWithIndex { key, value, i ->
    if(!isCloud) {
        linkIssue([issue: { -> issueLinks[] }, toIssue: value, link: "$key"], key)
    }
}

def relatedIssuesMap = [
        {->current[]} : {->current[]},
        {->parent[]} : {->subtask[]},
        {->subtask[]} : {->parent[]},
        {->epic[]} : {->issueBelongsToEpic[]},
        {->issueBelongsToEpic[]} : {->epic[]},
        {-> initiative[]} : {->epic_initiative[]},
        {->epic_initiative[]} : {-> initiative[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->blocks[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->clones[]},
        {->clones[]} : {->issueLinks[]},
        {->issueLinks[]} : {->duplicates[]},
        {->duplicates[]} : {->issueLinks[]},
        {->relatesTo[]} : {->issueLinks[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->issueLinks[]} : {->jqlIssue[]}
]

[inactiveAdmin, testAdmin].collect{
    if(!isCloud) {
        gint.taskHelper.add(
                action: 'removeProjectRoleActors',
                ext: ":remove user $it from Administrator role to check_ASSIGN_ISSUE_PF: ",
                parameters: [
                        project: projectName,
                        role   : 'Administrators',
                        userId : it
                ]
        )
    }
}

[testUser1,testUser2].collect{
    if(!isCloud) {
        gint.taskHelper.add(
                action: 'removeProjectRoleActors',
                ext: ": remove user $it from $testRole _to check ASSIGN_ISSUE_PF",
                parameters: [
                        project: projectName,
                        role   : testRole,
                        userId : it
                ]
        )
    }
}

[testUser1,testUser2].collect{
    if(!isCloud) {
        gint.taskHelper.add(
                action: 'addProjectRoleActors',
                ext: ": add user $it to specific role $testRole _to check ASSIGN_ISSUE_PF",
                parameters: [
                        project: projectName,
                        role   : testRole,
                        userId : it
                ]
        )
    }
}

relatedIssuesMap.eachWithIndex{ key, value, i ->
    if(!isCloud) {
        gint.taskHelper.add(
                action: 'addComment',
                ext: " : to check ASSIGN_ISSUE_PF_user who last commented option: " + i,
                parameters: [
                        issue  : value,
                        comment: 'add comment to  check lastCommentedUserOption'
                ]
        )
    }
}

selectUser.eachWithIndex { userType, userValues, userIndex ->
    def transition = "assign_current_issue_to_$userType"
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        if(!isCloud) {
            gint.taskHelper.add([
                    [action    : 'updateIssue',
                     ext       : ": unassign current issue_ASSIGN_ISSUE_PF :" + transition,
                     parameters: [
                             issue   : value,
                             assignee: " ",
                     ]
                    ],
                    [action    : 'transitionIssue',
                     ext       : ":by_ $transition:ASSIGN_ISSUE_PF_:",
                     parameters: [
                             issue     : key,
                             transition: transition,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     ext       : ":Of current issue_after transition issue by:$transition:ASSIGN_ISSUE_PF_:",
                     parameters: [
                             issue: value,
                             field: "Assignee"
                     ],
                     data      : ["Assignee  . . . . . . . . . . : $user"],
                    ],
            ])
        }
    }
}

relatedIssuesMap.eachWithIndex { key, value, i ->
    def transition = "assign_issue_to_currentUser" + i
    if(!isCloud) {
        gint.taskHelper.add([
                [action    : 'updateIssue',
                 ext       : ": unassign current issue_ASSIGN_ISSUE_PF :" + transition,
                 parameters: [
                         issue   : value,
                         assignee: " ",
                 ]
                ],
                [action    : 'transitionIssue',
                 ext       : ":by_ $transition:ASSIGN_ISSUE_PF_:",
                 parameters: [
                         issue     : key,
                         transition: transition,
                 ]
                ],
                [action    : 'getFieldValue',
                 ext       : ":Of current issue_after transition issue by:$transition:ASSIGN_ISSUE_PF_:",
                 parameters: [
                         issue: value,
                         field: "Assignee"
                 ],
                 data      : ["Assignee  . . . . . . . . . . : $user"],
                ],
        ])
    }
}

[
        'assign_currentIssue_issue_to_currentUser_if_condition_true'
].each {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        def transition = it + i
        if (!isCloud) {
            gint.taskHelper.add([
                    [action    : 'updateIssue',
                     ext       : ": unassign current issue_ASSIGN_ISSUE_PF :" + transition,
                     parameters: [
                             issue   : value,
                             assignee: " ",
                     ]
                    ],
                    [action: 'setFieldValue',
                    ext: ":Set priority of issue to Low_before transition_ $transition:",
                    parameters: [
                            issue: key,
                            field: "Priority",
                            value: 'Low'
                    ]
                    ],
                    [action    : 'transitionIssue',
                     ext       : ":by_ $transition:ASSIGN_ISSUE_PF_:when condition false:",
                     parameters: [
                             issue     : key,
                             transition: transition,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     ext       : ":Of current issue_after transition issue by:$transition:ASSIGN_ISSUE_PF_:when condition false:",
                     parameters: [
                             issue: value,
                             field: "Assignee"
                     ],
                     failData      : ["Assignee  . . . . . . . . . . : $user"],
                    ],
                    [action: 'setFieldValue',
                     ext: ":Set priority of issue to High_before transition_ $transition:",
                     parameters: [
                             issue: key,
                             field: "Priority",
                             value: 'High'
                     ]
                    ],
                    [action    : 'transitionIssue',
                     ext       : ":by_ $transition:ASSIGN_ISSUE_PF_:when condition true:",
                     parameters: [
                             issue     : key,
                             transition: transition,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     ext       : ":Of current issue_after transition issue by:$transition:ASSIGN_ISSUE_PF_:when condition true:",
                     parameters: [
                             issue: value,
                             field: "Assignee"
                     ],
                     data      : ["Assignee  . . . . . . . . . . : $user"],
                    ],
            ])
        }
    }
}
/*
[
        'assign_issue_to_currentUser',
        'assign_issue_to_Reporter',
        'assign_issue_to_ReturnFromUserObjectFieldReporter',
        'assign_issue_to_ReturnFromUserObjectFieldCreator',
        'assign_issue_to_UserReturnFromScript',
        'assign_issue_to_UserWhoLastCommented',
        'assign_issue_to_AdminRoleMember',
        'assign_issue_to_ProjectLead',
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        if(!isCloud) {
            gint.taskHelper.add([
                    [action    : 'updateIssue',
                     ext       : ': unassign current issue to check next options_ASSIGN_ISSUE_PF :' + it + i,
                     parameters: [
                             issue   : value,
                             assignee: " ",
                     ]
                    ],
                    [action    : 'transitionIssue',
                     ext       : ': check ASSIGN_ISSUE_PF_when condition false:' + it + i,
                     parameters: [
                             issue     : key,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     ext       : ":ASSIGN_ISSUE_PF_ $it _ with default options:" + i,
                     parameters: [
                             issue: value,
                             field: "Assignee"
                     ],
                     data      : ["Assignee  . . . . . . . . . . : $user"],
                    ],
            ])
        }
    }
}

[
        // 'assign_issue_to_currentUser_if_condition_true'
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        if(!isCloud) {
            gint.taskHelper.add([
                    [action    : 'updateIssue',
                     ext       : ": change the priority of current issue to Low to check $it _when condition false :"+ i,
                     parameters: [
                             issue   : key,
                             priority: "Low",
                     ]
                    ],
                    [action    : 'updateIssue',
                     ext       : ": unassign target issue to check $it _when condition false:"   + i,
                     parameters: [
                             issue   : value,
                             assignee: " ",
                     ]
                    ],
                    [action    : 'transitionIssue',
                     ext       : ": to check ASSIGN_ISSUE_PF_ $it _when condition false:" + i,
                     parameters: [
                             issue     : key,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     ext       : ": to check ASSIGN_ISSUE_PF_ $it _when condition false:" + i,
                     parameters: [
                             issue: value,
                             field: "Assignee"
                     ],
                     failData      : ["Assignee  . . . . . . . . . . : $user"],
                    ],
                    [action    : 'updateIssue',
                     ext       : ": change the priority of current issue to High to check $it _when condition true :"+ i,
                     parameters: [
                             issue   : key,
                             priority: "High",
                     ]
                    ],
                    [action    : 'transitionIssue',
                     ext       : ": to check ASSIGN_ISSUE_PF_ $it _when condition true:" + i,
                     parameters: [
                             issue     : key,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     ext       : ": to check ASSIGN_ISSUE_PF_ $it _when condition true:" + i,
                     parameters: [
                             issue: value,
                             field: "Assignee"
                     ],
                     data      : ["Assignee  . . . . . . . . . . : $user"],
                    ],
            ])
        }
    }
}

if(!isCloud) {
    gint.taskHelper.add(
            action: 'updateProject',
            ext: ": change the project lead to $testUser _to check the assign issue pf with different project lead: ",
            parameters: [
                    project: projectName,
                    lead   : testUser
            ]
    )
}

[
        'assign_issue_to_ProjectLead',
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        if(!isCloud) {
            gint.taskHelper.add([
                    [action    : 'updateIssue',
                     ext       : ": unassign current issue to check $it _when change the project lead :" + i,
                     parameters: [
                             issue   : value,
                             assignee: " ",
                     ]
                    ],
                    [action    : 'transitionIssue',
                     ext       : ":ASSIGN_ISSUE_PF $it _when change the project lead :" + i,
                     parameters: [
                             issue     : key,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     ext       : ":ASSIGN_ISSUE_PF_check_ $it _when change the project lead:" + i,
                     parameters: [
                             issue: value,
                             field: "Assignee"
                     ],
                     data      : ["Assignee  . . . . . . . . . . : $testUser"],
                    ],
            ])
        }
    }
}

relatedIssuesMap.eachWithIndex{ key, value, i ->
    if(!isCloud) {
        gint.taskHelper.add(
                action: 'updateIssue', ext: " : to check ASSIGN_ISSUE_PF_conditionalExecution: " + i,
                parameters: [
                        issue   : value,
                        priority: 'High'
                ]
        )
    }
}

[
        'assignIssueToCurrentUser',
        'assignIssueToCurrentUserIfConditionTrue',
        'assignIssueToReporter',
        'assignIssueToProjectLead',
        'assignIssueToUserReturnFromScript',
        'assignIssueToUserReturnFromUserObjectFieldCreator',
        'assignIssueToUserReturnFromUserObjectFieldReporter',
        'assignIssueToUserWhoLastCommented',
        'assignIssueToRoleMember'
].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        if(!isCloud) {
            gint.taskHelper.add([
                    [action    : 'transitionIssue', ext: it + ': default_issue:' + i,
                     parameters: [
                             issue     : key,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     ext       : it + ': default_issue:' + i,
                     parameters: [
                             issue: value,
                             field: "Assignee"
                     ],
                     data      : [/Assignee  . . . . . . . . . . : ${info?.isCloud ? info?.userDisplayName : info?.user}/],
                    ],
                    [action    : 'updateIssue', ext: ': unassign issue to check next options_ASSIGN_ISSUE_PF ' + it + i,
                     parameters: [
                             issue   : value,
                             assignee: " ",
                     ]
                    ]
            ])
        }
    }
}

if(!isCloud) {
    gint.taskHelper.add(
            [action    : 'updateProject', ext: ": change project lead to $testUser",
             parameters: [
                     project: projectName,
                     lead   : testUser,
             ]
            ],
    )
}

relatedIssuesMap.eachWithIndex { key, value, i ->
    if(!isCloud) {
        gint.taskHelper.add(
                [action    : 'updateIssue', ext: ': change the reporter:' + i,
                 parameters: [
                         issue   : value,
                         reporter: testUser,
                 ],
                ]
        )
    }
}

[

        'assignIssueToReporter',
        'assignIssueToProjectLead',
        'assignIssueToUserReturnFromScript',
        'assignIssueToUserReturnFromUserObjectFieldReporter',
        'assignIssueToUserByUserName'
].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        if (!isCloud) {
            gint.taskHelper.add([
                    [action    : 'transitionIssue', ext: it + ': after updating issue:' + i,
                     parameters: [
                             issue     : key,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     ext       : it + ': after updating issue:' + i,
                     parameters: [
                             issue: value,
                             field: "Assignee"
                     ],
                     data      : ["Assignee  . . . . . . . . . . : $testUser"],
                    ],
                    [action    : 'updateIssue', ext: ': assign issue back to other user to check next options' + it + i,
                     parameters: [
                             issue   : value,
                             assignee: " ",
                     ]
                    ]
            ])
        }
    }
}

// Assign the resp issue to testprojectrole member
relatedIssuesMap.eachWithIndex{ currentIssue, targetIssue, index ->
    [testUser1,testUser].collect{
        if(!isCloud) {
            gint.taskHelper.add(
                    action: 'assignIssue', ext: ": to user $it to check_ASSIGN_ISSUE_PF_last role member option : + $index",
                    parameters: [
                            issue   : targetIssue,
                            assignee: it
                    ]
            )
        }
    }
}
[
        'assignIssueToUserReturnFromUserObjectFieldAssignee'
].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        if(!isCloud) {
            gint.taskHelper.add([
                    [action    : 'transitionIssue', ext: it + ': ' + i,
                     parameters: [
                             issue     : key,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     ext       : it + ':' + i,
                     parameters: [
                             issue: value,
                             field: "Assignee"
                     ],
                     data      : ["Assignee  . . . . . . . . . . : $testUser"],
                    ],
                    [action    : 'updateIssue', ext: ': assign issue back to other user to check next options:' + it + i,
                     parameters: [
                             issue   : value,
                             assignee: " ",
                     ]
                    ]
            ])
        }
    }
}

[
        'assignIssueToLastRoleMember'
].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        if(!isCloud) {
            gint.taskHelper.add([
                    [action    : 'transitionIssue', ext: ': ' + it + i,
                     parameters: [
                             issue     : key,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     ext       : ': ' + it + i,
                     parameters: [
                             issue: value,
                             field: "Assignee"
                     ],
                     data      : ["Assignee  . . . . . . . . . . : $testUser1"],
                    ],
                    [action    : 'updateIssue', ext: ': assign issue back to other user to check next options: ' + it + i,
                     parameters: [
                             issue   : value,
                             assignee: " ",
                     ]
                    ]
            ])
        }
    }
}
 */
