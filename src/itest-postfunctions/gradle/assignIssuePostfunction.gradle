buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/utils.gradle'

tearDown()
//tearDownUsers()
addWorkflow()

def relatedIssue = info?.isCloud ? relatedIssueCloud : relatedIssueServer
def assignIssuePfFields = [
        "groovyExpression=",
        "assignmentBehavior=force", //onlyAutomatic
        "useValuesFromTransitionedIssue=",
        "assignmentType=currentUser", //reporter
        "user=",
        "component=",
        "throwIfNoMatch=",
        "multipleUserBehavior=alphabetical",
        "skipIfAlreadyAssigned=",
        "throwExceptions=",
        "useGroovyCondition=false",
        "correlationId="
]
def assignmentType = [
        reporter: 'reporter',
        projectLead: 'projectLead',
        defaultAssigneeOfProject: 'projectDefault',
        lastCommented: 'lastCommenter',
        byUserName: 'specificUser',
        componentLead: 'componentLead',
        userFromUserObjectField:'userFromField',
        //fieldAssignee: "field=assignee",
        //fieldReporter: "field=reporter",
        //fieldsCreator: "field=creator",
        lastRoleMember: 'lastRoleMember',
        roleMember: 'roleMember',
        returnFromScript: 'script',
]
def assignmentBehaviour = [
        always : "force",
        automatic : "onlyAutomatic",
        ifTransitionValueChanged : "preferTransition",
        ifTransitionUserValueIsNotRoleMember : "ifRoleMember"
]

relatedIssue.eachWithIndex { key, value, i ->
    assignIssuePfFields[3] = "assignmentType=$assignmentType.reporter"
    def transition = 'assignIssuePF_reporter'
    def fields = assignIssuePfFields + "selectedLinkType=$value"
    addTransitionFunction( transition + i, 'postfunction', fields, functionKey.assignIssuePostfunctionServer)
}

relatedIssue.eachWithIndex { key, value, i ->
    assignIssuePfFields[3] = "assignmentType=$assignmentType.projectLead"
    def transition ='assignIssuePF_projectLead'
    def fields = assignIssuePfFields + "selectedLinkType=$value"
    addTransitionFunction(transition + i, 'postfunction', fields, functionKey.assignIssuePostfunctionServer)
}

relatedIssue.eachWithIndex { key, value, i ->
    assignIssuePfFields[3] = "assignmentType=$assignmentType.returnFromScript"
    def transition ='assignIssuePF_returnFromScript'
    def fields = assignIssuePfFields + "selectedLinkType=$value" + "script=$groovyExpression.returnsReporter"
    addTransitionFunction(transition + i, 'postfunction', fields, functionKey.assignIssuePostfunctionServer)
}

relatedIssue.eachWithIndex { key, value, i ->
    assignIssuePfFields[3] = "assignmentType=$assignmentType.userFromUserObjectField"
    def transition ='assignIssuePF_returnFromUserObjectFieldReporter'
    def fields = assignIssuePfFields + "selectedLinkType=$value" + "field=reporter"
    addTransitionFunction(transition + i, 'postfunction', fields, functionKey.assignIssuePostfunctionServer)
}

relatedIssue.eachWithIndex { key, value, i -> // here user is jmwe_qa
    assignIssuePfFields[3] = "assignmentType=$assignmentType.byUserName"
    def transition ='assignIssuePF_byUserName'
    def fields = assignIssuePfFields + "selectedLinkType=$value" + "user=$jmwe_qaUserId"
    addTransitionFunction(transition + i, 'postfunction', fields, functionKey.assignIssuePostfunctionServer)
}

relatedIssue.eachWithIndex { key, value, i ->
    assignIssuePfFields[3] = "assignmentType=$assignmentType.userFromUserObjectField"
    def transition ='assignIssuePF_returnFromUserObjectFieldCreator'
    def fields = assignIssuePfFields + "selectedLinkType=$value" + "field=creator"
    addTransitionFunction(transition + i, 'postfunction', fields, functionKey.assignIssuePostfunctionServer)
}

relatedIssue.eachWithIndex { key, value, i ->
    assignIssuePfFields[3] = "assignmentType=$assignmentType.userFromUserObjectField"
    def transition ='assignIssuePF_returnFromUserObjectFieldAssignee'
    def fields = assignIssuePfFields + "selectedLinkType=$value" + "field=assignee"
    addTransitionFunction(transition + i, 'postfunction', fields, functionKey.assignIssuePostfunctionServer)
}

relatedIssue.eachWithIndex { key, value, i -> // here component is 'component1' and component lead is current user
    assignIssuePfFields[3] = "assignmentType=$assignmentType.componentLead"
    def transition = 'assignIssuePF_componentLead'
    def fields =  assignIssuePfFields + "selectedLinkType=$value" + "component=$component1Id"
    addTransitionFunction(transition + i, 'postfunction', fields, functionKey.assignIssuePostfunctionServer)
}

relatedIssue.eachWithIndex { key, value, i -> // here role is jira admins
    assignIssuePfFields[3] = "assignmentType=$assignmentType.roleMember"
    def transition ='assignIssuePF_roleMember'
    def fields = assignIssuePfFields + "selectedLinkType=$value" + "role=$jiraAdminRoleId"
    addTransitionFunction(transition + i, 'postfunction', fields, functionKey.assignIssuePostfunctionServer)
}

relatedIssue.eachWithIndex { key, value, i ->
    assignIssuePfFields[3] = "assignmentType=$assignmentType.lastCommented"
    def transition ='assignIssuePF_lastCommented'
    def fields = assignIssuePfFields + "selectedLinkType=$value"
    addTransitionFunction(transition + i, 'postfunction', fields, functionKey.assignIssuePostfunctionServer)
}

relatedIssue.eachWithIndex { key, value, i -> // here role is jira admins
    assignIssuePfFields[3] = "assignmentType=$assignmentType.lastRoleMember"
    def transition ='assignIssuePF_lastRoleMember'
    def fields = assignIssuePfFields + "selectedLinkType=$value" + "role=$jiraAdminRoleId"
    addTransitionFunction(transition + i, 'postfunction', fields, functionKey.assignIssuePostfunctionServer)
}

relatedIssue.eachWithIndex { key, value, i ->
    assignIssuePfFields[3] = "assignmentType=$assignmentType.defaultAssigneeOfProject"
    def transition ='assignIssuePF_defaultAssigneeOfProject'
    def fields = assignIssuePfFields + "selectedLinkType=$value"
    addTransitionFunction(transition + i, 'postfunction', fields, functionKey.assignIssuePostfunctionServer)
}


createWorkflowScheme()
createProject()
//addUser()
//addGroup()
//addProjectRole()
//addProjectRoleActors()
addComponent(1)

// set issue status to In Progress

def current = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'current')
def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[]}], 'Sub-task')
/*def epic = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic')
def issueBelongsToEpic = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic[]} ], 'BelongsToEpic')
def initiative = createIssue([type: 'Initiative', summary: 'JMWE_Issue' ], 'Initiative')
def epic_initiative = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative')
def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def blocks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'blocks')
def isBlockedBy = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'isBlockedBy')
def clones = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'clones')
def isClonedBy = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'isClonedBy')
def duplicates = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'duplicates')
def isDuplicatedBy = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'isDuplicatedBy')
def relatesTo = createIssue([type: 'Task', summary: 'JMWE_Task'], 'relatesTo')

updateIssue([issue: {->epic_initiative[]}, field: "Parent Link", value: {->initiative[]}], "parent initiative child epic")

def linkIssuesMap = [

        blocks : {->blocks[]},
        'is blocked by' : {->isBlockedBy[]},
        clones : {->clones[]},
        'is cloned by' : {->isClonedBy[]},
        duplicates : {->duplicates[]},
        'is duplicated by' : {->isDuplicatedBy[]},
        'relates to': {->relatesTo[]}
]

linkIssuesMap.eachWithIndex { key, value, i ->
    linkIssue([issue: {->issueLinks[]}, toIssue: value, link: "$key"], key)
}
*/

def relatedIssuesMap = [
        {->current[]} : {->current[]},
        {->parent[]} : {->subtask[]},
        {->subtask[]} : {->parent[]},
       /* {->epic[]} : {->issueBelongsToEpic[]},
        {->issueBelongsToEpic[]} : {->epic[]},
        {-> initiative[]} : {->epic_initiative[]},
        {->epic_initiative[]} : {-> initiative[]},
        {->issueLinks[]} : {->blocks[]},
        {->issueLinks[]} : {->blocks[]},
        {->issueLinks[]} : {->isBlockedBy[]},
        {->issueLinks[]} : {->clones[]},
        {->issueLinks[]} : {->isClonedBy[]},
        {->issueLinks[]} : {->duplicates[]},
        {->issueLinks[]} : {->isDuplicatedBy[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->issueLinks[]} : {->relatesTo[]},*/
]

[
        'assignIssuePF_currentUser',
        'assignIssuePF_reporter',
        'assignIssuePF_projectLead',
        'assignIssuePF_returnFromScript',
        'assignIssuePF_returnFromUserObjectFieldCreator',
        'assignIssuePF_returnFromUserObjectFieldReporter',
].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ': when default issue' + it + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                ext       : 'on default issue'+ it + i,
                 parameters: [
                         issue: value,
                         field: "Assignee"
                 ],
                 data      : [/Assignee  . . . . . . . . . . : ${info?.isCloud ? info?.userDisplayName : info?.user}/],
                ],
                [action: 'updateIssue', ext: ': assign issue back to other user to check next options with same issues' + it + i,
                parameters: [
                        issue: value,
                        assignee: serverUser,
                ]
                ]
        ])
    }
}
gint.taskHelper.add(
        [action: 'updateProject', ext: ": change project lead to $serverUser",
         parameters: [
                 project: projectName,
                 lead: serverUser,
         ]
        ],
)
[

        'assignIssuePF_reporter',
        'assignIssuePF_projectLead',
        'assignIssuePF_returnFromScript',
        'assignIssuePF_returnFromUserObjectFieldReporter',
        'assignIssuePF_byUserName'
].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action: 'updateIssue', ext: ': change the reporter' + it + i,
                 parameters: [
                         issue: value,
                         reporter: serverUser,
                 ]
                ],
                [action    : 'transitionIssue', ext: ':after update issue' + it + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 ext       : 'after issue update'+ it + i,
                 parameters: [
                         issue: value,
                         field: "Assignee"
                 ],
                 data      : ["Assignee  . . . . . . . . . . : $serverUser"],
                ],
                [action: 'updateIssue', ext: ': assign issue back to other user to check next options' + it + i,
                 parameters: [
                         issue: value,
                         assignee: user,
                 ]
                ]
        ])
    }
}
