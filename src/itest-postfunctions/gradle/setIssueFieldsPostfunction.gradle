buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/utils.gradle'

def functionKey = info?.isCloud ? 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__SetFieldValueFunction' : 'com.innovalog.jmwe.jira-misc-workflow-extensions:set-issue-fields-function'
def relatedIssue = info?.isCloud ? relatedIssueCloud : relatedIssueServer

def fieldsOptions = [
        noOption : ["fields=[{\"fieldId\":\"labels\",\"value\":\"default_value\",\"options\":[],\"isTemplate\":true}]"],
        ifEmpty : ["fields=[{\"fieldId\":\"labels\",\"value\":\"ifEmpty\",\"options\":[\"copyOnlyIfNotSet\"],\"isTemplate\":true}]"],
        createMissingValues : ["fields=[{\"fieldId\":\"components\",\"value\":\"createMissingValues\",\"options\":[\"createMissingValues\"],\"isTemplate\":true}]"],
        ignoreEmptyValue : ["fields=[{\"fieldId\":\"labels\",\"value\":\"\",\"options\":[\"ignoreEmptyValue\"],\"isTemplate\":true}]"],
        appendValues : ["fields=[{\"fieldId\":\"labels\",\"value\":\"appendValues\",\"options\":[\"appendValues\"],\"isTemplate\":true}]"],
        allOptions : ["fields=[{\"fieldId\":\"labels\",\"value\":\"test_label\",\"options\":[\"copyOnlyIfNotSet\",\"createMissingValues\",\"ignoreEmptyValue\",\"appendValues\"],\"isTemplate\":true}]"],
        removeValues : ["fields=[{\"fieldId\":\"components\",\"value\":\"createMissingValues\",\"options\":[\"removeValues\"],\"isTemplate\":true}]"],
        conditionalExecution : ["fields=[{\"fieldId\":\"labels\",\"value\":\"conditionalExecution\",\"options\":[],\"isTemplate\":true}]"],
        runAsCurrentUser : ["fields=[{\"fieldId\":\"labels\",\"value\":\"runAsCurrentUser\",\"options\":[],\"isTemplate\":true}]"],
        runAsSpecificUser : ["fields=[{\"fieldId\":\"labels\",\"value\":\"runAsSpecificUser\",\"options\":[],\"isTemplate\":true}]"],
        runAsUserInFieldAssignee : ["fields=[{\"fieldId\":\"labels\",\"value\":\"runAsUserInFieldAssignee\",\"options\":[],\"isTemplate\":true}]"],
        runAsUserInFieldReporter : ["fields=[{\"fieldId\":\"labels\",\"value\":\"runAsUserInFieldReporter\",\"options\":[],\"isTemplate\":true}]"],
        runAsUserInFieldCreator : ["fields=[{\"fieldId\":\"labels\",\"value\":\"runAsUserInFieldCreator\",\"options\":[],\"isTemplate\":true}]"],
        runAsUserReturnFromScript : ["fields=[{\"fieldId\":\"labels\",\"value\":\"runAsUserReturnFromScript\",\"options\":[],\"isTemplate\":true}]"],
]

def defaultFieldsCloud = [
        "postFunction.id=18b36491-f556-48cd-b476-7b82f02c7249",
]

relatedIssue.eachWithIndex { key, value, i ->
    def server = defaultFieldsServer + conditionalExecution.false +  fieldsOptions.noOption + "selectedLinkType=$value" + runAsUser.currentUser
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"sendNotifications\":false,\"problems\":[],\"targetIssue\":\"$value\",\"fieldsConfig\":[{\"fieldId\":\"labels\",\"options\":{},\"value\":\"default_value\"}],\"runAsType\":\"addonUser\"}"
    addTransitionFunction('setFieldLabelsToTargetIssue' + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def server = defaultFieldsServer + conditionalExecution.false+ fieldsOptions.ifEmpty + "selectedLinkType=$value" + runAsUser.currentUser
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"sendNotifications\":true,\"problems\":[],\"targetIssue\":\"$value\",\"fieldsConfig\":[{\"fieldId\":\"labels\",\"options\":{\"copyOnlyIfNotSet\":true},\"value\":\"ifEmpty\"}],\"runAsType\":\"addonUser\"}"
    addTransitionFunction('ifEmpty' + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def server = defaultFieldsServer + conditionalExecution.false + fieldsOptions.createMissingValues + "selectedLinkType=$value" + runAsUser.currentUser
    if(!isCloud) {
        addTransitionFunction('createMissingValueComponent' + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    }
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def server = defaultFieldsServer + conditionalExecution.false + fieldsOptions.ignoreEmptyValue + "selectedLinkType=$value" + runAsUser.currentUser
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"sendNotifications\":false,\"problems\":[],\"targetIssue\":\"$value\",\"fieldsConfig\":[{\"fieldId\":\"labels\",\"options\":{\"ignoreEmptyValue\":true},\"value\":\"\"}],\"runAsType\":\"addonUser\"}"
    addTransitionFunction('ignoreEmptyValue' + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def server = defaultFieldsServer + conditionalExecution.false + fieldsOptions.appendValues + "selectedLinkType=$value" + runAsUser.currentUser
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"sendNotifications\":false,\"problems\":[],\"targetIssue\":\"$value\",\"fieldsConfig\":[{\"fieldId\":\"labels\",\"options\":{\"appendValues\":true},\"value\":\"appendValues\"}],\"runAsType\":\"addonUser\"}"
    addTransitionFunction('appendValues' + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def server = defaultFieldsServer + conditionalExecution.false + fieldsOptions.removeValues + "selectedLinkType=$value" + runAsUser.currentUser
    if(!isCloud) {
        addTransitionFunction('removeValues' + i, 'postfunction', server, functionKey)
    }
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def server = defaultFieldsServer + conditionalExecution.true +  fieldsOptions.conditionalExecution + "selectedLinkType=$value" + runAsUser.currentUser
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"sendNotifications\":true,\"problems\":[],\"targetIssue\":\"$value\",\"fieldsConfig\":[{\"fieldId\":\"labels\",\"options\":{},\"value\":\"conditionalExecution\"}],\"conditionalExecution\":true,\"conditionalExecutionScript\":\"$nunjuckExpression.checkPriorityHigh\",\"runAsType\":\"addonUser\"}"
    addTransitionFunction('conditionalExecution' + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def server = defaultFieldsServer + runAsUser.currentUser +  conditionalExecution.false +  fieldsOptions.runAsCurrentUser + "selectedLinkType=$value"
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"sendNotifications\":false,\"problems\":[],\"targetIssue\":\"$value\",\"fieldsConfig\":[{\"fieldId\":\"labels\",\"options\":{},\"value\":\"runAsCurrentUser\"}],\"runAsType\":\"addonUser\"}"
    addTransitionFunction('runAsCurrentUser' + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud) {
        moveTransitionFunction('runAsCurrentUser' + i, 3)
    }
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def server = defaultFieldsServer + runAsUser.specificUser +  conditionalExecution.false +  fieldsOptions.runAsSpecificUser + "selectedLinkType=$value"
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"sendNotifications\":true,\"problems\":[],\"targetIssue\":\"$value\",\"fieldsConfig\":[{\"fieldId\":\"labels\",\"options\":{},\"value\":\"runAsSpecificUser\"}],\"runAsType\":\"thisUser\",\"runAs\":\"$testUserIdCloud\"}"
    addTransitionFunction('runAsSpecificUser' + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud) {
        moveTransitionFunction('runAsSpecificUser' + i, 4)
    }
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def server = defaultFieldsServer + runAsUser.userInFieldAssignee +  conditionalExecution.false +  fieldsOptions.runAsUserInFieldAssignee + "selectedLinkType=$value"
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"sendNotifications\":false,\"problems\":[],\"targetIssue\":\"$value\",\"fieldsConfig\":[{\"fieldId\":\"labels\",\"options\":{},\"value\":\"runAsUserInFieldAssignee\"}],\"runAsType\":\"userField\",\"runAsField\":\"assignee\"}"
    addTransitionFunction('runAsUserInFieldAssignee' + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud) {
        moveTransitionFunction('runAsUserInFieldAssignee' + i, 4)
    }
}
relatedIssue.take(1).eachWithIndex { key, value, i ->
    def server = defaultFieldsServer + runAsUser.userInFieldReporter +  conditionalExecution.false +  fieldsOptions.runAsUserInFieldReporter + "selectedLinkType=$value"
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"sendNotifications\":false,\"problems\":[],\"targetIssue\":\"$value\",\"fieldsConfig\":[{\"fieldId\":\"labels\",\"options\":{},\"value\":\"runAsUserInFieldReporter\"}],\"runAsType\":\"userField\",\"runAsField\":\"reporter\"}"
    addTransitionFunction('runAsUserInFieldReporter' + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud) {
        moveTransitionFunction('runAsUserInFieldReporter' + i, 4)
    }
}
relatedIssue.take(1).eachWithIndex { key, value, i ->
    def server = defaultFieldsServer + runAsUser.userInFieldCreator +  conditionalExecution.false +  fieldsOptions.runAsUserInFieldCreator + "selectedLinkType=$value"
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"sendNotifications\":false,\"problems\":[],\"targetIssue\":\"$value\",\"fieldsConfig\":[{\"fieldId\":\"labels\",\"options\":{},\"value\":\"runAsUserInFieldCreator\"}],\"runAsType\":\"userField\",\"runAsField\":\"creator\"}"
    addTransitionFunction('runAsUserInFieldCreator' + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud) {
        moveTransitionFunction('runAsUserInFieldCreator' + i, 4)
    }
}
relatedIssue.take(1).eachWithIndex { key, value, i ->
    def server = defaultFieldsServer + runAsUser.userFromScript +  conditionalExecution.false +  fieldsOptions.runAsUserReturnFromScript + "selectedLinkType=$value"
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"sendNotifications\":false,\"problems\":[],\"targetIssue\":\"$value\",\"fieldsConfig\":[{\"fieldId\":\"labels\",\"options\":{},\"value\":\"runAsUserReturnFromScript\"}],\"runAsType\":\"userFromScript\",\"runAsScript\":\"$nunjuckExpression.returnsReporter\",\"_modified\":\"2024-01-09T07:00:36.918Z\"}"
    addTransitionFunction('runAsUserReturnFromScript' + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud) {
        moveTransitionFunction('runAsUserReturnFromScript' + i, 4)
    }
}

createWorkflowScheme()
createProject()

(1..2).each {
    gint.taskHelper.addSetUp([
            [action: 'addVersion', ext: ': create versions : ' + it,
             parameters: [
                     project: projectName,
                     version: it
             ]
            ],
            [action: 'addComponent', ext: ': create Component : ' + it,
             parameters: [
                     project: projectName,
                     component: 'component' + it
             ],
            ]
    ])
}

def current = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'current')
def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[]}], 'Sub-task')
def epic = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic')
def issueBelongsToEpic = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic[]} ], 'BelongsToEpic')
def initiative = createIssue([type: 'Initiative', summary: 'JMWE_Issue' ], 'Initiative')
def epic_initiative = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative')
def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def blocks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'blocks')
def clones = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'clones')
def duplicates = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'duplicates')
def relatesTo = createIssue([type: 'Task', summary: 'JMWE_Task'], 'relatesTo')
def jqlIssue = createIssue([type: 'Task', summary: 'JQL_ISSUE'], 'jqlIssue')
updateIssue([issue: {->epic_initiative[]}, field: "Parent Link", value: {->initiative[]}], "parent initiative child epic")

def linkIssuesMap = [
        blocks : {->blocks[]},
        "$clonesLinkType" : {->clones[]},
        duplicates : {->duplicates[]},
        'relates to': {->relatesTo[]}
]

linkIssuesMap.eachWithIndex { key, value, i ->
    linkIssue([issue: {->issueLinks[]}, toIssue: value, link: "$key"], key)
}

def relatedIssuesMap = [
        {->current[]} : {->current[]},
        {->parent[]} : {->subtask[]},
        {->subtask[]} : {->parent[]},
        {->epic[]} : {->issueBelongsToEpic[]},
        {->issueBelongsToEpic[]} : {->epic[]},
        {-> initiative[]} : {->epic_initiative[]},
        {->epic_initiative[]} : {-> initiative[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->blocks[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->clones[]},
        {->clones[]} : {->issueLinks[]},
        {->issueLinks[]} : {->duplicates[]},
        {->duplicates[]} : {->issueLinks[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->relatesTo[]} : {->issueLinks[]},
        {->issueLinks[]} : {->jqlIssue[]}
]

def getCurrentUserName = info?.isCloud? info?.userDisplayName : user

[
        'setFieldLabelsToTargetIssue'
].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        def transition = it + i
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext: ':default configuration:' + transition,
                 parameters: [
                         issue     : key,
                         transition: transition,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext       : ":Of Labels_after transition the issue with transition:" + transition,
                 parameters: [
                         issue: value,
                         field: "Labels"
                 ],
                 data      : [/Labels  . . . . . . . . . . . : default_value/],
                ],
                [action    : 'setFieldValue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext       : ":Remove the labels added by postfunction:" + transition,
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: " "
                 ],
                 ]
        ])
    }
}

[
        'ifEmpty'
].collect {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'setFieldValue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext       : ":to empty:" +it + i,
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: " "
                 ],
                ],
                [action    : 'transitionIssue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext: ": when  empty: " + it+i ,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext       : ":when empty:" + it + i,
                 parameters: [
                         issue: value,
                         field: "Labels"
                 ],
                 data      : [/Labels  . . . . . . . . . . . : ifEmpty/],
                ],
                [action    : 'setFieldValue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext       : ": when not empty:" + it + i,
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: " "
                 ],
                ],
                [action    : 'setFieldValue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext       : ": to check when not empty:" + it + i,
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: "test_label"
                 ],
                ],
                [action    : 'transitionIssue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext: ':when not empty' + it + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext       : "when not empty" + it + i,
                 parameters: [
                         issue: value,
                         field: "Labels"
                 ],
                 failData      : [/Labels  . . . . . . . . . . . : ifEmpty/],
                ],
        ])
    }
}

[
        'ignoreEmptyValue'
].collect {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'setFieldValue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext       : ": when ignore empty value:" + it + i,
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: " "
                 ],
                ],
                [action    : 'setFieldValue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext       : ": to check when ignore empty value:" + it + i,
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: "test_label"
                 ],
                ],
                [action    : 'transitionIssue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext: ': Ignore empty values' + it + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext       : "Ignore empty values" + it + i,
                 parameters: [
                         issue: value,
                         field: "Labels"
                 ],
                 data      : [/Labels  . . . . . . . . . . . : test_label/],
                ],
        ])
    }
}

[
        'appendValues'
].collect {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'setFieldValue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext       : ": Of labels to empty to check :" + it + i,
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: " "
                 ],
                ],
                [action    : 'setFieldValue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext       : ": Of labels to default_value to check:" + it + i,
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: "default_value"
                 ],
                ],
                [action    : 'transitionIssue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext: ': Add source value to destination field ' + it + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext       : "Add source value to destination field" + it + i,
                 parameters: [
                         issue: value,
                         field: "Labels"
                 ],
                 data      : [/Labels  . . . . . . . . . . . : appendValues default_value/],
                ],
        ])
    }
}

[
        'createMissingValueComponent'
].collect {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        if(!isCloud) {
            gint.taskHelper.add([
                    [action    : 'transitionIssue',
                     sleep     : info?.isCloud ? 5000 : 1000,
                     ext       : ':Create missing value' + it + i,
                     parameters: [
                             issue     : key,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     sleep     : info?.isCloud ? 5000 : 1000,
                     ext       : "Create missing value" + it + i,
                     parameters: [
                             issue: value,
                             field: "Component/s"
                     ],
                     data      : ["Component/s . . . . . . . . . : createMissingValue"],
                    ],
            ])
        }
    }
}

[
        'removeValues'
].collect {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        if(!isCloud) {
            gint.taskHelper.add([
                    [action    : 'transitionIssue',
                     sleep     : info?.isCloud ? 5000 : 1000,
                     ext       : ':Remove source value from destination field' + it + i,
                     parameters: [
                             issue     : key,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     sleep     : info?.isCloud ? 5000 : 1000,
                     ext       : "Remove source value from destination field" + it + i,
                     parameters: [
                             issue: value,
                             field: "Component/s"
                     ],
                     failData  : ["Component/s . . . . . . . . . : createMissingValue"],
                    ],
            ])
        }
    }
}

relatedIssuesMap.take(1).eachWithIndex{ key, value,  i ->
    gint.taskHelper.add(
            action: 'assignIssue',
            sleep: info?.isCloud ? 5000 :  0,
            ext: ": to $user " + i,
            parameters: [
                    issue: key,
                    userId: user
            ]
    )
}

[
        'runAsCurrentUser',
        'runAsUserInFieldReporter',
        'runAsUserInFieldCreator',
        //'runAsUserReturnFromScript',
        'runAsUserInFieldAssignee',
].each {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext: ':' + it + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getIssueHistoryList',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext       : ": " + it + i,
                 parameters: [
                         issue: value,
                         outputType: "text",
                         select: "Field:labels",
                         columns: "Author,Field,'To String'"
                 ],
                 data      : ["$getCurrentUserName", "labels", "$it"],
                ],
        ])
    }
}

[
        'runAsSpecificUser'
].each {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ':' + it + i,
                 sleep: info?.isCloud ? 5000 :  0,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getIssueHistoryList',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext       : ": " + it + i,
                 parameters: [
                         issue: value,
                         outputType: "text",
                         select: "Field:labels",
                         columns: "Author,Field,'To String'"
                 ],
                 data      : ["$testUser", "labels", "$it"],
                ],
        ])
    }
}
[
        'conditionalExecution'
].each {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext: ': ' + it +' : when false' + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext       : ": $it when false" +  i,
                 parameters: [
                         issue: value,
                         field: "Labels"
                 ],
                 failData      : [/Labels  . . . . . . . . . . . : conditionalExecution/],
                ],
                [action: 'updateIssue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext: ": set priority High to check conditional execution true " + it+ i,
                 parameters: [
                         issue: key,
                         priority: 'High'
                 ]],
                [action    : 'transitionIssue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext: ': ' + it +' : when true' + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: info?.isCloud ? 5000 :  0,
                 ext       : ": $it _ when true" +  i,
                 parameters: [
                         issue: value,
                         field: "Labels"
                 ],
                 data      : [/Labels  . . . . . . . . . . . : conditionalExecution/],
                ],
        ])
    }
}
