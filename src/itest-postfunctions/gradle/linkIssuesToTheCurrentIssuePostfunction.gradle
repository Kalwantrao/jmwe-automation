buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/utils.gradle'

tearDown()
addWorkflow()

def jqlExpressionToLinkIssue = "project = $projectName and issueType = Task and summary ~ JMWE_LinkIssue"
def defaultFields = [
        "correlationId=",
        "throwExceptions=false",
]

def issuesToLink = [
        jql : ["jql=$jqlExpressionToLinkIssue"],
]

def maxIssues = [
        zero : [ "maxIssues=0"],
        one : [ "maxIssues=1"],
        two : [ "maxIssues=2"],
        three : [ "maxIssues=3"],
]

def  selectedLinkType = [
        blocks: ["selectedLinkType=$relatedIssue.linkByBlock"],
        clones: ["selectedLinkType=$relatedIssue.linkByClones"],
        duplicates: ["selectedLinkType=$relatedIssue.linkByDuplicates"],
        'relates to': ["selectedLinkType=$relatedIssue.linkByRelatesTo"],
]
def useGroovyFilter = [
        no : ["useGroovyFilter=false"],
        yes : ["useGroovyFilter=true"],
]
def functionKey =	info ?.isCloud ? 'com.innovalog.jmwe.jira-misc-workflow-extensions:link-issues-function' : 'com.innovalog.jmwe.jira-misc-workflow-extensions:link-issues-function'

// Configuration
selectedLinkType.eachWithIndex { key,  value, i ->
        def transition = 'linkIssuesToCurrentIssueByType'
        def fields = defaultFields + value + issuesToLink.jql + maxIssues.one +  useGroovyFilter.no + runAsUser.currentUser + conditionalExecution.false
        addTransitionFunction(transition + key, 'postfunction', fields, functionKey )
}

selectedLinkType.eachWithIndex { key,  value, i ->
    def transition = 'linkIssuesToCurrentIssueIfConditionTrueByType'
    def fields = defaultFields + value + issuesToLink.jql + maxIssues.one +  useGroovyFilter.no + runAsUser.currentUser + conditionalExecution.true
    addTransitionFunction(transition + key, 'postfunction', fields, functionKey )
}

createWorkflowScheme()
createProject()

def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'defaultIssue')
def defaultIssue1 = createIssue([type: 'Task', summary: 'JMWE_LinkIssue'], 'defaultIssue1')

def issue = {-> defaultIssue[]}
def toIssue = {->defaultIssue1[]}

// checking the current status To Do and previous status In Progress


selectedLinkType.eachWithIndex { linkType, value, i ->
    [
            'linkIssuesToCurrentIssueIfConditionTrueByType'
    ].each {
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: " : when issue priority is not high :" + it + linkType +i ,
                 parameters: [
                         transition: it + linkType,
                         issue     : { -> defaultIssue[] },
                 ],
                ],
                [action: 'getFieldValue', ext: ":when issues priority not high: " + it + linkType + i,
                 parameters: [
                         issue: {-> defaultIssue[] },
                         field: "Linked Issues",
                 ],
                 failData: [/Linked Issues . . . . . . . . : $toIssue/]
                ],
               ],
        )
    }
}
gint.taskHelper.add(
        action: 'updateIssue', ext : ": set priority to high: ",
        parameters: [
                issue: {-> defaultIssue[]},
                priority: 'High'
        ]
)



selectedLinkType.eachWithIndex { linkType, value, i ->
    [
            'linkIssuesToCurrentIssueByType',
            'linkIssuesToCurrentIssueIfConditionTrueByType'
    ].each {
        gint.taskHelper.add([
            [action    : 'transitionIssue', ext: " : when priority high: " + it + linkType +i ,
             parameters: [
                     transition: it + linkType,
                     issue     : { -> defaultIssue[] },
             ],
            ],
            [action: 'getFieldValue', ext: ": when priority high" + it + linkType + i,
             parameters: [
                     issue: {-> defaultIssue[] },
                     field: "Linked Issues",
             ],
                    data: [/Linked Issues . . . . . . . . : $toIssue/]
            ],
            [action: 'deleteLink',ext: " : unlink issues linked by post function to check next option: " + it+ linkType,
             parameters:[
                     issue: issue,
                     toIssue: toIssue,
                     link: "$linkType"
                     ]
             ]
             ],
    )
    }
}



