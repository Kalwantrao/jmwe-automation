buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/utils.gradle'

tearDown()
addWorkflow()

def relatedIssue = info?.isCloud ? relatedIssueCloud : relatedIssueServer
def fieldsToRemove = ["currentIssue"]

fieldsToRemove.each { key ->
    relatedIssue.remove(key)
}

def statusList = info?.isCloud ? statusListCloud :  statusListServer
def groovyScript = '''def trigger = !issue.subtasks.collect { it.status.name }.any { it != 'Done'}'''
def nunjucksScript = '''{{ targetIssue | subtasks("status") | selectattr('fields.status.name', 'ne', 'Done') | list == [] }}'''
// {{ (targetIssue | subtasks("status") | map(attribute="fields.status.name") | select("!=","Done") | list) | length > 0 ? false : true }}
def templateComment = "commentAddedBytemplate"
def labelsByTemplate = "test_labels"
def expressionComment = "expression"

def defaultFieldsServer = [
        "restrictToInternal=no",
        "throwExceptions=false",
        "correlationId="
]
def defaultFieldsCloud = [
        "postFunction.id=18b36491-f556-48cd-b476-7b82f02c7249",
]

def transitions = [
        specifyName : ["transitionType=rawValue"],
        byName : [ "transitionType=rawValue","transitions=In Progress" ],
        calculated : ["transitionType=expression","calculatedTransition='21'","transitions='21'" ]
]
def options = [
        allUnselected : ["skipConditions=no","skipValidators=no","skipPermissions=no","triggerEvent=no"],
        skipConditions : [ no : ["skipConditions=no"], yes : ["skipConditions=yes"] ],
        skipValidators : [ no : ["skipValidators=no"], yes : ["skipValidators=yes"] ],
        skipPermissions : [ no : ["skipPermissions=no"], yes : ["skipPermissions=yes"] ],
        triggerManualEvent : [ no : ["triggerEvent=no"], yes : ["triggerEvent=yes"]]
]
def addFields = [
        noField : ["fieldsToSet={}"],
        copyFromCurrentIssue : ["fieldsToSet={\"labels\":{\"action\":\"copy\"}}"],
        setByScript : ["fieldsToSet={\"labels\":{\"action\":\"script\",\"value\":\"$groovyExpression.getDescription\"}}"],
        setByTemplate : ["fieldsToSet={\"labels\":{\"action\":\"template\",\"value\":\"$labelsByTemplate\"}}"]
]
def addComment = [
        not : ["commentType=", "comment="],
        template : ["commentType=template","comment=$templateComment"],
        expression : [ "commentType=expression","comment=$groovyExpression.getDescription" ],
]
def commentVisibility = [
        notSelected : [ "restrictToGroup=", "restrictToProjectRole=" ],
        jiraAdminGroups : [ "restrictToGroup=$jiraAdminGrooup", "restrictToProjectRole=" ],
        jiraAdminRoles : [ "restrictToGroup=", "restrictToProjectRole=$jiraAdminRoleId" ]
]

def functionKey = info?.isCloud ? functionKey.transitionRelatedIssuesPostfunctionCloud : functionKey.transitionRelatedIssuesPostfunctionServer

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'transitionIssuePF_checkTargetIssues'
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"transition\":\"In Progress@@${workflow}\",\"selectedLinkType\":\"$value\",\"runAsType\":\"currentUser\"}"
    def server = defaultFieldsServer +  "selectedLinkType=$value" + transitions.byName + options.allUnselected + addFields.noField + addComment.not + commentVisibility.notSelected + runAsUser.currentUser + conditionalExecution.false
    addTransitionFunction(transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    moveTransitionFunction(transition + i, 4)
}


relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'triggerCalculatedTransition_transitionIssue'
    def server = defaultFieldsServer + conditionalExecution.false +  "selectedLinkType=$value" + transitions.calculated + options.allUnselected + addFields.noField + addComment.not + commentVisibility.notSelected + runAsUser.currentUser
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"transition\":\"21\",\"selectedLinkType\":\"$value\",\"runAsType\":\"currentUser\"}"
    addTransitionFunction(transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    moveTransitionFunction(transition + i, 4)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'transitionIssueIfConditionTrue'
    def server = defaultFieldsServer + conditionalExecution.true +  "selectedLinkType=$value" + transitions.byName + options.allUnselected + addFields.noField + addComment.not + commentVisibility.notSelected + runAsUser.currentUser
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":true,\"conditionalExecutionScript\":\"{{ issue.fields.priority.name == 'High' }}\",\"selectedLinkType\":\"$value\",\"transition\":\"In Progress@@${workflow}\",\"runAsType\":\"currentUser\"}"
    addTransitionFunction(transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    moveTransitionFunction(transition + i, 4)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'addLabelsAfterTransition_template_transitionIssue'
    def server = defaultFieldsServer + conditionalExecution.false +  "selectedLinkType=$value" + transitions.byName + options.allUnselected + addFields.setByTemplate + addComment.not + commentVisibility.notSelected + runAsUser.currentUser
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"selectedLinkType\":\"$value\",\"transition\":\"In Progress@@${workflow}\",\"runAsType\":\"currentUser\",\"fields\":{\"labels\":{\"value\":\"$labelsByTemplate\"}}}"
    addTransitionFunction(transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    moveTransitionFunction(transition + i, 4)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'commentAddedBytemplate'
    def server = defaultFieldsServer + conditionalExecution.false +  "selectedLinkType=$value" + transitions.byName + options.allUnselected + addFields.noField + addComment.commentAddedBytemplate + commentVisibility.notSelected + runAsUser.currentUser
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"selectedLinkType\":\"$value\",\"transition\":\"In Progress@@${workflow}\",\"runAsType\":\"currentUser\",\"comment\":\"$templateComment\",\"restrictToInternal\":false,\"restrictToGroup\":\"\"}"
    addTransitionFunction(transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    moveTransitionFunction(transition + i, 4)
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'commentVisibleToJiraAdminRoles'
    def server = defaultFieldsServer + conditionalExecution.false +  "selectedLinkType=$value" + transitions.byName + options.allUnselected + addFields.noField + addComment.commentVisibleToJiraAdminRoles + commentVisibility.jiraAdminRoles + runAsUser.currentUser
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"selectedLinkType\":\"$value\",\"transition\":\"In Progress@@${workflow}\",\"runAsType\":\"currentUser\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",\"restrictToProjectRoleId\":$jiraAdminRoleId}"
    addTransitionFunction(transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    moveTransitionFunction(transition + i, 4)
}

createWorkflowScheme()
//associateWorkflow(projectKey)
createProject()

// set issue status to In Progress

def current = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'current')
def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[]}], 'Sub-task')
def epic = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic')
def issueBelongsToEpic = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic[]} ], 'BelongsToEpic')
def initiative = createIssue([type: 'Initiative', summary: 'JMWE_Issue' ], 'Initiative')
def epic_initiative = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative')
def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def blocks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'blocks')
def isBlockedBy = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'isBlockedBy')
def clones = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'clones')
def isClonedBy = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'isClonedBy')
def duplicates = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'duplicates')
def isDuplicatedBy = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'isDuplicatedBy')
def relatesTo = createIssue([type: 'Task', summary: 'JMWE_Task'], 'relatesTo')
def jqlIssue = createIssue([type: 'Task', summary: 'JMWE_Task'], 'jqlIssue')

updateIssue([issue: {->epic_initiative[]}, field: "Parent Link", value: {->initiative[]}], "parent initiative child epic")

def linkIssuesMap = [
        blocks : {->blocks[]},
        'is blocked by' : {->isBlockedBy[]},
        clones : {->clones[]},
        'is cloned by' : {->isClonedBy[]},
        duplicates : {->duplicates[]},
        'is duplicated by' : {->isDuplicatedBy[]},
        'relates to': {->relatesTo[]}
]

linkIssuesMap.eachWithIndex { key, value, i ->
    linkIssue([issue: {->issueLinks[]}, toIssue: value, link: "$key"], key)
}

def relatedIssuesMap = [
        {->parent[]} : {->subtask[]},
        {->subtask[]} : {->parent[]},
        {->epic[]} : {->issueBelongsToEpic[]},
        {->issueBelongsToEpic[]} : {->epic[]},
        {-> initiative[]} : {->epic_initiative[]},
        {->epic_initiative[]} : {-> initiative[]},
        {->issueLinks[]} : {->blocks[]},
        {->issueLinks[]} : {->blocks[]},
        {->issueLinks[]} : {->isBlockedBy[]},
        {->issueLinks[]} : {->clones[]},
        {->issueLinks[]} : {->isClonedBy[]},
        {->issueLinks[]} : {->duplicates[]},
        {->issueLinks[]} : {->isDuplicatedBy[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->issueLinks[]} : {->jqlIssue[]},
]

gint.taskHelper.add(
        action: 'addProjectRoleActors',
        onlyIf: !isServer,
        parameters: [
                project: projectName,
                role: 'Administrators',
                userId: "@self"
        ]
)

relatedIssuesMap.eachWithIndex{ key, value, i ->
    gint.taskHelper.add(
            action: 'updateIssue' , ext: " : add description to add in comment : " + i,
            parameters: [
                    issue: value,
                    description : expressionComment
            ]
    )
}

['transitionIssueIfConditionTrue'].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ': when condition returns false as all subtask should be in done status' + it + i,
                 sleepAfter: 5000,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: 5000,
                 ext       : " :when condition false :" + it + i,
                 parameters: [
                         issue: value,
                         field: "Status"
                 ],
                 failData      : [/Status  . . . . . . . . . . . : In Progress/],
                ],
        ])
    }
}
relatedIssuesMap.eachWithIndex{ key, value,  i ->
    gint.taskHelper.add(
            action: 'updateIssue', ext: ": set priority High to check conditional execution true " + i,
            parameters: [
                    issue: key,
                    priority: 'High'
            ]
    )
}
['transitionIssueIfConditionTrue'].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ': after conditional execution true ' + it+ i,
                 sleep: 5000,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: 5000,
                 ext       : " :when conditional execution true :" + it + i,
                 parameters: [
                         issue: value,
                         field: "Status"
                 ],
                 data      : [/Status  . . . . . . . . . . . : In Progress/],
                ],
                [action    : 'transitionIssue', ext: ': current issue to original status to check next option' + it+ i,
                 parameters: [
                         issue     : value,
                         transition: "To Do",
                 ]
                ],
        ])
    }

}
['transitionIssuePF_checkTargetIssues'].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ':' + it + i,
                 sleepAfter: 5000,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: 5000,
                 ext       : it + i,
                 parameters: [
                         issue: value,
                         field: "Status"
                 ],
                 data      : [/Status  . . . . . . . . . . . : In Progress/],
                 failData  : [/Status  . . . . . . . . . . . : To Do/]
                ],
                [action    : 'transitionIssue', ext: ': To Do' + it+ i,
                 sleep: 5000,
                 parameters: [
                         issue     : value,
                         transition: "To Do",
                 ]
                ],
        ])
    }
}

[
        'triggerCalculatedTransition_transitionIssue'
].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ':' + it + i,
                 sleepAfter: 5000,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: 5000,
                 ext       : it + i,
                 parameters: [
                         issue: value,
                         field: "Status"
                 ],
                 data      : [/Status  . . . . . . . . . . . : In Progress/],
                 failData  : [/Status  . . . . . . . . . . . : To Do/]
                ],
                [action    : 'transitionIssue', ext: ': To Do' + it+ i,
                 sleep: 5000,
                 parameters: [
                         issue     : value,
                         transition: "To Do",
                 ]
                ],
        ])
    }
}

[
        'addLabelsAfterTransition_template_transitionIssue',
].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ':' + it + i,
                 sleepAfter: 5000,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: 5000,
                 ext       : it + i,
                 parameters: [
                         issue: value,
                         field : "Labels"
                 ],
                 data      : [
                         /Labels  . . . . . . . . . . . : $labelsByTemplate/
                 ],
                ],
                [action    : 'transitionIssue', ext: ': To Do' + it+ i,
                 sleep: 5000,
                 parameters: [
                         issue     : value,
                         transition: "To Do",
                 ]
                ],
        ])
    }
}

[
        'commentAddedBytemplate',
        'commentVisibleToJiraAdminRoles',
].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ':' + it + i,
                 sleepAfter: 5000,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: 5000,
                 ext       : it + i,
                 parameters: [
                         issue: value,
                         field: "Status"
                 ],
                 data      : [/Status  . . . . . . . . . . . : In Progress/],
                 failData  : [/Status  . . . . . . . . . . . : To Do/]
                ],
                [action: 'getComments', ext: " : add comment by template :" + it + i,
                 sleep: 5000,
                 parameters: [
                         issue: value
                 ],
                 data:[   /$user added a comment on/,
                          /$it/
                 ],
                ],
                [action    : 'transitionIssue', ext: ': To Do' + it+ i,
                 sleepAfter: 5000,
                 parameters: [
                         issue     : value,
                         transition: "To Do",
                 ]
                ],
        ])
    }
}

