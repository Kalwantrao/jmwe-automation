buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/itest-postfunction6/postfunction.gradle'

def functionKey = info?.isCloud ? "com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.${testCloudBuild}__TransitionIssueFunction" : 'com.innovalog.jmwe.jira-misc-workflow-extensions:TransitionIssue-function'

def groovyScript = '''def trigger = !issue.subtasks.collect { it.status.name }.any { it != 'Done'}'''
def nunjucksScript = '''{{ targetIssue | subtasks("status") | selectattr('fields.status.name', 'ne', 'Done') | list == [] }}'''

def labelsByTemplate = "test_labels"
def expressionComment = "expression"

def transitions = [
        specifyName : ["transitionType=rawValue"],
        byName : [ "transitionType=rawValue","transitions=In Progress" ],
        calculated : ["transitionType=expression","calculatedTransition='21'","transitions='21'" ]
]

def options = [
        allUnselected : ["skipConditions=no","skipValidators=no","skipPermissions=no","triggerEvent=no"],
        skipConditions : [ no : ["skipConditions=no"], yes : ["skipConditions=yes"] ],
        skipValidators : [ no : ["skipValidators=no"], yes : ["skipValidators=yes"] ],
        skipPermissions : [ no : ["skipPermissions=no"], yes : ["skipPermissions=yes"] ],
        triggerManualEvent : [ no : ["triggerEvent=no"], yes : ["triggerEvent=yes"]]
]

def addFields = [
        noField : ["fieldsToSet={}"],
        copyFromCurrentIssue : ["fieldsToSet={\"labels\":{\"action\":\"copy\"}}"],
        setByScript : ["fieldsToSet={\"labels\":{\"action\":\"script\",\"value\":\"$groovyExpression.getDescription\"}}"],
        setByTemplate : ["fieldsToSet={\"labels\":{\"action\":\"template\",\"value\":\"$labelsByTemplate\"}}"]
]

def addComment = [
        not : ["commentType=", "comment="],
        commentAddedBytemplate : ["commentType=template","comment=commentAddedBytemplate"],
        expression : [ "commentType=expression","comment=$groovyExpression.getDescription" ],
        runAsSpecificUser : [ "valueType=template", "comment=runAsSpecificUser" ],
        runAsUserInFieldAssignee : [ "commentType=template", "comment=runAsUserInFieldAssignee" ],
        runAsUserInFieldReporter: [ "commentType=template", "comment=runAsUserInFieldReporter" ],
        runAsUserInFieldCreator : [ "commentType=template", "comment=runAsUserInFieldCreator" ],
        runAsUserFromScript : [ "commentType=template", "comment=runAsUserFromScript" ],
        commentVisibleToJiraSoftwareUsers : ["commentType=template", "comment=commentVisibleToJiraSoftwareUsers"],
        commentVisibleToJiraAdminRoles: ["commentType=template", "comment=commentVisibleToJiraAdminRoles"],
        commentVisibleToTestGroup : ["commentType=template", "comment=commentVisibleToTestGroup"],
        commentVisibleToTestProjectRole : ["commentType=template", "comment=commentVisibleToTestProjectRole"],
]

def commentVisibility = [
        notSelected : [ "restrictToGroup=", "restrictToProjectRole=" ],
        jiraAdminGroups : [ "restrictToGroup=$jiraAdminGrooup", "restrictToProjectRole=" ],
        jiraAdminRoles : [ "restrictToGroup=", "restrictToProjectRole=$jiraAdminRoleId" ],
        jiraSoftwareUsers : ["restrictToGroup=$testGroup", "restrictToProjectRole="],
]

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'transition_issue_to_in_progress'
    def cloud =  "{\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"transition\":\"In Progress@@${workflow}\",\"runAsType\":\"currentUser\"}"
    def server =   ["selectedLinkType=$value" , transitions.byName , options.allUnselected , addFields.noField , addComment.not , commentVisibility.notSelected , runAsUser.currentUser , conditionalExecution.false]
    addTransitionFunction(transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud){
        moveTransitionFunction(transition + i, 4)
    }
}

statusList.eachWithIndex { key, value, i ->
    def transition = 'transition_current_issue_to_' + key
    def server =  [transitions.specifyName, "transitions=$value" , conditionalExecution.false , "selectedLinkType=$relatedIssue.currentIssue" , options.allUnselected , addFields.noField , addComment.not , commentVisibility.notSelected , runAsUser.currentUser]
    def cloud =  "{\"conditionalExecution\":false,\"transition\":\"${value}@@${workflow}\",\"runAsType\":\"currentUser\"}"
    addTransitionFunction(transition ,'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud){
        moveTransitionFunction(transition , 4)
    }
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'check_trigger_calculated_transition'
    def server =  [conditionalExecution.false ,  "selectedLinkType=$value" , transitions.calculated , options.allUnselected , addFields.noField , addComment.not , commentVisibility.notSelected , runAsUser.currentUser]
    def cloud =  "{\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"transition\":\"21\",\"runAsType\":\"currentUser\"}"
    addTransitionFunction(transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud){
        moveTransitionFunction(transition + i, 4)
    }
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'transition_issue_to_in_progress_only_if_condition_true'
    def server =  [conditionalExecution.true ,  "selectedLinkType=$value" , transitions.byName , options.allUnselected , addFields.noField , addComment.not , commentVisibility.notSelected , runAsUser.currentUser]
    def cloud =  "{\"conditionalExecution\":true,\"conditionalExecutionScript\":\"$nunjuckExpression.checkPriorityHigh\",\"targetIssue\":\"$value\",\"transition\":\"In Progress@@${workflow}\",\"runAsType\":\"currentUser\"}"
    addTransitionFunction(transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud){
        moveTransitionFunction(transition + i, 4)
    }
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'transition_issue_to_in_progress_and_add_labels_set_by_template'
    def server =  [conditionalExecution.false ,  "selectedLinkType=$value" , transitions.byName , options.allUnselected , addFields.setByTemplate , addComment.not , commentVisibility.notSelected , runAsUser.currentUser]
    def cloud =  "{\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"transition\":\"In Progress@@${workflow}\",\"runAsType\":\"currentUser\",\"fields\":{\"labels\":{\"value\":\"$labelsByTemplate\"}}}"
    addTransitionFunction(transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud){
        moveTransitionFunction(transition + i, 4)
    }
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'commentAddedBytemplate'
    def server =  [conditionalExecution.false ,  "selectedLinkType=$value" , transitions.byName , options.allUnselected , addFields.noField , addComment.commentAddedBytemplate , commentVisibility.notSelected , runAsUser.currentUser]
    def cloud =  "{\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"transition\":\"In Progress@@${workflow}\",\"runAsType\":\"currentUser\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\"}"
    addTransitionFunction(transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud){
        moveTransitionFunction(transition + i, 4)
    }
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'commentVisibleToJiraAdminRoles'
    def server =  [conditionalExecution.false ,  "selectedLinkType=$value" , transitions.byName , options.allUnselected , addFields.noField , addComment.commentVisibleToJiraAdminRoles , commentVisibility.jiraAdminRoles , runAsUser.currentUser]
    def cloud =  "{\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"transition\":\"In Progress@@${workflow}\",\"runAsType\":\"currentUser\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",\"restrictToProjectRoleId\":$jiraAdminRoleId}"
    addTransitionFunction(transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud){
        moveTransitionFunction(transition + i, 4)
    }
}

runAsUser.remove("currentUser")
runAsUser.eachWithIndex { userType, fields, idx ->
    relatedIssue.eachWithIndex { key, value, i ->
        def transition = 'runAs_' + userType + i
        def cloud =  "{\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"transition\":\"In Progress@@${workflow}\",$fields}"
        def server =  ["selectedLinkType=$value" , transitions.byName , options.allUnselected , addFields.noField , addComment.not , commentVisibility.notSelected , conditionalExecution.false , fields]
        addTransitionFunction( transition , 'postfunction', info?.isCloud ? cloud : server, functionKey)
        if(!isCloud){
            moveTransitionFunction(transition , 4)
        }
    }
}


createWorkflowScheme()
createProject()

def current = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'current')
def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[]}], 'Sub-task')
def epic = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic')
def issueBelongsToEpic = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic[]} ], 'BelongsToEpic')
def initiative = createIssue([type: 'Initiative', summary: 'JMWE_Issue' ], 'Initiative')
def epic_initiative = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative')
def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def blocks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'blocks')
def clones = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'clones')
def duplicates = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'duplicates')
def relatesTo = createIssue([type: 'Task', summary: 'JMWE_Task'], 'relatesTo')
def jqlIssue = createIssue([type: 'Task', summary: 'JQL_ISSUE'], 'jqlIssue')

updateIssue([issue: {->epic_initiative[]}, field: "Parent Link", value: {->initiative[]}], "parent initiative child epic")

def linkIssuesMap = [
        blocks : {->blocks[]},
        "$clonesLinkType" : {->clones[]},
        duplicates : {->duplicates[]},
        'relates to': {->relatesTo[]}
]

linkIssuesMap.eachWithIndex { key, value, i ->
    linkIssue([issue: {->issueLinks[]}, toIssue: value, link: "$key"], key)
}

def relatedIssuesMap = [
        {->current[]} : {->current[]},
        {->parent[]} : {->subtask[]},
        {->subtask[]} : {->parent[]},
        {->epic[]} : {->issueBelongsToEpic[]},
        {->issueBelongsToEpic[]} : {->epic[]},
        {-> initiative[]} : {->epic_initiative[]},
        {->epic_initiative[]} : {-> initiative[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->blocks[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->clones[]},
        {->clones[]} : {->issueLinks[]},
        {->issueLinks[]} : {->duplicates[]},
        {->duplicates[]} : {->issueLinks[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->relatesTo[]} : {->issueLinks[]},
        {->issueLinks[]} : {->jqlIssue[]}
]

[
        'transition_issue_to_in_progress',
].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        def transition = it + i
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 ext: ":By $transition:",
                 sleep: sleep,
                 parameters: [
                         issue     : key,
                         transition: transition,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : ":Of status after transition issue with:$transition:",
                 parameters: [
                         issue: value,
                         field: "Status"
                 ],
                 data      : [/Status  . . . . . . . . . . . : In Progress/],
                ],
                [action    : 'transitionIssue',
                 sleep: sleep,
                 ext: ":change target issue status to TO DO status after checking after transition issue with:$transition:",
                 parameters: [
                         issue     : value,
                         transition: "To Do",
                 ]
                ],
        ])
    }
}

[
        'transition_issue_to_in_progress_only_if_condition_true'
].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        ["Low","High"].each {priority ->
            def transition = it + i
            gint.taskHelper.add([
                    [action: 'setFieldValue',
                     sleep: sleep,
                     ext: ":Of priority to_ $priority:before transition issue with:$transition",
                     parameters: [
                             issue: key,
                             field: 'Priority',
                             value: priority
                     ]
                    ],
                    [action    : 'transitionIssue',
                     ext: ":By_ $transition when priority of issue is: $priority",
                     sleep: sleep,
                     parameters: [
                             issue     : key,
                             transition: it + i,
                     ]
                    ],
            ])
            if(priority == "High"){
                gint.taskHelper.add([
                        [action    : 'getFieldValue',
                         sleep: sleep,
                         ext       : ":Of status after transition issue with_ $transition:when priority of issue is_ $priority:",
                         parameters: [
                                 issue: value,
                                 field: "Status"
                         ],
                         data      : [ /Status  . . . . . . . . . . . : In Progress/ ],
                        ],
                ])
            }else{
                gint.taskHelper.add([
                        [action    : 'getFieldValue',
                         sleep: sleep,
                         ext       : ":Of status after transition issue with_ $transition:when priority of issue is_ $priority:",
                         parameters: [
                                 issue: value,
                                 field: "Status"
                         ],
                         failData      : [/Status  . . . . . . . . . . . : In Progress/],
                        ],
                ])
            }
            gint.taskHelper.add([
                    [action    : 'transitionIssue',
                     sleep: sleep,
                     ext: ": change target issue status to TO DO status after transition issue with:$transition:when priority is $priority",
                     parameters: [
                             issue     : value,
                             transition: "To Do",
                     ]
                    ],
            ])
        }
    }
}

[
        'check_trigger_calculated_transition'
].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        def transition  = it + i
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 ext: ":By transition_ $transition:",
                 sleep: sleep,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : ":Of status after transition issue with:$transition",
                 parameters: [
                         issue: value,
                         field: "Status"
                 ],
                 data      : [/Status  . . . . . . . . . . . : In Progress/],
                ],
                [action    : 'transitionIssue',
                 sleep: sleep,
                 ext: ": target issue to TO DO status after transition issue with:$transition",
                 parameters: [
                         issue     : value,
                         transition: "To Do",
                 ]
                ],
        ])
    }
}

[
        'transition_current_issue_to_',
].collect {
    statusList.eachWithIndex { key, value, i ->
        def transition = it + key + i
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 ext: ":By transition $transition",
                 sleep: sleep,
                 parameters: [
                         issue     : { -> current[] },
                         transition: it + key,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : ":Of status after transition issue with transition:$transition",
                 parameters: [
                         issue: { -> current[] },
                         field: "Status"
                 ],
                 data      : [/Status  . . . . . . . . . . . : $value/],
                 failData  : [/Status  . . . . . . . . . . . : To Do/]
                ],
                [action    : 'transitionIssue',
                 ext: ":Change issue status to TO DO after transition issue with:$transition",
                 sleep: sleep,
                 parameters: [
                         issue     : { -> current[] },
                         transition: "To Do",
                 ]
                ],
        ])
    }
}

// Need ACLI support to addTransitionScreen to existing workflow transition - ACLI-3646
[
        //'transition_issue_to_in_progress_and_add_labels_set_by_template',
].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        def transition = it + i
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 ext: ":By transition_ $transition",
                 sleep: sleep,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : ":Of status after transition issue with transition:$transition",
                 parameters: [
                         issue: value,
                         field: "Status"
                 ],
                 data      : [/Status  . . . . . . . . . . . : In Progress/],
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : ":Of labels after transition issue with transition:$transition",
                 parameters: [
                         issue: value,
                         field : "Labels"
                 ],
                 data      : [ /Labels  . . . . . . . . . . . : $labelsByTemplate/ ],
                ],
                [action    : 'transitionIssue',
                 ext: ":Change issue status to TO DO after transition issue with:$transition",
                 sleep: sleep,
                 parameters: [
                         issue     : value,
                         transition: "To Do",
                 ]
                ],
        ])
    }
}

// Need ACLI support to addTransitionScreen to existing workflow transition - ACLI-3646
[
        //'commentAddedBytemplate',
        //'commentVisibleToJiraAdminRoles',
].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ':' + it + i,
                 sleep: sleep,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : it + i,
                 parameters: [
                         issue: value,
                         field: "Status"
                 ],
                 data      : [/Status  . . . . . . . . . . . : In Progress/],
                 failData  : [/Status  . . . . . . . . . . . : To Do/]
                ],
                [action: 'getComments', ext: " : add comment by template :" + it + i,
                 sleep: sleep,
                 parameters: [
                         issue: value
                 ],
                 data:[   /$user added a comment on/,
                          /$it/
                 ],
                ],
                [action    : 'transitionIssue',
                 ext: ": To Do:" + it+ i,
                 sleep: sleep,
                 parameters: [
                         issue     : value,
                         transition: "To Do",
                 ]
                ],
        ])
    }
}

[
        'runAs_userInFieldAssignee'
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
            gint.taskHelper.add([
                    [action: 'assignIssue',
                     sleep: sleep,
                     ext: ": assign the issue to $testUser to check run as user in field assignee option: " + it + i,
                     parameters:[
                             issue: key,
                             assignee: testUser
                     ],
                    ],
                    [action    : 'transitionIssue',
                     sleep: sleep,
                     ext: ': Check run as :  ' + it + i,
                     parameters: [
                             issue     : key,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     sleep: sleep,
                     ext       : " :Check:" + it + i,
                     parameters: [
                             issue: value,
                             field: "Status"
                     ],
                     data      : [/Status  . . . . . . . . . . . : In Progress/],
                    ],
                    [action: 'getIssueHistoryList',
                     sleep: sleep,
                     ext: ": postfunction should be triggered by user : $testUser when :"+ it+i,
                        parameters: [
                                issue: value,
                                outputType: "Text",
                                columns: "Author,Field,'To String'",
                                select: ["Author:$testUser","Field:status","To String:In Progress"],
                                ],
                            data:[ "$testUser", "status", "In Progress" ],
                    ],
                    [action    : 'transitionIssue',
                     sleep: sleep,
                     ext: ': current issue to original status to check next option for : ' + it + i,
                     parameters: [
                             issue     : value,
                             transition: "To Do",
                     ]
                    ],
            ])

        }
}

runAsUser.remove("userInFieldAssignee")
runAsUser.eachWithIndex { userType, fields, idx ->
    relatedIssuesMap.eachWithIndex { key, value, i ->
        def transition = 'runAs_' + userType + i
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 sleep: sleep,
                 ext: ': Check run as :  ' + transition,
                 parameters: [
                         issue     : key,
                         transition:  transition,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : " :run as :" + transition,
                 parameters: [
                         issue: value,
                         field: "Status"
                 ],
                 data      : [/Status  . . . . . . . . . . . : In Progress/],
                ],
                [action: 'getIssueHistoryList',
                 sleep: sleep,
                 ext: ": postfunction should be triggered by user : $user when :"+ transition,
                 parameters: [
                         issue: value,
                         outputType: "Text",
                         columns: "Author,Field,'To String'",
                         select: ["Author:$getCurrentUserName","Field:status","To String:In Progress"],
                 ],
                 data:[ "$getCurrentUserName", "status", "In Progress" ],
                ],
                [action    : 'transitionIssue',
                 sleep: sleep,
                 ext: ': current issue to original status to check next option for : ' + transition,
                 parameters: [
                         issue     : value,
                         transition: "To Do",
                 ]
                ],
        ])
    }
}
