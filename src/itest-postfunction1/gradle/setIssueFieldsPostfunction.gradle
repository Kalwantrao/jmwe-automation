buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/itest-postfunction1/postfunction.gradle'

def functionKey = info?.isCloud ? "com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.${testCloudBuild}__SetFieldValueFunction" : 'com.innovalog.jmwe.jira-misc-workflow-extensions:set-issue-fields-function'

def fieldsOptions = [
        noOption : ["fields=[{\"fieldId\":\"labels\",\"value\":\"default_value\",\"options\":[],\"isTemplate\":true}]"],
        ifEmpty : ["fields=[{\"fieldId\":\"labels\",\"value\":\"ifEmpty\",\"options\":[\"copyOnlyIfNotSet\"],\"isTemplate\":true}]"],
        createMissingValues : ["fields=[{\"fieldId\":\"components\",\"value\":\"createMissingValues\",\"options\":[\"createMissingValues\"],\"isTemplate\":true}]"],
        ignoreEmptyValue : ["fields=[{\"fieldId\":\"labels\",\"value\":\"\",\"options\":[\"ignoreEmptyValue\"],\"isTemplate\":true}]"],
        appendValues : ["fields=[{\"fieldId\":\"labels\",\"value\":\"appendValues\",\"options\":[\"appendValues\"],\"isTemplate\":true}]"],
        allOptions : ["fields=[{\"fieldId\":\"labels\",\"value\":\"test_label\",\"options\":[\"copyOnlyIfNotSet\",\"createMissingValues\",\"ignoreEmptyValue\",\"appendValues\"],\"isTemplate\":true}]"],
        removeValues : ["fields=[{\"fieldId\":\"components\",\"value\":\"createMissingValues\",\"options\":[\"removeValues\"],\"isTemplate\":true}]"],
        conditionalExecution : ["fields=[{\"fieldId\":\"labels\",\"value\":\"conditionalExecution\",\"options\":[],\"isTemplate\":true}]"],
        runAsCurrentUser : ["fields=[{\"fieldId\":\"labels\",\"value\":\"runAsCurrentUser\",\"options\":[],\"isTemplate\":true}]"],
        runAsSpecificUser : ["fields=[{\"fieldId\":\"labels\",\"value\":\"runAsSpecificUser\",\"options\":[],\"isTemplate\":true}]"],
        runAsUserInFieldAssignee : ["fields=[{\"fieldId\":\"labels\",\"value\":\"runAsUserInFieldAssignee\",\"options\":[],\"isTemplate\":true}]"],
        runAsUserInFieldReporter : ["fields=[{\"fieldId\":\"labels\",\"value\":\"runAsUserInFieldReporter\",\"options\":[],\"isTemplate\":true}]"],
        runAsUserInFieldCreator : ["fields=[{\"fieldId\":\"labels\",\"value\":\"runAsUserInFieldCreator\",\"options\":[],\"isTemplate\":true}]"],
        runAsUserReturnFromScript : ["fields=[{\"fieldId\":\"labels\",\"value\":\"runAsUserReturnFromScript\",\"options\":[],\"isTemplate\":true}]"],
]

def relatedIssue = [:]
def relatedIssuesMap = [:]

relatedIssuesList.each{
    relatedIssue.putAll(createRelatedIssuesMap('CONFIGURATION', it, projectName, " "))
    relatedIssuesMap.putAll(createRelatedIssuesMap('TRANSITION', it, projectName, " "))
}


["Create_transition"].each {
    def server =  [conditionalExecution.false ,  fieldsOptions.noOption , "selectedLinkType=currentIssue:*" , runAsUser.currentUser]
    def cloud =  "{\"conditionalExecution\":true,\"conditionalExecutionScript\":\"{{ issue.fields.issuetype.name == 'Story' }}\",\"sendNotifications\":false,\"problems\":[],\"targetIssue\":\"currentIssue:*\",\"fieldsConfig\":[{\"fieldId\":\"labels\",\"options\":{},\"value\":\"create_transition\"}],\"runAsType\":\"addonUser\"}"
    if(isCloud){
        addTransitionFunctionOnCreateTransition('Create', 'postfunction', info?.isCloud ? cloud : server, functionKey)
    }
}

relatedIssue.eachWithIndex { key, value, i ->
    def server =  [conditionalExecution.false ,  fieldsOptions.noOption , "selectedLinkType=$value" , runAsUser.currentUser]
    def cloud =  "{\"sendNotifications\":false,\"problems\":[],\"targetIssue\":\"$value\",\"fieldsConfig\":[{\"fieldId\":\"labels\",\"options\":{},\"value\":\"default_value\"}],\"runAsType\":\"addonUser\"}"
    addTransitionFunction('setFieldLabelsToTargetIssue' + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def server =  [conditionalExecution.false, fieldsOptions.ifEmpty , "selectedLinkType=$value" , runAsUser.currentUser]
    def cloud =  "{\"sendNotifications\":true,\"problems\":[],\"targetIssue\":\"$value\",\"fieldsConfig\":[{\"fieldId\":\"labels\",\"options\":{\"copyOnlyIfNotSet\":true},\"value\":\"ifEmpty\"}],\"runAsType\":\"addonUser\"}"
    addTransitionFunction('ifEmpty' + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def server =  [conditionalExecution.false , fieldsOptions.createMissingValues , "selectedLinkType=$value" , runAsUser.currentUser]
    if(!isCloud) {
        addTransitionFunction('createMissingValueComponent' + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    }
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def server =  [conditionalExecution.false , fieldsOptions.ignoreEmptyValue , "selectedLinkType=$value" , runAsUser.currentUser]
    def cloud =  "{\"sendNotifications\":false,\"problems\":[],\"targetIssue\":\"$value\",\"fieldsConfig\":[{\"fieldId\":\"labels\",\"options\":{\"ignoreEmptyValue\":true},\"value\":\"\"}],\"runAsType\":\"addonUser\"}"
    addTransitionFunction('ignoreEmptyValue' + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def server =  [conditionalExecution.false , fieldsOptions.appendValues , "selectedLinkType=$value" , runAsUser.currentUser]
    def cloud =  "{\"sendNotifications\":false,\"problems\":[],\"targetIssue\":\"$value\",\"fieldsConfig\":[{\"fieldId\":\"labels\",\"options\":{\"appendValues\":true},\"value\":\"appendValues\"}],\"runAsType\":\"addonUser\"}"
    addTransitionFunction('appendValues' + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def server =  [conditionalExecution.false , fieldsOptions.removeValues , "selectedLinkType=$value" , runAsUser.currentUser]
    if(!isCloud) {
        addTransitionFunction('removeValues' + i, 'postfunction', server, functionKey)
    }
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def server =  [conditionalExecution.true ,  fieldsOptions.conditionalExecution , "selectedLinkType=$value" , runAsUser.currentUser]
    def cloud =  "{\"sendNotifications\":true,\"problems\":[],\"targetIssue\":\"$value\",\"fieldsConfig\":[{\"fieldId\":\"labels\",\"options\":{},\"value\":\"conditionalExecution\"}],\"conditionalExecution\":true,\"conditionalExecutionScript\":\"$nunjuckExpression.checkPriorityHigh\",\"runAsType\":\"addonUser\"}"
    addTransitionFunction('conditionalExecution' + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

["currentUser","userFromScriptInvalid"].each {
    runAsUser.remove(it)
}

runAsUser.eachWithIndex { userType, runAsUserFields, idx ->
    relatedIssue.take(1).eachWithIndex { key, value, i ->
        def transition = userType + i
        def server =  [runAsUserFields ,  conditionalExecution.false , "selectedLinkType=$value" , ["fields=[{\"fieldId\":\"labels\",\"value\":\"$transition\",\"options\":[],\"isTemplate\":true}]"]]
        def cloud =  "{\"sendNotifications\":false,\"problems\":[],\"targetIssue\":\"$value\",\"fieldsConfig\":[{\"fieldId\":\"labels\",\"options\":{},\"value\":\"$transition\"}],$runAsUserFields}"
        addTransitionFunction(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
        if(!isCloud) {
            moveTransitionFunction(transition, 3)
        }
    }
}

(1..2).each {
    gint.taskHelper.add([
            [action: 'addVersion', ext: ': create versions : ' + it,
             parameters: [
                     project: projectName,
                     version: it
             ]
            ],
            [action: 'addComponent', ext: ': create Component : ' + it,
             parameters: [
                     project: projectName,
                     component: 'component' + it
             ],
            ]
    ])
}

def storyTypeIssue = createIssue([type: 'Story', summary: 'JMWE_Issue'], 'storyTypeIssue')
def taskTypeIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'taskTypeIssue')

def getCurrentUserName = info?.isCloud? info?.userDisplayName : user

if(isCloud){
    gint.taskHelper.add([
            [action    : 'getFieldValue',
             sleep: sleep,
             ext       : ":Of Labels_after create issue with create transition when issue type is story:",
             parameters: [
                     issue: { ->storyTypeIssue[] },
                     field: "Labels"
             ],
             data      : [/Labels  . . . . . . . . . . . : create_transition/],
            ],
            [action    : 'getFieldValue',
             sleep: sleep,
             ext       : ":Of Labels_after create issue with create transition when issue type is task:",
             parameters: [
                     issue: { ->taskTypeIssue[] },
                     field: "Labels"
             ],
             failData      : [/Labels  . . . . . . . . . . . : create_transition/],
            ],
    ])
}

[
        'setFieldLabelsToTargetIssue'
].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        def transition = it + i
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 sleep: sleep,
                 ext: ':default configuration:' + transition,
                 parameters: [
                         issue     : key,
                         transition: transition,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : ":Of Labels_after transition the issue with transition:" + transition,
                 parameters: [
                         issue: value,
                         field: "Labels"
                 ],
                 data      : [/Labels  . . . . . . . . . . . : default_value/],
                ],
                [action    : 'setFieldValue',
                 sleep: sleep,
                 ext       : ":Remove the labels added by postfunction:" + transition,
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: " "
                 ],
                 ]
        ])
    }
}

[
        'ifEmpty'
].collect {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'setFieldValue',
                 sleep: sleep,
                 ext       : ":to empty:" +it + i,
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: " "
                 ],
                ],
                [action    : 'transitionIssue',
                 sleep: sleep,
                 ext: ": when  empty: " + it+i ,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : ":when empty:" + it + i,
                 parameters: [
                         issue: value,
                         field: "Labels"
                 ],
                 data      : [/Labels  . . . . . . . . . . . : ifEmpty/],
                ],
                [action    : 'setFieldValue',
                 sleep: sleep,
                 ext       : ": when not empty:" + it + i,
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: " "
                 ],
                ],
                [action    : 'setFieldValue',
                 sleep: sleep,
                 ext       : ": to check when not empty:" + it + i,
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: "test_label"
                 ],
                ],
                [action    : 'transitionIssue',
                 sleep: sleep,
                 ext: ':when not empty' + it + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : "when not empty" + it + i,
                 parameters: [
                         issue: value,
                         field: "Labels"
                 ],
                 failData      : [/Labels  . . . . . . . . . . . : ifEmpty/],
                ],
        ])
    }
}

[
        'ignoreEmptyValue'
].collect {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'setFieldValue',
                 sleep: sleep,
                 ext       : ": when ignore empty value:" + it + i,
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: " "
                 ],
                ],
                [action    : 'setFieldValue',
                 sleep: sleep,
                 ext       : ": to check when ignore empty value:" + it + i,
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: "test_label"
                 ],
                ],
                [action    : 'transitionIssue',
                 sleep: sleep,
                 ext: ': Ignore empty values' + it + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : "Ignore empty values" + it + i,
                 parameters: [
                         issue: value,
                         field: "Labels"
                 ],
                 data      : [/Labels  . . . . . . . . . . . : test_label/],
                ],
        ])
    }
}

[
        'appendValues'
].collect {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'setFieldValue',
                 sleep: sleep,
                 ext       : ": Of labels to empty to check :" + it + i,
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: " "
                 ],
                ],
                [action    : 'setFieldValue',
                 sleep: sleep,
                 ext       : ": Of labels to default_value to check:" + it + i,
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: "default_value"
                 ],
                ],
                [action    : 'transitionIssue',
                 sleep: sleep,
                 ext: ': Add source value to destination field ' + it + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : "Add source value to destination field" + it + i,
                 parameters: [
                         issue: value,
                         field: "Labels"
                 ],
                 data      : [/Labels  . . . . . . . . . . . : appendValues default_value/],
                ],
        ])
    }
}

[
        'createMissingValueComponent'
].collect {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        if(!isCloud) {
            gint.taskHelper.add([
                    [action    : 'transitionIssue',
                     sleep     : sleep,
                     ext       : ':Create missing value' + it + i,
                     parameters: [
                             issue     : key,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     sleep     : sleep,
                     ext       : "Create missing value" + it + i,
                     parameters: [
                             issue: value,
                             field: "Component/s"
                     ],
                     data      : ["Component/s . . . . . . . . . : createMissingValue"],
                    ],
            ])
        }
    }
}

[
        'removeValues'
].collect {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        if(!isCloud) {
            gint.taskHelper.add([
                    [action    : 'transitionIssue',
                     sleep     : sleep,
                     ext       : ':Remove source value from destination field' + it + i,
                     parameters: [
                             issue     : key,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     sleep     : sleep,
                     ext       : "Remove source value from destination field" + it + i,
                     parameters: [
                             issue: value,
                             field: "Component/s"
                     ],
                     failData  : ["Component/s . . . . . . . . . : createMissingValue"],
                    ],
            ])
        }
    }
}

relatedIssuesMap.take(1).eachWithIndex{ key, value,  i ->
    gint.taskHelper.add(
            action: 'assignIssue',
            sleep: sleep,
            ext: ": to $user " + i,
            parameters: [
                    issue: key,
                    userId: user
            ]
    )
}

runAsUser.eachWithIndex { userType, runAsUserFields, idx ->
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        def transition = userType + i
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 sleep: sleep,
                 ext: ':' + transition,
                 parameters: [
                         issue     : key,
                         transition: transition,
                 ]
                ],
        ])
        if(userType == 'currentUser') {
            if (isCloud) {
                gint.taskHelper.add([
                        [action    : 'getIssueHistoryList',
                         sleep     : sleep,
                         ext       : ": " + transition,
                         parameters: [
                                 issue     : value,
                                 outputType: "text",
                                 select    : ["Field:labels","To String:$transition","Author:$addonName"],
                                 columns   : "Author,Field,'To String'"
                         ],
                         data      : ["$addonName", "labels", "$transition"],
                        ],
                ])
            }
        }
        else {
            gint.taskHelper.add([
                    [action    : 'getIssueHistoryList',
                     sleep: sleep,
                     ext       : ": " + transition,
                     parameters: [
                             issue: value,
                             outputType: "text",
                             select: ["Field:labels","To String:$transition","Author:$getCurrentUserName"],
                             columns: "Author,Field,'To String'"
                     ],
                     data      : ["$getCurrentUserName", "labels", "$transition"],
                    ],
            ])
        }
    }
}

[
        'conditionalExecution'
].each {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action: 'updateIssue',
                 sleep: sleep,
                 ext: ": set priority Low to check conditional execution true " + it+ i,
                 parameters: [
                         issue: key,
                         priority: 'Low'
                 ]],
                [action    : 'transitionIssue',
                 sleep: sleep,
                 ext: ': ' + it +' : when false' + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : ": $it when false" +  i,
                 parameters: [
                         issue: value,
                         field: "Labels"
                 ],
                 failData      : [/Labels  . . . . . . . . . . . : conditionalExecution/],
                ],
                [action: 'updateIssue',
                 sleep: sleep,
                 ext: ": set priority High to check conditional execution true " + it+ i,
                 parameters: [
                         issue: key,
                         priority: 'High'
                 ]],
                [action    : 'transitionIssue',
                 sleep: sleep,
                 ext: ': ' + it +' : when true' + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : ": $it _ when true" +  i,
                 parameters: [
                         issue: value,
                         field: "Labels"
                 ],
                 data      : [/Labels  . . . . . . . . . . . : conditionalExecution/],
                ],
                [action    : 'setFieldValue',
                 sleep: sleep,
                 ext       : ": $it _ to empty" +  i,
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: " "
                 ],
                ],
        ])
    }
}
