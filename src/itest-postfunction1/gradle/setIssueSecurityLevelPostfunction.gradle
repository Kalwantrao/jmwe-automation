buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/itest-postfunction1/postfunction.gradle'

def functionKey = info?.isCloud ? "com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.${testCloudBuild}__SetIssueSecurityLevelFunction" : 'com.innovalog.jmwe.jira-misc-workflow-extensions:setsecurityfromrole'

def securityLevels = [
        setToNoMembers : 'Level1',
        setToAdminProjectRoleUsers : 'Level2',
        setToAdminGroupUsers : 'Level3',
        setToProjectLead : 'Level4',
        setToAssignee : 'Level5',
        setToCurrentUser : 'Level6',
        setToReporter : 'Level7',
        setToServiceProjectCustomer : 'Level8',
        setToApplicationAccessAnyLoggedInUser : 'Level9'
]

def JIRA_ADMIN_PROJECT_ROLE_ID = getProjectRoleId("Administrators")
def jiraAdminRoleId = {->JIRA_ADMIN_PROJECT_ROLE_ID.getAt(0).trim()}

def JIRA_TEST_PROJECT_ROLE_ID = getProjectRoleId("testprojectrole")
def testProjectRoleId = {->JIRA_TEST_PROJECT_ROLE_ID.getAt(0).trim()}

def id_level1 = getSecurityLevelId("Level1", TestProject)
def id_level2 = getSecurityLevelId("Level2", TestProject)
def id_level3 = getSecurityLevelId("Level3", TestProject)
def id_level4 = getSecurityLevelId("Level4", TestProject)
def id_level5 = getSecurityLevelId("Level5", TestProject)
def id_level6 = getSecurityLevelId("Level6", TestProject)
def id_level7 = getSecurityLevelId("Level7", TestProject)
def id_level8 = getSecurityLevelId("Level8", TestProject)
def id_level9 = getSecurityLevelId("Level9", TestProject)

def level1_id =  {->id_level1.getAt(0).toString().trim()}
def level2_id =  {->id_level2.getAt(0).toString().trim()}
def level3_id =  {->id_level3.getAt(0).toString().trim()}
def level4_id =  {->id_level4.getAt(0).toString().trim()}
def level5_id =  {->id_level5.getAt(0).toString().trim()}
def level6_id =  {->id_level6.getAt(0).toString().trim()}
def level7_id =  {->id_level7.getAt(0).toString().trim()}
def level8_id =  {->id_level8.getAt(0).toString().trim()}
def level9_id =  {->id_level9.getAt(0).toString().trim()}

[
       // 'Level1_IfUserIsMemberOfTestProjectRole'
].each {
    def server =  ["selectedProjectRoleId=$testProjectRoleId", "selectedSecurityLevelId=$level1_id" , conditionalExecution.false]
    def cloud =  "{\"securityLevel\":\"$level1_id\",\"role\":$testProjectRoleId,\"conditionalExecution\":false,}"
    addTransitionFunction(it, 'postfunction', info?.isCloud ? cloud : server, functionKey)

    def issue = createIssue([type: 'Task', summary: 'JMWE_Issue'], it)

    gint.taskHelper.add([
            [action    : 'transitionIssue', ext: " :" + it,
             sleep: sleep,
             parameters: [
                     transition: it,
                     issue     : { -> issue[] },
             ],
            ],
            [action    : 'getFieldValue', ext: ": " + it,
             sleep: sleep,
             parameters: [
                     issue: { -> issue[] },
                     field: "Security Level",
             ],
             data      : ["Security Level  . . . . . . . : Level1"]
            ]
    ])
}

[
        'Level2_IfUserIsMemberOfAdminProjectRole'
].each {
    def server =  ["selectedProjectRoleId=$jiraAdminRoleId", "selectedSecurityLevelId=$level2_id", conditionalExecution.false]
    def cloud =  "{\"securityLevel\":\"$level2_id\",\"role\":$jiraAdminRoleId,\"conditionalExecution\":false,}"
    addTransitionFunction(it, 'postfunction', info?.isCloud ? cloud : server, functionKey)

    def issue = createIssue([type: 'Task', summary: 'JMWE_Issue'], it)

    gint.taskHelper.add([
            [action    : 'transitionIssue', ext: " :" + it,
             sleep: sleep,
             parameters: [
                     transition: it,
                     issue     : { -> issue[] },
             ],
            ],
            [action    : 'getFieldValue', ext: ": " + it,
             sleep: sleep,
             parameters: [
                     issue: { -> issue[] },
                     field: "Security Level",
             ],
             data      : ["Security Level  . . . . . . . : Level2"]
            ]
    ])
}

[
        'setLevel2_IfUserIsMemberOfAdminProjectRoleAndConditionalExecutionTrue'
].each {
    def server =  ["selectedProjectRoleId=$jiraAdminRoleId", "selectedSecurityLevelId=$level2_id", conditionalExecution.true]
    def cloud =  "{\"securityLevel\":\"$level2_id\",\"role\":$jiraAdminRoleId,$conditionalExecution.true}"
    addTransitionFunction(it, 'postfunction', info?.isCloud ? cloud : server, functionKey)

    def issue = createIssue([type: 'Task', summary: 'JMWE_Issue'], it)

    ["Low", "High"].each {priority ->
        gint.taskHelper.add([
                [action: "setFieldValue", ext: " Of priority to $priority",
                 sleep: sleep,
                 parameters: [
                         issue: {->issue[]},
                         field: "Priority",
                         value: priority
                 ]],
                [action    : 'transitionIssue', ext: ":by $it when priority is $priority",
                 sleep: sleep,
                 parameters: [
                         transition: it,
                         issue     : { -> issue[] },
                 ],
                ],
        ])
        if(priority == "High"){
            gint.taskHelper.add([
                    [action    : 'getFieldValue', ext: ":Of security level after transition issue with:when priority is $priority " + it,
                     sleep: sleep,
                     parameters: [
                             issue: { -> issue[] },
                             field: "Security Level",
                     ],
                     data  : [ "Security Level  . . . . . . . : Level2" ],
                    ]
            ])
        }else{
            gint.taskHelper.add([
                    [action    : 'getFieldValue', ext: ":Of security level after transition issue with:when priority is $priority " + it,
                     sleep: sleep,
                     parameters: [
                             issue: { -> issue[] },
                             field: "Security Level",
                     ],
                     failData  : [ "Security Level  . . . . . . . : Level2" ],
                    ]
            ])
        }
    }

}

[
        'Level3_IfUserIsMemberOfAdminGroup'
].each {
    def server =  ["selectedProjectRoleId=$jiraAdminRoleId", "selectedSecurityLevelId=$level3_id", conditionalExecution.false]
    def cloud =  "{\"securityLevel\":\"$level3_id\",\"role\":$jiraAdminRoleId,\"conditionalExecution\":false,}"
    addTransitionFunction(it, 'postfunction', info?.isCloud ? cloud : server, functionKey)

    def issue = createIssue([type: 'Task', summary: 'JMWE_Issue'], it)

    gint.taskHelper.add([
            [action    : 'transitionIssue', ext: " :" + it,
             sleep: sleep,
             parameters: [
                     transition: it,
                     issue     : { -> issue[] },
             ],
            ],
            [action    : 'getFieldValue', ext: ": " + it,
             sleep: sleep,
             parameters: [
                     issue: { -> issue[] },
                     field: "Security Level",
             ],
             data      : ["Security Level  . . . . . . . : Level3"]
            ]
    ])
}

[
        'Level4_IfUserIsProjectLead'
].each {
    def server =  ["selectedProjectRoleId=$jiraAdminRoleId", "selectedSecurityLevelId=$level4_id", conditionalExecution.false]
    def cloud =  "{\"securityLevel\":\"$level4_id\",\"role\":$jiraAdminRoleId,\"conditionalExecution\":false,}"
    addTransitionFunction(it, 'postfunction', info?.isCloud ? cloud : server, functionKey)

    def issue = createIssue([type: 'Task', summary: 'JMWE_Issue'], it)

    gint.taskHelper.add([
            [action    : 'transitionIssue', ext: " :" + it,
             sleep: sleep,
             parameters: [
                     transition: it,
                     issue     : { -> issue[] },
             ],
            ],
            [action    : 'getFieldValue', ext: ": " + it,
             sleep: sleep,
             parameters: [
                     issue: { -> issue[] },
                     field: "Security Level",
             ],
             data      : ["Security Level  . . . . . . . : Level4"]
            ]
    ])
}

[
        'Level5_IfUserIsAssigneeOfCurrentIssue'
].each {
    def server =  ["selectedProjectRoleId=$jiraAdminRoleId", "selectedSecurityLevelId=$level5_id", conditionalExecution.false]
    def cloud =  "{\"securityLevel\":\"$level5_id\",\"role\":$jiraAdminRoleId,\"conditionalExecution\":false,}"
    addTransitionFunction(it, 'postfunction', info?.isCloud ? cloud : server, functionKey)

    def issue = createIssue([type: 'Task', summary: 'JMWE_Issue'], it)

    gint.taskHelper.add([
            [action    : 'setFieldValue', ext: ": Of assignee to current user " + it,
             sleep: sleep,
             parameters: [
                     issue: { -> issue[] },
                     field: "Assignee",
                     value: user
             ],
            ],
            [action    : 'transitionIssue', ext: " :" + it,
             sleep: sleep,
             parameters: [
                     transition: it,
                     issue     : { -> issue[] },
             ],
            ],
            [action    : 'getFieldValue', ext: ": " + it,
             sleep: sleep,
             parameters: [
                     issue: { -> issue[] },
                     field: "Security Level",
             ],
             data      : ["Security Level  . . . . . . . : Level5"]
            ],
            [action    : 'setFieldValue', ext: ":Of assignee to $testUser " + it,
             sleep: sleep,
             parameters: [
                     issue: { -> issue[] },
                     field: "Assignee",
                     value: testUser
             ],
            ],
            [action    : 'transitionIssue', ext: ":when current user is not an assignee of the issue" + it,
             sleep: sleep,
                    expected: -1,
             parameters: [
                     transition: it,
                     issue     : { -> issue[] },
             ],
            ],
    ])
}

[
        'Level6_IfUserIsCurrentUser'
].each {
    def server =  ["selectedProjectRoleId=$jiraAdminRoleId", "selectedSecurityLevelId=$level6_id", conditionalExecution.false]
    def cloud =  "{\"securityLevel\":\"$level6_id\",\"role\":$jiraAdminRoleId,\"conditionalExecution\":false,}"
    addTransitionFunction(it, 'postfunction', info?.isCloud ? cloud : server, functionKey)

    def issue = createIssue([type: 'Task', summary: 'JMWE_Issue'], it)

    gint.taskHelper.add([
            [action    : 'transitionIssue', ext: " :" + it,
             sleep: sleep,
             parameters: [
                     transition: it,
                     issue     : { -> issue[] },
             ],
            ],
            [action    : 'getFieldValue', ext: ": " + it,
             sleep: sleep,
             parameters: [
                     issue: { -> issue[] },
                     field: "Security Level",
             ],
             data      : ["Security Level  . . . . . . . : Level6"]
            ]
    ])
}

[
        'Level7_IfUserIsReporterOfCurrentIssue'
].each {
    def server =  ["selectedProjectRoleId=$jiraAdminRoleId", "selectedSecurityLevelId=$level7_id", conditionalExecution.false]
    def cloud =  "{\"securityLevel\":\"$level7_id\",\"role\":$jiraAdminRoleId,\"conditionalExecution\":false,}"
    addTransitionFunction(it, 'postfunction', info?.isCloud ? cloud : server, functionKey)

    def issue = createIssue([type: 'Task', summary: 'JMWE_Issue'], it)

    gint.taskHelper.add([
            [action    : 'transitionIssue', ext: " :" + it,
             sleep: sleep,
             parameters: [
                     transition: it,
                     issue     : { -> issue[] },
             ],
            ],
            [action    : 'getFieldValue', ext: ": " + it,
             sleep: sleep,
             parameters: [
                     issue: { -> issue[] },
                     field: "Security Level",
             ],
             data      : ["Security Level  . . . . . . . : Level7"]
            ],
            [action    : 'setFieldValue', ext: ": " + it,
             sleep: sleep,
             parameters: [
                     issue: { -> issue[] },
                     field: "Reporter",
                     value: testUser
             ],
            ],
            [action    : 'transitionIssue', ext: ":when the current user is not the reporter of the issue" + it,
             sleep: sleep,
             expected: -1,
             parameters: [
                     transition: it,
                     issue     : { -> issue[] },
             ],
            ],
    ])
}


/*
Review by CHIRAG: 16.07:
1. Delayed execution
2. Conditional execution : "Condition1" && "Condition2" , "Condition1" || "Condition2" = DONE

 */