/*
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory + '/src/itest-postfunction1/postfunction.gradle'

def functionKey =	info?.isCloud ?  "com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.${testCloudBuild}__CreateIssueFunction" : 'com.innovalog.jmwe.jira-misc-workflow-extensions:CreateIssue-function'

addVersion(projectName)

def JIRA_ADMIN_PROJECT_ROLE_ID = getProjectRoleId("Administrators")
def jiraAdminRoleId = {->JIRA_ADMIN_PROJECT_ROLE_ID.getAt(0).trim()}

def JIRA_TEST_PROJECT_ROLE_ID = getProjectRoleId("testprojectrole")
def testProjectRoleId = {->JIRA_TEST_PROJECT_ROLE_ID.getAt(0).trim()}

ext.TEST_GROUP_ID = getGroupId('testgroup', "testgroup.*")
ext.ADMIN_GROUP_ID = getGroupId('jira-admins', "jira-admins.*")

project.ext.testGroupIdCloud = {->TEST_GROUP_ID.getAt(0).trim()}
project.ext.jiraAdminGroupCloud = {->ADMIN_GROUP_ID.getAt(0).trim()}

def BUG_ISSUE_TYPE_ID = getIssueTypeId("Bug")
def STORY_ISSUE_TYPE_ID = getIssueTypeId("Story")
def TASK_ISSUE_TYPE_ID = getIssueTypeId("Task")
def EPIC_ISSUE_TYPE_ID = getIssueTypeId("Epic")
def INITIATIVE_ISSUE_TYPE_ID = getIssueTypeId("Initiative")
def SUBTASK_ISSUE_TYPE_ID = getIssueTypeId("Sub-task")

def BugIssueType = {->BUG_ISSUE_TYPE_ID.getAt(0).trim()}
def StoryIssueType = {->STORY_ISSUE_TYPE_ID.getAt(0).trim()}
def TaskIssueType = {->TASK_ISSUE_TYPE_ID.getAt(0).trim()}
def EpicIssueType = {->EPIC_ISSUE_TYPE_ID.getAt(0).trim()}
def InitiativeIssueType = {->INITIATIVE_ISSUE_TYPE_ID.getAt(0).trim()}
def SubtaskIssueType = {->SUBTASK_ISSUE_TYPE_ID.getAt(0).trim()}

String testSummary = "testSummary"
String customSummary = "customSummary"
String testLabel = "testLabel"
String postCreationScriptToSetPriority = "newIssue.setFieldValue('Assignee',$user)"
def sameAsCurrentIssue = '$sameAsCurrentIssue$'

def selectProject = [
        current: "projectKey=$sameAsCurrentIssue"
]

def selectIssueType = [
        subtask: ["issuetype=$SubtaskIssueType", "calculatedIssueType="],
        task: ["issuetype=$TaskIssueType", "calculatedIssueType="],
        story: ["issuetype=$StoryIssueType", "calculatedIssueType="],
        bug: ["issuetype=$BugIssueType", "calculatedIssueType="],
        initiative: ["issuetype=$InitiativeIssueType", "calculatedIssueType="]
]

def currentIssueVariable = '$currentIssue$'

def selectParentIssue = [
        none: ["parentIssueType=","calculatedParentIssue="],
        currentIssue: ["parentIssueType=$currentIssueVariable","calculatedParentIssue="]
]

def selectLinkType = [
        notLinked: "selectedLinkType=",
        Blocks: "selectedLinkType=$linkByBlock",
        Cloners: "selectedLinkType=$linkByClones",
        Duplicate: "selectedLinkType=$linkByDuplicates",
        Related: "selectedLinkType=$linkByRelatesTo"
]

def setFieldOfNewIssueMode = [
        givenFields: "fieldsToCopy:selected-fields-only",
        createScreenFields: "fieldsToCopy:screen-fields",
        allFields: "fieldsToCopy:all-fields"
]

def setSummary = { summaryType ->
    def fields;
    if(summaryType == 'default'){
        fields = ["fieldsToSet={\"summary\":{\"action\":\"template\",\"value\":\"CLONE - <%=issue.get('summary')%>\"}}"]
    }else if(summaryType == 'template'){
        fields = ["fieldsToSet={\"summary\":{\"action\":\"template\",\"value\":\"$customSummary\"}}"]
    }else if(summaryType == 'currentIssueSummary'){
        fields = ["fieldsToSet={\"summary\":{\"action\":\"copy\"}}"]
    }
    return fields
}

def setSpecificFields = { field, fieldType->
    def fields;
    if(fieldType == 'template'){
        fields = ["fieldsToSet={\"summary\":{\"action\":\"template\",\"value\":\"CLONE - <%=issue.get('summary')%>\"},\"$field\":{\"action\":\"template\",\"value\":\"$testLabel\"}}"]
    }else if(fieldType == 'currentIssueField'){
        fields = ["fieldsToSet={\"summary\":{\"action\":\"template\",\"value\":\"CLONE - <%=issue.get('summary')%>\"},\"$field\":{\"action\":\"copy\"}}"]
    }else if(fieldType == 'fromExpression'){
        fields = ["fieldsToSet={\"summary\":{\"action\":\"template\",\"value\":\"CLONE - <%=issue.get('summary')%>\"},\"labels\":{\"action\":\"script\",\"value\":\"issue.get('description')\"}}"]
    }
    return fields
}

def subtasks = { copy
    def fields;
    if(copy == 'yes'){
        fields = "copySubtasks=yes"
    }else{
        fields = "copySubtasks=no"
    }
    return fields
}

def postCreationScript = { script ->
    def fields = ["runPostCreationScript=yes","postCreationScript=$script"]
    return fields
}

def addComment = { commentType, commentValue ->
    def fields;
    if(commentType == 'template'){
        fields = [ "commentIssue=yes","commentType=template","comment=$commentValue" ]
    }else if(commentType == 'expression'){
        fields = [ "commentIssue=yes","commentType=expression","comment=$commentValue" ]
    }else {
        fields = [ "commentIssue=no","commentType=","comment=" ]
    }
    return fields;
}

def commentVisibility = { visibility ->
    def fields;
    if(visibility == 'all'){
        fields = ["restrictToGroup=","restrictToProjectRole="]
    }else if(visibility == 'adminGroupUsers'){
        fields = ["restrictToGroup=$jiraAdminGrooup","restrictToProjectRole="]
    }else if(visibility == 'adminRoleUsers'){
        fields = [ "restrictToGroup=","restrictToProjectRole=$jiraAdminRoleId" ]
    }else if(visibility == 'testGroupUsers'){
        fields = ["restrictToGroup=$testGroup","restrictToProjectRole="]
    }else if(visibility == 'testRoleUsers'){
        fields = ["restrictToGroup=","restrictToProjectRole=$testProjectRoleId"]
    }else{
        fields = ["restrictToGroup=","restrictToProjectRole="]
    }
}

def multipleIssueCreation = { createMultiple, script->
    def fields;
    if(createMultiple == 'yes'){
        fields = ["createMultiple=yes","iterationScript=$script"]
    }else {
        fields = ["createMultiple=no","iterationScript="]
    }
}

def createTransitionIssue = "createIssueOfTypeSubtaskByCreateTransition"

def getFieldValue = fields("GETVALUE", "fixVersions")
def getFieldValueOfAffectsVersions = fields("GETVALUE", "affectsVersions")


[
        'createIssuesOfTypeSubtaskAndSetSummaryByPostCreationScript',
].each {
    def currentIssue = info?.isCloud ? '$currentIssue$' : 'currentIssue'
    def server = [selectIssueType.subtask , selectProject.current , "parentIssueType=$currentIssue" , setSummary('default') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"navigateToNewIssue\":false,\"runAsType\":\"currentUser\",\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$SubtaskIssueType\",\"parentIssue\":\"$currentIssue\",\"selectedLinkType\":\"\",\"copyAllFields\":false,\"copyScreenFields\":false,\"ignoreInapplicableFields\":false,\"copySubtasks\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"}},\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"copyCommentVisibility\":\"original-visibility\",\"commentAsType\":\"currentUser\",\"postCreationScript\":\"{{ '/rest/api/2/issue/:issue' | callJira(verb=('PUT'), params={'issue':issue.key}, body={'fields': {'summary': 'test-summary'} }) }}\",\"conditionalExecution\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)

    def issueType = "Sub-task"
    def issue = createIssue([type: 'Task', summary: it], it)

    gint.taskHelper.add([
            [action    : 'transitionIssue',
             ext: ":by $it:",
             sleep: sleep,
             parameters: [
                     issue     : { ->issue[] },
                     transition: it,
             ],
            ],
            [action    : 'getFieldValue',
             ext: ":Of summary to check post creation script after transition $it:",
             sleep: sleep,
             parameters: [
                     issue     : { ->issue[] },
                     field: "Summary"
             ],
                    data: ["Summary . . . . . . . . . . . : test-summary"]
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : delete issue created by post function to check next option: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $it AND type = $issueType",
                     common: [ "--action deleteIssue --issue @issue@ --continue"
                     ]
             ]
            ]
    ])
}

[
        'createMultipleIssuesOfTypeSubtask',

].each {
    int iteratorValue = 5
    def currentIssue = info?.isCloud ? '$currentIssue$' : 'currentIssue'
    def server = [selectIssueType.subtask , selectProject.current , "parentIssueType=$currentIssue" , setSummary('default') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"navigateToNewIssue\":false,\"runAsType\":\"currentUser\",\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$SubtaskIssueType\",\"parentIssue\":\"$currentIssue\",\"selectedLinkType\":\"\",\"copyAllFields\":false,\"copyScreenFields\":false,\"ignoreInapplicableFields\":false,\"copySubtasks\":false,\"fields\":{\"summary\":{\"action\":\"copy\"}},\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"copyCommentVisibility\":\"original-visibility\",\"commentAsType\":\"currentUser\",\"iterationScript\":\"{{range(1,$iteratorValue)}}\",\"iteratorReturnsJSON\":false,\"conditionalExecution\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)

    def issueType = "Sub-task"
    def issue = createIssue([type: 'Task', summary: it], it)

    int numberOfIssues = iteratorValue - 1
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             ext: ":by $it:",
             sleep: sleep,
             parameters: [
                     issue     : { ->issue[] },
                     transition: it,
             ],
            ],
            [action: 'getIssueList',
             ext: ":to check new issue created by postfunction after transition issue by:$it",
             sleep: sleep,
             parameters: [
                     project: projectName,
                     jql: "project = $projectName AND summary ~ $it AND type = $issueType",
                     outputType: "Text",
                     columns:"Type,Summary"
             ],
             data:[
                     "$numberOfIssues issues in list",
                     "$issueType" ,
                     /$it/  ],
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : delete issue created by post function to check next option: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $it AND type = $issueType",
                     common: [ "--action deleteIssue --issue @issue@ --continue"
                     ]
             ]
            ]
    ])
}

[
        'createIssueOfTypeStoryAndDoNotCopyCommentsFromCurrentIssueToNewIssue'
].each {
    def currentIssue = '$currentIssue$'
    def server =  [selectIssueType.story , selectProject.current , selectParentIssue.none , setSummary('default') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"navigateToNewIssue\":false,\"runAsType\":\"currentUser\",\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$StoryIssueType\",\"selectedLinkType\":\"\",\"copyAllFields\":false,\"copyScreenFields\":false,\"ignoreInapplicableFields\":false,\"copySubtasks\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"}},\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"copyCommentVisibility\":\"original-visibility\",\"commentAsType\":\"currentUser\",\"conditionalExecution\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)

    def existingComment = "old comment"
    def summary = it
    def issue = createIssue([type: 'Task', summary: summary, comment: existingComment], it)

    def issueType = "Story"

    gint.taskHelper.add([
            [action    : 'transitionIssue',
             ext: ":by $it:",
             sleep: sleep,
             parameters: [
                     issue     : { ->issue[] },
                     transition: it,
                     comment: it
             ],
            ],
            [action: 'getIssueList',
             ext: ":to check new issue created by postfunction after transition issue by:$it",
             sleep: sleep,
             parameters: [
                     project: projectName,
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     outputType: "Text",
                     columns:"Type,Summary"
             ],
             data:[  "$issueType" ,
                     /$summary/  ],
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : get comments value from new created issue by postfunction: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     common: [ /--action getComments --issue @issue@ --continue/  ]
             ],
             failData: [
                     it,
                     existingComment
             ]
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : delete issue created by post function to check next option: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     common: [ /--action deleteIssue --issue @issue@ --continue/  ]
             ],
            ]
    ])
}

[
        'createIssueOfTypeStoryAndCopyCommentAddedOnTransitionScreenToNewIssue'
].each {
    def currentIssue = '$currentIssue$'
    def server =  [selectIssueType.story , selectProject.current , selectParentIssue.none , setSummary('default') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"navigateToNewIssue\":false,\"runAsType\":\"currentUser\",\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$StoryIssueType\",\"selectedLinkType\":\"\",\"copyAllFields\":false,\"copyScreenFields\":false,\"ignoreInapplicableFields\":false,\"copySubtasks\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"}},\"copyCommentToNewIssue\":true,\"copyAllCommentsToNewIssue\":false,\"copyCommentVisibility\":\"original-visibility\",\"commentAsType\":\"currentUser\",\"conditionalExecution\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)

    def summary = it
    def issue = createIssue([type: 'Task', summary: summary], it)

    def issueType = "Story"

    gint.taskHelper.add([
            [action    : 'transitionIssue',
             ext: ":by $it:",
             sleep: sleep,
             parameters: [
                     issue     : { ->issue[] },
                     transition: it,
                     comment: it
             ],
            ],
            [action: 'getIssueList',
             ext: ":to check new issue created by postfunction after transition issue by:$it",
             sleep: sleep,
             parameters: [
                     project: projectName,
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     outputType: "Text",
                     columns:"Type,Summary"
             ],
             data:[  "$issueType" ,
                     /$summary/  ],
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : get comments value from new created issue by postfunction: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     common: [ /--action getComments --issue @issue@ --continue/  ]
             ],
             data: [ it ]
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : delete issue created by post function to check next option: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     common: [ /--action deleteIssue --issue @issue@ --continue/  ]
             ],
            ]
    ])
}

[
        'createIssueOfTypeStoryAndCopyAllCommentsToNewIssue'
].each {
    def currentIssue = '$currentIssue$'
    def server =  [selectIssueType.story , selectProject.current , selectParentIssue.none , setSummary('default') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"navigateToNewIssue\":false,\"runAsType\":\"currentUser\",\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$StoryIssueType\",\"selectedLinkType\":\"\",\"copyAllFields\":false,\"copyScreenFields\":false,\"ignoreInapplicableFields\":false,\"copySubtasks\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"}},\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":true,\"copyCommentVisibility\":\"original-visibility\",\"commentAsType\":\"currentUser\",\"conditionalExecution\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)

    def existingComment = "old comment"
    def summary = it
    def issue = createIssue([type: 'Task', summary: summary, comment: existingComment], it)

    def issueType = "Story"

    gint.taskHelper.add([
            [action    : 'transitionIssue',
             ext: ":by $it:",
             sleep: sleep,
             parameters: [
                     issue     : { ->issue[] },
                     transition: it,
                     comment: it
             ],
            ],
            [action: 'getIssueList',
             ext: ":to check new issue created by postfunction after transition issue by:$it",
             sleep: sleep,
             parameters: [
                     project: projectName,
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     outputType: "Text",
                     columns:"Type,Summary"
             ],
             data:[  "$issueType" ,
                     /$summary/  ],
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : get comments value from new created issue by postfunction: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     common: [ /--action getComments --issue @issue@ --continue/  ]
             ],
             data: [
                     it,
                     existingComment
             ]
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : delete issue created by post function to check next option: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     common: [ /--action deleteIssue --issue @issue@ --continue/  ]
             ],
            ]
    ])
}

[
        'copyFieldsReturnFromScriptToAffectsVersionsOfNewIssue'
].each {
    def currentIssue = info?.isCloud ? '$currentIssue$' : 'currentIssue'
    def server = [selectIssueType.subtask , selectProject.current , "parentIssueType=$currentIssue" , setSummary('default') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"navigateToNewIssue\":false,\"runAsType\":\"currentUser\",\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$SubtaskIssueType\",\"parentIssue\":\"$currentIssue\",\"selectedLinkType\":\"\",\"copyAllFields\":false,\"copyScreenFields\":false,\"ignoreInapplicableFields\":false,\"copySubtasks\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"},\"versions\":{\"action\":\"set\",\"value\":\"$defaultValueOfVersions\"}},\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"copyCommentVisibility\":\"original-visibility\",\"commentAsType\":\"currentUser\",\"conditionalExecution\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)

    def summary = it
    def issue = createIssue([type: 'Task', summary: summary], it)

    def issueType = "Sub-task"

    gint.taskHelper.add([
            [action    : 'transitionIssue',
             ext: ":by $it:",
             sleep: sleep,
             parameters: [
                     issue     : { ->issue[] },
                     transition: it,
             ],
            ],
            [action: 'getIssueList',
             ext: ":to check new issue created by postfunction after transition issue by:$it",
             sleep: sleep,
             parameters: [
                     project: projectName,
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     outputType: "Text",
                     columns:"Type,Summary"
             ],
             data:[  "$issueType" ,
                     /$summary/  ],
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : get affects versions value from new created issue by postfunction: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     common: [ /--action getFieldValue --issue @issue@ --field "Affects versions" --continue/  ]
             ],
             data: [getFieldValueOfAffectsVersions.affectsVersions]
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : delete issue created by post function to check next option: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     common: [ /--action deleteIssue --issue @issue@ --continue/  ]
             ],
            ]
    ])
}

[
        'createIssueOfTypeSubtask'
].each {
    def currentIssue = info?.isCloud ? '$currentIssue$' : 'currentIssue'
    def server = [selectIssueType.subtask , selectProject.current , "parentIssueType=$currentIssue" , setSummary('default') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$SubtaskIssueType\",\"selectedLinkType\":\"\",\"parentIssue\":\"$currentIssue\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"copySubtasks\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)
}

[
        'createIssueOfTypeEpic'
].each {
    def currentIssue = info?.isCloud ? '$currentIssue$' : 'currentIssue'
    def server = [selectIssueType.subtask , selectProject.current , "parentIssueType=$currentIssue" , setSummary('default') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"navigateToNewIssue\":false,\"runAsType\":\"currentUser\",\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$EpicIssueType\",\"selectedLinkType\":\"\",\"copyAllFields\":false,\"copyScreenFields\":false,\"ignoreInapplicableFields\":false,\"copySubtasks\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"}},\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"copyCommentVisibility\":\"original-visibility\",\"commentAsType\":\"currentUser\",\"conditionalExecution\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)
}

[
        'createIssueOfTypeEpic_calculatedProjectKey'
].each {
    def calculated = info?.isCloud ? '$calculated$' : 'calculated'
    def currentIssue = info?.isCloud ? '$currentIssue$' : 'currentIssue'
    def server = [selectIssueType.subtask , selectProject.current , "parentIssueType=$currentIssue" , setSummary('default') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"navigateToNewIssue\":false,\"calculatedProjectKey\":\"{{ issue.fields.project.key }}\",\"runAsType\":\"currentUser\",\"project\":\"$calculated\",\"issuetype\":\"$EpicIssueType\",\"selectedLinkType\":\"\",\"copyAllFields\":false,\"copyScreenFields\":false,\"ignoreInapplicableFields\":false,\"copySubtasks\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"}},\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"copyCommentVisibility\":\"original-visibility\",\"commentAsType\":\"currentUser\",\"conditionalExecution\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)
}

[
        'createIssueOfTypeEpic_inOtherProject'
].each {
    def calculated = info?.isCloud ? '$calculated$' : 'calculated'
    def currentIssue = info?.isCloud ? '$currentIssue$' : 'currentIssue'
    def server = [selectIssueType.subtask , selectProject.current , "parentIssueType=$currentIssue" , setSummary('default') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"navigateToNewIssue\":false,\"runAsType\":\"currentUser\",\"project\":\"JMWE\",\"issuetype\":\"$EpicIssueType\",\"selectedLinkType\":\"\",\"copyAllFields\":false,\"copyScreenFields\":false,\"ignoreInapplicableFields\":false,\"copySubtasks\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"$it\"}},\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"copyCommentVisibility\":\"original-visibility\",\"commentAsType\":\"currentUser\",\"conditionalExecution\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)

    def issue = createIssue([type: 'Task', summary: it], it)
        def issueType;
        if(it == 'createIssueOfTypeEpic_inOtherProject'){
            issueType = "Epic"
        }
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 ext: ":by $it:",
                 sleep: sleep,
                 parameters: [
                         issue     : { ->issue[] },
                         transition: it,
                 ],
                ],
                [action: 'getIssueList',
                 ext: ":to check new issue created by postfunction after transition issue by:$it",
                 sleep: sleep,
                 parameters: [
                         project: TestProject,
                         jql: "project = $TestProject AND summary ~ $it AND type = $issueType",
                         outputType: "Text",
                         columns:"Type,Summary"
                 ],
                 data:[  "$issueType" ,
                         /$it/  ],
                ],
                [action: 'runFromIssueList',
                 sleep: sleep,
                 ext: " : delete issue created by post function to check next option: " + it,
                 parameters:[
                         jql: "project = $TestProject AND summary ~ $it AND type = $issueType",
                         common: [ "--action deleteIssue --issue @issue@ --continue"
                         ]
                 ]
                ]
        ])
}

[
        'createIssueOfTypeTask'
].each {
    def currentIssue = '$currentIssue$'
    def server =  [selectIssueType.task , selectProject.current , selectParentIssue.none , setSummary('default') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$TaskIssueType\",\"selectedLinkType\":\"\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"copy\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)
}

[
        'createIssueOfTypeStory'
].each {
    def currentIssue = '$currentIssue$'
    def server =  [selectIssueType.story , selectProject.current , selectParentIssue.none , setSummary('default') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$StoryIssueType\",\"selectedLinkType\":\"\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"copy\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)
}

[
        'createIssueOfTypeBug'
].each {
    def currentIssue = '$currentIssue$'
    def server =  [selectIssueType.bug , selectProject.current , selectParentIssue.none , setSummary('default') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$BugIssueType\",\"selectedLinkType\":\"\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"copy\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)
}

[
        'createIssueOfTypeInitiative'
].each {
    def currentIssue = '$currentIssue$'
    def server =  [selectIssueType.initiative , selectProject.current , selectParentIssue.none , setSummary('default') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$InitiativeIssueType\",\"selectedLinkType\":\"\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"copy\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)
}

[
        'createIssueOfTypeBugAndLinkToCurrentIssueByBlocks'
].each {
    def currentIssue = '$currentIssue$'
    def server =  [selectIssueType.bug , selectProject.current , selectParentIssue.none , setSummary('default') , selectLinkType.Blocks , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$BugIssueType\",\"selectedLinkType\":\"$relatedIssue.linkByBlock\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"copy\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)
}

[
        'createIssueOfTypeBugAndLinkToCurrentIssueByCloners'
].each {
    def currentIssue = '$currentIssue$'
    def server =  [selectIssueType.bug , selectProject.current , selectParentIssue.none , setSummary('default') , selectLinkType.Cloners , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$BugIssueType\",\"selectedLinkType\":\"$relatedIssue.linkByClones\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"copy\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)
}

[
        'createIssueOfTypeBugAndLinkToCurrentIssueByDuplicates'
].each {
    def currentIssue = '$currentIssue$'
    def server =  [selectIssueType.bug , selectProject.current , selectParentIssue.none , setSummary('default') , selectLinkType.Duplicate , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$BugIssueType\",\"selectedLinkType\":\"$relatedIssue.linkByDuplicates\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"copy\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)
}

[
        'createIssueOfTypeBugAndLinkToCurrentIssueByRelates'
].each {
    def currentIssue = '$currentIssue$'
    def server =  [selectIssueType.bug , selectProject.current , selectParentIssue.none , setSummary('default') , selectLinkType.Relates , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$BugIssueType\",\"selectedLinkType\":\"$relatedIssue.linkByRelatesTo\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"copy\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)
}

[
        'createIssueOfTypeSubtaskIfConditionTrue'
].each {
    def currentIssue = info?.isCloud ?'$currentIssue$' : 'currentIssue'
    def server =  [selectIssueType.subtask , selectProject.current , "parentIssueType=$currentIssue" , setSummary('default') , conditionalExecution.true , runAsUser.currentUser]
    def cloud =  "{$conditionalExecution.true,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$SubtaskIssueType\",\"selectedLinkType\":\"\",\"parentIssue\":\"$currentIssue\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)
}

[
        'createIssueOfTypeBugAndSetCustomSummary'
].each {
    def currentIssue = '$currentIssue$'
    def server =  [selectIssueType.bug , selectProject.current , selectParentIssue.none , setSummary('template') , selectLinkType.notLinked , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$BugIssueType\",\"selectedLinkType\":\"\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"$customSummary\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)
}

[
        'createIssueOfTypeBugSetCustomSummaryAndAddCommentByTemplateVisibleToAllUsers'
].each {
    def currentIssue = '$currentIssue$'
    def server =  [selectIssueType.bug , selectProject.current , selectParentIssue.none , setSummary('template') , selectLinkType.notLinked , addComment('template',it) , commentVisibility('all') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$BugIssueType\",\"selectedLinkType\":\"\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"$customSummary\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"comment\":\"$it\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",\"commentAs\":\"\",\"commentAsType\":\"currentUser\",\"navigateToNewIssue\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)
}

[
        'createIssueOfTypeBugSetCustomSummaryAndAddCommentByTemplateVisibleToAdminGroupUsers'
].each {
    def currentIssue = '$currentIssue$'
    def server =  [selectIssueType.bug , selectProject.current , selectParentIssue.none , setSummary('template') , selectLinkType.notLinked , addComment('template',it) , commentVisibility('adminGroupUsers') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"conditionalExecution\":false,\"_modified\":\"2024-03-04T08:27:46.678Z\",\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$BugIssueType\",\"selectedLinkType\":\"\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"$customSummary\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"comment\":\"$it\",\"restrictToInternal\":false,\"restrictToGroup\":\"$jiraAdminGroupCloud\",\"commentAs\":\"\",\"commentAsType\":\"currentUser\",\"navigateToNewIssue\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)
}

[
        'createIssueOfTypeBugSetCustomSummaryAndAddCommentByTemplateVisibleToAdminRoleUsers'
].each {
    def currentIssue = '$currentIssue$'
    def server =  [selectIssueType.bug , selectProject.current , selectParentIssue.none , setSummary('template') , selectLinkType.notLinked , addComment('template',it) , commentVisibility('adminRoleUsers') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$BugIssueType\",\"selectedLinkType\":\"\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"customSummary\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"comment\":\"$it\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",\"restrictToProjectRoleId\":$jiraAdminRoleId,\"commentAs\":\"\",\"commentAsType\":\"currentUser\",\"navigateToNewIssue\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)
}

[
        'createIssueOfTypeBugSetCustomSummaryAndAddCommentByTemplateVisibleToTestGroupUsers'
].each {
    def currentIssue = '$currentIssue$'
    def server =  [selectIssueType.bug , selectProject.current , selectParentIssue.none , setSummary('template') , selectLinkType.notLinked , addComment('template',it) , commentVisibility('testGroupUsers') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"conditionalExecution\":false,\"_modified\":\"2024-03-04T08:27:46.678Z\",\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$BugIssueType\",\"selectedLinkType\":\"\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"$customSummary\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"comment\":\"$it\",\"restrictToInternal\":false,\"restrictToGroup\":\"$testGroupIdCloud\",\"commentAs\":\"\",\"commentAsType\":\"currentUser\",\"navigateToNewIssue\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)
}

[
        'createIssueOfTypeBugSetCustomSummaryAndAddCommentByTemplateVisibleToTestRoleUsers'
].each {
    def currentIssue = '$currentIssue$'
    def server =  [selectIssueType.bug , selectProject.current , selectParentIssue.none , setSummary('template') , selectLinkType.notLinked , addComment('template',it) , commentVisibility('testRoleUsers') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$BugIssueType\",\"selectedLinkType\":\"\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"customSummary\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"comment\":\"$it\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",\"restrictToProjectRoleId\":$testProjectRoleId,\"commentAs\":\"\",\"commentAsType\":\"currentUser\",\"navigateToNewIssue\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)
}

[
        createTransitionIssue
].each {
    def currentIssue = '$currentIssue$'
    def transition = createTransitionIssue
    def server = [selectIssueType.subtask , selectProject.current , selectParentIssue.currentIssue , setSummary(transition) , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$SubtaskIssueType\",\"selectedLinkType\":\"\",\"parentIssue\":\"$currentIssue\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"$transition\"}},\"runAsType\":\"currentUser\",\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"copySubtasks\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false}"
    if(isCloud){
        addTransitionFunctionOnCreateTransition( "@create", 'postfunction', info?.isCloud? cloud : server, functionKey)
    }
}

[
        'copyFieldsListedBelowFixVersions'
].each {
    def currentIssue = info?.isCloud ? '$currentIssue$' : 'currentIssue'
    def server = [selectIssueType.subtask , selectProject.current , "parentIssueType=$currentIssue" , setSummary('default') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"navigateToNewIssue\":false,\"runAsType\":\"currentUser\",\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$SubtaskIssueType\",\"parentIssue\":\"$currentIssue\",\"selectedLinkType\":\"\",\"copyAllFields\":false,\"copyScreenFields\":false,\"ignoreInapplicableFields\":false,\"copySubtasks\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"$it\"},\"fixVersions\":{\"action\":\"copy\"}},\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"copyCommentVisibility\":\"original-visibility\",\"commentAsType\":\"currentUser\",\"conditionalExecution\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)

    def summary = it
    def issue = createIssue([type: 'Task', summary: summary, fixVersions: defaultValueOfVersions], it)

    def issueType = "Sub-task"

    gint.taskHelper.add([
            [action    : 'transitionIssue',
             ext: ":by $it:",
             sleep: sleep,
             parameters: [
                     issue     : { ->issue[] },
                     transition: it,
             ],
            ],
            [action: 'getIssueList',
             ext: ":to check new issue created by postfunction after transition issue by:$it",
             sleep: sleep,
             parameters: [
                     project: projectName,
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     outputType: "Text",
                     columns:"Type,Summary"
             ],
             data:[  "$issueType" ,
                     /$summary/  ],
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : get fix versions value from new created issue by postfunction: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     common: [ /--action getFieldValue --issue @issue@ --field "Fix versions" --continue/  ]
             ],
                    data: [getFieldValue.fixVersions]
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : delete issue created by post function to check next option: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     common: [ /--action deleteIssue --issue @issue@ --continue/  ]
             ],
            ]
    ])
}

[
        'copyFieldsFromFixVersionsToAffectsVersionsOfNewIssue'
].each {
    def currentIssue = info?.isCloud ? '$currentIssue$' : 'currentIssue'
    def server = [selectIssueType.subtask , selectProject.current , "parentIssueType=$currentIssue" , setSummary('default') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"navigateToNewIssue\":false,\"runAsType\":\"currentUser\",\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$SubtaskIssueType\",\"parentIssue\":\"$currentIssue\",\"selectedLinkType\":\"\",\"copyAllFields\":false,\"copyScreenFields\":false,\"ignoreInapplicableFields\":false,\"copySubtasks\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"},\"versions\":{\"action\":\"copy-other\",\"fromField\":\"fixVersions\"}},\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"copyCommentVisibility\":\"original-visibility\",\"commentAsType\":\"currentUser\",\"conditionalExecution\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)

    def summary = it
    def issue = createIssue([type: 'Task', summary: summary, fixVersions: defaultValueOfVersions], it)

    def issueType = "Sub-task"

    gint.taskHelper.add([
            [action    : 'transitionIssue',
             ext: ":by $it:",
             sleep: sleep,
             parameters: [
                     issue     : { ->issue[] },
                     transition: it,
             ],
            ],
            [action: 'getIssueList',
             ext: ":to check new issue created by postfunction after transition issue by:$it",
             sleep: sleep,
             parameters: [
                     project: projectName,
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     outputType: "Text",
                     columns:"Type,Summary"
             ],
             data:[  "$issueType" ,
                     /$summary/  ],
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : get fix versions value from new created issue by postfunction: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     common: [ /--action getFieldValue --issue @issue@ --field "Affects versions" --continue/  ]
             ],
                    data: [getFieldValueOfAffectsVersions.affectsVersions]
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : delete issue created by post function to check next option: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     common: [ /--action deleteIssue --issue @issue@ --continue/  ]
             ],
            ]
    ])
}

[
        'setSummaryFromLabelsOfCurrentIssue'
].each {
    def currentIssue = info?.isCloud ? '$currentIssue$' : 'currentIssue'
    def server = [selectIssueType.subtask , selectProject.current , "parentIssueType=$currentIssue" , setSummary('default') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"navigateToNewIssue\":false,\"runAsType\":\"currentUser\",\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$SubtaskIssueType\",\"parentIssue\":\"$currentIssue\",\"selectedLinkType\":\"\",\"copyAllFields\":false,\"copyScreenFields\":false,\"ignoreInapplicableFields\":false,\"copySubtasks\":false,\"fields\":{\"summary\":{\"action\":\"copy-other\",\"fromField\":\"labels\"}},\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"copyCommentVisibility\":\"original-visibility\",\"commentAsType\":\"currentUser\",\"conditionalExecution\":false}"

    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)

    def summary = it
    def issue = createIssue([type: 'Task', summary: "JMWE_Issue", labels: it], it)

    def issueType = "Sub-task"

    gint.taskHelper.add([
            [action    : 'setFieldValue',
             ext: ":Of Labels before transition $it:",
             sleep: sleep,
             parameters: [
                     issue     : { ->issue[] },
                     field: "Labels",
                     value: it
             ],
            ],
            [action    : 'transitionIssue',
             ext: ":by $it:",
             sleep: sleep,
             parameters: [
                     issue     : { ->issue[] },
                     transition: it,
             ],
            ],
            [action: 'getIssueList',
             ext: ":to check new issue created by postfunction after transition issue by:$it",
             sleep: sleep,
             parameters: [
                     project: projectName,
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     outputType: "Text",
                     columns:"Type,Summary"
             ],
             data:[  "$issueType" ,
                     /$summary/  ],
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : delete issue created by post function to check next option: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     common: [ /--action deleteIssue --issue @issue@ --continue/  ]
             ],
            ]
    ])
}

[
        'createIssueOfTypeSubtask_copyAllFieldsOnCreateIssueScreen'
].each {
    def currentIssue = info?.isCloud ? '$currentIssue$' : 'currentIssue'
    def server = [selectIssueType.subtask , selectProject.current , "parentIssueType=$currentIssue" , setSummary('default') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"navigateToNewIssue\":false,\"calculatedProjectKey\":\"\",\"runAsType\":\"currentUser\",\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$SubtaskIssueType\",\"parentIssue\":\"$currentIssue\",\"selectedLinkType\":\"\",\"copyAllFields\":false,\"copyScreenFields\":true,\"ignoreInapplicableFields\":false,\"copySubtasks\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"}},\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"copyCommentVisibility\":\"original-visibility\",\"commentAsType\":\"currentUser\",\"conditionalExecution\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)

    def summary = it
    def issue = createIssue([type: 'Task', summary: summary, fixVersions: defaultValueOfVersions, affectsVersions: defaultValueOfVersions], it)

    def issueType = "Sub-task"
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             ext: ":by $it:",
             sleep: sleep,
             parameters: [
                     issue     : { ->issue[] },
                     transition: it,
             ],
            ],
            [action: 'getIssueList',
             ext: ":to check new issue created by postfunction after transition issue by:$it",
             sleep: sleep,
             parameters: [
                     project: projectName,
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     outputType: "Text",
                     columns:"Type,Summary"
             ],
             data:[  "$issueType" ,
                     /$summary/  ],
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : get fix versions value from new created issue by postfunction: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     common: [ /--action getFieldValue --issue @issue@ --field "Fix versions" --continue/  ]
             ],
                    data: [getFieldValue.fixVersions]
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : get affects versions value from new created issue by postfunction: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     common: [ /--action getFieldValue --issue @issue@ --field "Affects versions" --continue/  ]
             ],
                    data: [getFieldValueOfAffectsVersions.affectsVersions]
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : delete issue created by post function to check next option: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     common: [ /--action deleteIssue --issue @issue@ --continue/  ]
             ],
            ]
    ])
}

[
        'createIssueOfTypeSubtaskAndCopyAllFields'
].each {
    def currentIssue = info?.isCloud ? '$currentIssue$' : 'currentIssue'
    def server = [selectIssueType.subtask , selectProject.current , "parentIssueType=$currentIssue" , setSummary('default') , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"navigateToNewIssue\":false,\"calculatedProjectKey\":\"\",\"runAsType\":\"currentUser\",\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$SubtaskIssueType\",\"parentIssue\":\"$currentIssue\",\"selectedLinkType\":\"\",\"copyAllFields\":true,\"copyScreenFields\":false,\"ignoreInapplicableFields\":false,\"copySubtasks\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"CLONE - {{issue.fields.summary}}\"}},\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"copyCommentVisibility\":\"original-visibility\",\"commentAsType\":\"currentUser\",\"conditionalExecution\":false}"
    addTransitionFunction( it, 'postfunction', info?.isCloud? cloud : server, functionKey)

    def summary = it
    def issue = createIssue([type: 'Task', summary: summary, fixVersions: defaultValueOfVersions, affectsVersions: defaultValueOfVersions], it)

    def issueType = "Sub-task"
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             ext: ":by $it:",
             sleep: sleep,
             parameters: [
                     issue     : { ->issue[] },
                     transition: it,
             ],
            ],
            [action: 'getIssueList',
             ext: ":to check new issue created by postfunction after transition issue by:$it",
             sleep: sleep,
             parameters: [
                     project: projectName,
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     outputType: "Text",
                     columns:"Type,Summary"
             ],
             data:[  "$issueType" ,
                     /$summary/  ],
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : get fix versions value from new created issue by postfunction: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     common: [ /--action getFieldValue --issue @issue@ --field "Fix versions" --continue/  ]
             ],
                    data: [getFieldValue.fixVersions]
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : get affects versions value from new created issue by postfunction: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     common: [ /--action getFieldValue --issue @issue@ --field "Affects versions" --continue/  ]
             ],
                    data: [getFieldValueOfAffectsVersions.affectsVersions]
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : delete issue created by post function to check next option: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $summary AND type = $issueType",
                     common: [ /--action deleteIssue --issue @issue@ --continue/  ]
             ],
            ]
    ])
}

["currentUser","userFromScriptInvalid"].each {
    runAsUser.remove(it)
}

runAsUser.eachWithIndex { userType, configFields, idx ->
    def transition = 'createIssueOfTypeBugSetCustomSummaryAndRunAs_' + userType
    def currentIssue = '$currentIssue$'
    def server =  [selectIssueType.bug , selectProject.current , selectParentIssue.none , setSummary('template') , selectLinkType.notLinked , conditionalExecution.false , configFields]
    def cloud =  "{\"conditionalExecution\":false,\"project\":\"$sameAsCurrentIssue\",\"issuetype\":\"$BugIssueType\",\"selectedLinkType\":\"\",\"copySelectedFieldsOnly\":true,\"copyScreenFields\":false,\"copyAllFields\":false,\"fields\":{\"summary\":{\"action\":\"set\",\"value\":\"$customSummary\"}},\"copyCommentToNewIssue\":false,\"copyAllCommentsToNewIssue\":false,\"ignoreInapplicableFields\":false,\"navigateToNewIssue\":false,$configFields}"
    addTransitionFunction( transition, 'postfunction', info?.isCloud? cloud : server, functionKey)
    if(!isCloud){
        moveTransitionFunction(transition, 4)
    }
}

def defaultIssue = createIssue([type: 'Task', summary: testSummary], 'defaultIssue')

if(isCloud){
    gint.taskHelper.add([
            [action: 'getIssueList',
             ext: ":to check new issue of type subtask created by postfunction on create transition",
             sleep: sleep,
             parameters: [
                     project: projectName,
                     jql: "project = $projectName AND summary ~ $createTransitionIssue AND type = Sub-task",
                     outputType: "Text",
                     columns:"Type,Summary"
             ],
             data:[  "Sub-task" ,
                     /$createTransitionIssue/  ],
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : delete issue created by post function on create transition: ",
             parameters:[
                     jql: "project = $projectName AND summary ~ $createTransitionIssue AND type = Sub-task",
                     common: [ "--action deleteIssue --issue @issue@ --continue"
                     ]
             ]
            ]
    ]
    )
}

[
        'createIssueOfTypeSubtask',
        'createIssueOfTypeStory',
        'createIssueOfTypeBug',
        'createIssueOfTypeInitiative',
        'createIssueOfTypeEpic',
        'createIssueOfTypeEpic_calculatedProjectKey',
        'createIssueOfTypeTask',
].each {
    def issueType;
    if(it == 'createIssueOfTypeSubtask'){
        issueType = "Sub-task"
    }else if(it == 'createIssueOfTypeTask'){
        issueType = "Task"
    }else if(it == 'createIssueOfTypeStory'){
        issueType = "Story"
    }else if(it == 'createIssueOfTypeBug'){
        issueType = "Bug"
    }else if(it == 'createIssueOfTypeInitiative'){
        issueType = "Initiative"
    }else if(it == 'createIssueOfTypeEpic' || it == 'createIssueOfTypeEpic_calculatedProjectKey'){
        issueType = "Epic"
    }
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             ext: ":by $it:",
             sleep: sleep,
             parameters: [
                     issue     : { ->defaultIssue[] },
                     transition: it,
             ],
            ],
            [action: 'getIssueList',
             ext: ":to check new issue created by postfunction after transition issue by:$it",
             sleep: sleep,
             parameters: [
                     project: projectName,
                     jql: "project = $projectName AND summary ~ $testSummary AND type = $issueType",
                     outputType: "Text",
                     columns:"Type,Summary"
             ],
             data:[  "$issueType" ,
                     /$testSummary/  ],
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : delete issue created by post function to check next option: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $testSummary AND type = $issueType",
                     common: [ "--action deleteIssue --issue @issue@ --continue"
                     ]
             ]
            ]
    ])
}


def testSummary1 = "createAndLinkIssue"
def defaultIssue1 = createIssue([type: 'Task', summary: testSummary1], 'defaultIssue1')

[
        'createIssueOfTypeBugAndLinkToCurrentIssueByBlocks',
        'createIssueOfTypeBugAndLinkToCurrentIssueByCloners',
        'createIssueOfTypeBugAndLinkToCurrentIssueByDuplicates',
        'createIssueOfTypeBugAndLinkToCurrentIssueByRelates',
].each {
    def linkType;
    if(it == 'createIssueOfTypeBugAndLinkToCurrentIssueByBlocks'){
        linkType = "Blocks"
    }else if(it == 'createIssueOfTypeBugAndLinkToCurrentIssueByCloners'){
        linkType = "Cloners"
    }else if(it == 'createIssueOfTypeBugAndLinkToCurrentIssueByDuplicates'){
        linkType = "Duplicate"
    }else if(it == 'createIssueOfTypeBugAndLinkToCurrentIssueByRelates'){
        linkType = info?.isCloud? "Relates" : "Relates"
    }
    def issue = { -> defaultIssue1[] }
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             ext       : ":by $it:",
             sleep     : sleep,
             parameters: [
                     issue     : { -> defaultIssue1[] },
                     transition: it,
             ],
            ],
            [action    : 'getIssueList',
             sleep     : sleep,
             ext       : ":to check issue created by postfunction after transition issue by $it:",
             parameters: [
                     project   : projectName,
                     jql       : "project = $projectName AND summary ~ $testSummary1 AND type = Bug",
                     outputType: "Text",
                     columns   : "Type,Summary"
             ],
             data      : ["Bug",
                          /$testSummary1/],
            ],
            [action    : 'getLinkList',
             sleep     : sleep,
             ext       : ":to check issue created by postfunction linked to current issue by link type_ $linkType:after transition issue by_ $it",
             parameters: [
                     issue     : { -> defaultIssue1[] },
                     outputType: "Text",
                     columns   : "Issue,'Type Name'"
             ],
             data      : ["$issue", "$linkType"],
            ],
            [action    : 'runFromIssueList',
             sleep     : sleep,
             ext       : ":delete issue created by post function after transition issue by _$it: ",
             parameters: [
                     jql   : "project = $projectName AND summary ~ $testSummary1 AND type = Bug",
                     common: ["--action deleteIssue --issue @issue@ --continue"
                     ]
             ]
            ]
    ])
}

def testSummary2 = "createIssueIfConditionTrue"
def defaultIssue2 = createIssue([type: 'Task', summary: testSummary2], 'defaultIssue2')

[
        'createIssueOfTypeSubtaskIfConditionTrue'
].each {
    ["Low","High"].eachWithIndex { priority, int idx ->
        gint.taskHelper.add([
                [action: "setFieldValue",
                 ext: ":Of priority to $priority before transition issue by:$it",
                 sleep: sleep,
                 parameters: [
                         issue: {->defaultIssue2[]},
                         field: "Priority",
                         value: priority
                 ]
                ],
                [action    : 'transitionIssue',
                 ext       : ":by $it:when priority of issue is_ $priority",
                 sleep     : sleep,
                 parameters: [
                         issue     : { -> defaultIssue2[] },
                         transition: it,
                 ],
                ],
        ])
        if(priority == "High"){
            gint.taskHelper.add([
                    [action    : 'getIssueList',
                     ext       : ":to check issue created by postfunction after transition issue by_ $it:when priority is $priority",
                     sleep     : sleep,
                     parameters: [
                             project   : projectName,
                             jql       : "project = $projectName AND summary ~ $testSummary2 AND type = Sub-task",
                             outputType: "Text",
                             columns   : "Type,Summary"
                     ],
                     data  : ["Sub-task",
                              /$testSummary2/],
                    ],
            ])
        }else{
            gint.taskHelper.add([
                    [action    : 'getIssueList',
                     ext       : ":to check issue not created by postfunction after transition issue by_ $it:when priority is $priority",
                     sleep     : sleep,
                     parameters: [
                             project   : projectName,
                             jql       : "project = $projectName AND summary ~ $testSummary2 AND type = Sub-task",
                             outputType: "Text",
                             columns   : "Type,Summary"
                     ],
                     failData  : ["Sub-task",
                                  /$testSummary2/],
                    ],
            ])
        }
    }
}

def testSummary3 = "createIssueAndSetCustomSummary"
def defaultIssue3 = createIssue([type: 'Task', summary: "JMWE_Issue"], 'defaultIssue3')

[
        'createIssueOfTypeBugAndSetCustomSummary'
].each {
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             ext: ":by_ $it",
             sleep: sleep,
             parameters: [
                     issue     : { -> defaultIssue3[] },
                     transition: it,
             ],
            ],
            [action    : 'getIssueList',
             ext: ":to check issue created by postfunction after transition issue by:$it",
             sleep: sleep,
             parameters: [
                     project   : projectName,
                     jql       : "project = $projectName AND summary ~ $customSummary AND type = Bug",
                     outputType: "Text",
                     columns   : "Type,Summary"
             ],
             data      : ["Bug",
                          /$customSummary/],
            ],
            [action    : 'runFromIssueList',
             sleep: sleep,
             ext: " : delete issue created by post function to check next option: " + it,
             parameters: [
                     jql   : "project = $projectName AND summary ~ $customSummary AND type = Bug",
                     common: ["--action deleteIssue --issue @issue@ --continue"
                     ]
             ]
            ]
    ])
}

def testSummary4 = 'createIssueOfTypeBugSetCustomSummaryAndVerifyRunAsUser'
def defaultIssue4 = createIssue([type: 'Task', summary: testSummary4, assignee: testUser], 'defaultIssue4')

[
        'createIssueOfTypeBugSetCustomSummaryAndRunAs_specificUser',
        'createIssueOfTypeBugSetCustomSummaryAndRunAs_userInFieldReporter',
        'createIssueOfTypeBugSetCustomSummaryAndRunAs_userInFieldCreator',
        'createIssueOfTypeBugSetCustomSummaryAndRunAs_userFromScript',
        'createIssueOfTypeBugSetCustomSummaryAndRunAs_userInFieldAssignee'
].each {
    def transition = it
    def expectedData;
    if(transition == "createIssueOfTypeBugSetCustomSummaryAndRunAs_userInFieldAssignee"){
        expectedData = "Creator . . . . . . . . . . . : $testUser"
    }else {
        expectedData = "Creator . . . . . . . . . . . : $getCurrentUserName"
    }
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             ext: ":by $transition:",
             sleep: sleep,
             parameters: [
                     issue     : { ->defaultIssue4[] },
                     transition: transition,
             ],
            ],
            [action: 'getIssueList',
             ext: ":to check new issue created by postfunction after transition issue by:$transition",
             sleep: sleep,
             parameters: [
                     project: projectName,
                     jql: "project = $projectName AND summary ~ $customSummary AND type = Bug",
                     outputType: "Text",
                     columns:"Type,Summary"
             ],
             data:[  "Bug" ,
                     /$customSummary/  ],
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: ":to check issue created by post function after transition issue by : " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $customSummary AND type = Bug",
                     common: [ "--action getFieldValue --issue @issue@ --field Creator --continue"],
             ],
             data: [expectedData]
            ],
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : delete issue_created by post function to check next option: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $customSummary AND type = Bug",
                     common: [ "--action deleteIssue --issue @issue@ --continue"
                     ]
             ]
            ]
    ])
}

def testSummary5 = 'createIssueOfTypeBugSetCustomSummaryAndVerifyAddCommentOption'
def defaultIssue5 = createIssue([type: 'Task', summary: testSummary5], 'defaultIssue5')

[
        'createIssueOfTypeBugSetCustomSummaryAndAddCommentByTemplateVisibleToAllUsers',
        'createIssueOfTypeBugSetCustomSummaryAndAddCommentByTemplateVisibleToAdminRoleUsers',
].each {
    def transition = it
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             ext: ":by $transition:",
             sleep: sleep,
             parameters: [
                     issue     : { ->defaultIssue5[] },
                     transition: transition,
             ],
            ],
            [action: 'getIssueList',
             ext: ":to check new issue created by postfunction after transition issue by:$transition",
             sleep: sleep,
             parameters: [
                     project: projectName,
                     jql: "project = $projectName AND summary ~ $customSummary AND type = Bug",
                     outputType: "Text",
                     columns:"Type,Summary"
             ],
             data:[  "Bug" ,
                     /$customSummary/  ],
            ],
    ])
    gint.taskHelper.add([
            [action: 'getComments',
             sleep: sleep,
             ext: ":to check comment added by post function after transition issue by: " + it,
             parameters:[
                     issue: {-> defaultIssue5[]}
             ],
             data: [  /$transition/  ]
            ],
    ])
    gint.taskHelper.add([
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : delete issue_created by post function to check next option: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $customSummary AND type = Bug",
                     common: [ "--action deleteIssue --issue @issue@ --continue"
                     ]
             ]
            ]
    ])
}

[
        'createIssueOfTypeBugSetCustomSummaryAndAddCommentByTemplateVisibleToTestGroupUsers',
].each {
    def transition = it
    gint.taskHelper.add([
            [action: 'addUserToGroup',
             sleepAfter: info?.isCloud? 8000 : 2000,
             ext: ":user $user to group $testGroup:$it",
             parameters: [
                     userId: "@self",
                     group: testGroup,
                     continue: null,
             ]
            ],
    ])
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             ext: ":by $transition:",
             sleep: sleep,
             parameters: [
                     issue     : { ->defaultIssue5[] },
                     transition: transition,
             ],
            ],
            [action: 'getIssueList',
             ext: ":to check new issue created by postfunction after transition issue by:$transition",
             sleep: sleep,
             parameters: [
                     project: projectName,
                     jql: "project = $projectName AND summary ~ $customSummary AND type = Bug",
                     outputType: "Text",
                     columns:"Type,Summary"
             ],
             data:[  "Bug" ,
                     /$customSummary/  ],
            ],
    ])
    gint.taskHelper.add([
            [action: 'getComments',
             sleep: sleep,
             ext: ":to check comment added by post function after transition issue by:when user $user in role $testRole and group $testGroup" + it,
             parameters:[
                     issue: {-> defaultIssue5[]}
             ],
             data: [  /$transition/    ]
            ],
    ])
    gint.taskHelper.add([
            [action: 'removeUserFromGroup',
             sleepAfter: info?.isCloud? 8000 : 2000,
             ext: ":remove user $user from group $testGroup:$it",
             parameters: [
                     userId: "@self",
                     group: testGroup,
                     continue: null,
             ]
            ],
    ])
    gint.taskHelper.add([
            [action: 'getComments',
             sleep: sleep,
             ext: ":to check comment added by post function after transition issue by:when user $user not in role $testRole and group $testGroup:" + it,
             parameters:[
                     issue: {-> defaultIssue5[]}
             ],
             failData: [  /$transition/ ]
            ],
    ])
    gint.taskHelper.add([
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : delete issue_created by post function to check next option: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $customSummary AND type = Bug",
                     common: [ "--action deleteIssue --issue @issue@ --continue"
                     ]
             ]
            ]
    ])
}

[
        //'createIssueOfTypeBugSetCustomSummaryAndAddCommentByTemplateVisibleToTestRoleUsers'
].each {
    def transition = it
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             ext: ":by $transition:",
             sleep: sleep,
             parameters: [
                     issue     : { ->defaultIssue5[] },
                     transition: transition,
             ],
            ],
            [action: 'getIssueList',
             ext: ":to check new issue created by postfunction after transition issue by:$transition",
             sleep: sleep,
             parameters: [
                     project: projectName,
                     jql: "project = $projectName AND summary ~ $customSummary AND type = Bug",
                     outputType: "Text",
                     columns:"Type,Summary"
             ],
             data:[  "Bug" ,
                     /$customSummary/  ],
            ],
    ])
    gint.taskHelper.add([
            [action: 'addProjectRoleActors',
             sleepAfter: info?.isCloud? 8000 : 2000,
             ext: ":user $user to role $testRole :$it",
             parameters: [
                     userId: "@self",
                     project: projectName,
                     role: testRole,
                     continue: null,
             ]
            ],
    ])
    gint.taskHelper.add([
            [action: 'getComments',
             sleep: sleep,
             ext: ":to check comment added by post function after transition issue by:when user $user in role $testRole and group $testGroup" + it,
             parameters:[
                     issue: {-> defaultIssue5[]}
             ],
             data: [  /$transition/    ]
            ],
    ])
    gint.taskHelper.add([
            [action: 'removeProjectRoleActors',
             sleepAfter: info?.isCloud? 8000 : 2000,
             ext: ":remove user $user from role $testRole:$it",
             parameters: [
                     userId: "@self",
                     project: projectName,
                     role: testRole,
                     continue: null,
             ]
            ],
    ])
    gint.taskHelper.add([
            [action: 'getComments',
             sleep: sleep,
             ext: ":to check comment added by post function after transition issue by:when user $user not in role $testRole and group $testGroup:" + it,
             parameters:[
                     issue: {-> defaultIssue5[]}
             ],
             failData: [  /$transition/ ]
            ],
    ])
    gint.taskHelper.add([
            [action: 'runFromIssueList',
             sleep: sleep,
             ext: " : delete issue_created by post function to check next option: " + it,
             parameters:[
                     jql: "project = $projectName AND summary ~ $customSummary AND type = Bug",
                     common: [ "--action deleteIssue --issue @issue@ --continue"
                     ]
             ]
            ]
    ])
}
*/








