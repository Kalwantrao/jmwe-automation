buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
//apply from: gint.resourceDirectory +'/src/common/utils.gradle'
apply from: gint.resourceDirectory + '/src/itest-postfunction1/postfunction1.gradle'

def functionKey = 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__CopyCommentsToLinkedIssuesFunction'
//def functionKey = 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.mwec__CopyCommentsToLinkedIssuesFunction'

relatedIssue.remove("currentIssue")

String allComment = 'copy_all_comments_to_related_issue_'
String latestComment = 'copy_latest_comments_to_related_issue_'
String commentFromTransitionScreen = 'copy_comments_to_related_issue_added_on_transitionScreen_'
String copyFilterCommentsTrue = 'copy_filter_comments_true'
String copyFilterCommentsFalse = 'copy_filter_comments_false'
String copyAttachment = 'copy_attachment_to_related_issue'
String copyInlineImages = 'copy_inline_images'
/*
relatedIssue.eachWithIndex { key, value, i ->
    def transition = allComment + i
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"whichComments\":\"all-comments\",\"filterCommentsToCopy\":false,\"commentAuthor\":\"original-author\",\"commentUser\":\"\",\"commentVisibility\":\"original-visibility\",\"copyInlineImages\":false,\"copyMentionedAttachments\":false,\"runAsType\":\"currentUser\"}"
    if(isCloud) {
        addTransitionFunction(transition, 'postfunction', cloud, functionKey)
    }
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = latestComment + i
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"whichComments\":\"latest-comment\",\"filterCommentsToCopy\":false,\"commentAuthor\":\"original-author\",\"commentUser\":\"\",\"commentVisibility\":\"original-visibility\",\"copyInlineImages\":false,\"copyMentionedAttachments\":false,\"runAsType\":\"currentUser\"}"
    if(isCloud) {
        addTransitionFunction(transition, 'postfunction', cloud, functionKey)
    }
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition =  commentFromTransitionScreen + i
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"whichComments\":\"current-comment\",\"filterCommentsToCopy\":false,\"commentAuthor\":\"original-author\",\"commentUser\":\"\",\"commentVisibility\":\"original-visibility\",\"copyInlineImages\":false,\"copyMentionedAttachments\":false,\"runAsType\":\"currentUser\"}"
    if(isCloud) {
        addTransitionFunction(transition, 'postfunction', cloud, functionKey)
    }
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = copyFilterCommentsFalse + i
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"whichComments\":\"all-comments\",\"filterCommentsToCopy\":true,\"commentsFilterScript\":\"{{ false }}\",\"commentAuthor\":\"original-author\",\"commentUser\":\"\",\"commentVisibility\":\"original-visibility\",\"copyInlineImages\":false,\"copyMentionedAttachments\":false,\"runAsType\":\"currentUser\"}"
    if(isCloud) {
        addTransitionFunction(transition, 'postfunction', cloud, functionKey)
    }
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = copyFilterCommentsTrue + i
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"whichComments\":\"all-comments\",\"filterCommentsToCopy\":true,\"commentsFilterScript\":\"{{ true }}\",\"commentAuthor\":\"original-author\",\"commentUser\":\"\",\"commentVisibility\":\"original-visibility\",\"copyInlineImages\":false,\"copyMentionedAttachments\":false,\"runAsType\":\"currentUser\"}"
    if(isCloud) {
        addTransitionFunction(transition, 'postfunction', cloud, functionKey)
    }
}
*/
relatedIssue.take(1).eachWithIndex { key, value, i ->
    def transition = copyAttachment + i
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"whichComments\":\"all-comments\",\"filterCommentsToCopy\":false,\"commentAuthor\":\"original-author\",\"commentUser\":\"\",\"commentVisibility\":\"original-visibility\",\"copyInlineImages\":false,\"copyMentionedAttachments\":true,\"runAsType\":\"currentUser\"}"
    if(isCloud) {
        addTransitionFunction(transition, 'postfunction', cloud, functionKey)
    }
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def transition = copyInlineImages + i
    def cloud = defaultFieldsCloud.postfunction + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"whichComments\":\"all-comments\",\"filterCommentsToCopy\":false,\"commentAuthor\":\"original-author\",\"commentUser\":\"\",\"commentVisibility\":\"original-visibility\",\"copyInlineImages\":true,\"copyMentionedAttachments\":false,\"runAsType\":\"currentUser\"}"
    if(isCloud) {
        addTransitionFunction(transition, 'postfunction', cloud, functionKey)
    }
}

createWorkflowScheme()
createProject()

def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[]}], 'Sub-task')
def epic = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic')
def issueBelongsToEpic = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic[]} ], 'BelongsToEpic')
def initiative = createIssue([type: 'Initiative', summary: 'JMWE_Issue' ], 'Initiative')
def epic_initiative = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative')
def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def blocks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'blocks')
def clones = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'clones')
def duplicates = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'duplicates')
def relatesTo = createIssue([type: 'Task', summary: 'JMWE_Task'], 'relatesTo')
def jqlIssue = createIssue([type: 'Task', summary: 'JQL_ISSUE'], 'jqlIssue')
updateIssue([issue: {->epic_initiative[]}, field: "Parent Link", value: {->initiative[]}], "parent initiative child epic")

def linkIssuesMap = [
        blocks : {->blocks[]},
        "$clonesLinkType" : {->clones[]},
        duplicates : {->duplicates[]},
        'relates to': {->relatesTo[]}
]

linkIssuesMap.eachWithIndex { key, value, i ->
    linkIssue([issue: {->issueLinks[]}, toIssue: value, link: "$key"], key)
}

def relatedIssuesMap = [
        {->parent[]} : {->subtask[]},
        {->subtask[]} : {->parent[]},
        {->epic[]} : {->issueBelongsToEpic[]},
        {->issueBelongsToEpic[]} : {->epic[]},
        {-> initiative[]} : {->epic_initiative[]},
        {->epic_initiative[]} : {-> initiative[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->blocks[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->clones[]},
        {->clones[]} : {->issueLinks[]},
        {->issueLinks[]} : {->duplicates[]},
        {->duplicates[]} : {->issueLinks[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->relatesTo[]} : {->issueLinks[]},
        {->issueLinks[]} : {->jqlIssue[]},
]

def getCurrentUserName = info?.isCloud? info?.userDisplayName : user

[
        //allComment,
        //latestComment,
        //commentFromTransitionScreen,
        //copyFilterCommentsFalse,
        //copyFilterCommentsTrue
].eachWithIndex { transitionPrefix, idx->
    relatedIssuesMap.eachWithIndex { key, value, i ->
        def transition = transitionPrefix + i
        gint.taskHelper.add([
                [action: "addComment",
                 sleep: sleep,
                ext: ":to current issue before transition issue with_$transition",
                parameters: [
                        issue: key,
                        comment: transition,
                ]
                ],
        ]
                )
        if(transitionPrefix == commentFromTransitionScreen) {
            gint.taskHelper.add([
                    [action    : 'transitionIssue',
                     sleep: sleep,
                     ext: ":by transition_ $transition:",
                     parameters: [
                             issue     : key,
                             transition: transition,
                             comment: transition
                     ],
                    ],
            ]
            )
        }
        else {
            gint.taskHelper.add([
                    [action    : 'transitionIssue',
                     sleep: sleep,
                     ext: ":by transition_ $transition:",
                     parameters: [
                             issue     : key,
                             transition: transition,
                     ],
                    ],
            ]
            )
        }
        if(transitionPrefix == copyFilterCommentsFalse) {
            gint.taskHelper.add([
                    [action: 'getComments',
                     sleep: sleep,
                     ext: ":after transition issue with_$transition:",
                     parameters: [
                             issue: value
                     ],
                     failData:[   /$transition/  ],
                    ]
            ])
        }
        else {
            gint.taskHelper.add([
                    [action: 'getComments',
                     sleep: sleep,
                     ext: ":after transition issue with_$transition:",
                     parameters: [
                             issue: value
                     ],
                     data:[   /$transition/  ],
                    ]
            ])
        }
    }
}

// TODO- need acli support to add the attachment and inline comment by add comment action -improvement: ACLI-3758 created.
[
        //copyAttachment,
        //copyInlineImages
].eachWithIndex { transitionPrefix, idx->
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        def transition = transitionPrefix + i
        gint.taskHelper.add([
                [action: "addAttachment",
                 sleep: sleep,
                 ext: ":to current issue before transition issue with_$transition",
                 parameters: [
                         issue: key,
                         file: gint.resourceDirectory + "/resources/attachment.png",
                 ]
                ],
        ]
        )
            gint.taskHelper.add([
                    [action    : 'transitionIssue',
                     sleepAfter: 30000,
                     ext: ":by transition_ $transition:",
                     parameters: [
                             issue     : key,
                             transition: transition,
                     ],
                    ],
            ]
            )
            gint.taskHelper.add([
                    [action: 'getFieldValue',
                     sleep: 30000,
                     ext: ":after transition issue with_$transition:",
                     parameters: [
                             issue: value,
                             field: "Attachment",
                     ],
                     data:[   "attachment.png" ],
                    ]
            ])
        }
}



