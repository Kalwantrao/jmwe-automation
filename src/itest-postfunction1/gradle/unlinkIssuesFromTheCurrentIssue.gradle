buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/itest-postfunction1/postfunction.gradle'

def conditionToUnlinkIssues = [
        lowPriority : ["groovyExpression=$groovyExpression.checkPriorityLow"]
]

def functionKey = info?.isCloud ? "com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.${testCloudBuild}__UnlinkIssuesFunction" : 'com.innovalog.jmwe.jira-misc-workflow-extensions:unlink-issues-function'

['unlinkIssuesWhichReturnsConditionTrue'].each {
    def server =  conditionToUnlinkIssues.lowPriority + runAsUser.currentUser
    def cloud = "{\"conditionalExecutionScript\":\"$nunjuckExpression.checkPriorityLow\",\"runAsType\":\"addonUser\"}"
    addTransitionFunction(it, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

createWorkflowScheme()
createProject()

def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def blocks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'blocks')

[
        'unlinkIssuesWhichReturnsConditionTrue'
].eachWithIndex{ transition, i ->
    ["High","Low","Medium"].eachWithIndex { String priority, int idx ->
        def fieldToChange = "Priority"
        def expectedOutput;
        def dataParam;
        if (priority == "Low") {
            dataParam = [failData: ["Blocks", "${-> blocks[]}"]]
        } else {
            dataParam = [data: ["Blocks", "${-> blocks[]}"]]
        }
        if (priority == "Low") {
            expectedOutput = "0 links for issue"
        } else {
            expectedOutput = "1 links for issue"
        }
        gint.taskHelper.add([
                [action    : "linkIssue",
                 ext       : ":Link issues by link type:blocks _before transition issue with_ $transition: when priority is $priority",
                 sleep     : info?.isCloud ? 5000 : 0,
                 parameters: [
                         issue   : { -> issueLinks[] },
                         toIssue : { -> blocks[] },
                         link    : "blocks",
                         continue: null
                 ]
                ],
                [action    : 'getLinkList',
                 sleep     : info?.isCloud ? 5000 : 0,
                 ext       : ":Check issue has link issues before transition issue with:" + transition + ":when priority is $priority",
                 parameters: [
                         issue     : { -> issueLinks[] },
                         outputType: "text",
                         select    : "Type Name:Blocks",
                         columns   : "Issue,'To Issue','Type Name'"
                 ],
                 data      : ["Blocks", "${-> blocks[]}"],
                ],
                [action    : 'setFieldValue',
                 ext       : ": Of prioity to_ $priority:before transition issue with :$transition",
                 sleep     : info?.isCloud ? 5000 : 0,
                 parameters: [
                         issue: { -> issueLinks[] },
                         field: fieldToChange,
                         value: priority
                 ]
                ],
                [action    : 'transitionIssue',
                 ext       : ": transition issue with $transition _when prioity is $priority:",
                 sleep     : info?.isCloud ? 5000 : 0,
                 parameters: [
                         issue     : { -> issueLinks[] },
                         transition: transition,
                 ]
                ],
                [action      : 'getLinkList',
                 ext         : ": when prioity is $priority _:after transition issue with_" + transition,
                 sleep       : info?.isCloud ? 5000 : 0,
                 parameters  : [
                         issue     : { -> issueLinks[] },
                         outputType: "text",
                         select    : "Type Name:Blocks",
                         columns   : "Issue,'To Issue','Type Name'"
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     if (output.contains(expectedOutput)) {
                         gint.helper.log("Test passed for transition", "unlinkIssuesWhichReturnsConditionTrue")
                     } else {
                         gint.helper.log("Test failed for transition", "unlinkIssuesWhichReturnsConditionTrue")
                         assert output.contains(expectedOutput)
                     }
                 }
                ],
        ]
        )
    }
}


/*
 "Field",  "From",         "From String",                    "To",              "To String"

 "Link",    "",             "",                              "AUTOMATION-2",      "This issue blocks AUTOMATION-2"

 "Link",   "AUTOMATION-2", "This issue blocks AUTOMATION-2",   "",                  ""
*/


