buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
//apply from: gint.resourceDirectory + '/src/common/utils.gradle'
apply from: gint.resourceDirectory +'/src/itest-postfunction1/postfunction1.gradle'

def functionKey = info?.isCloud ? 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__TransitionIssueFunction' : 'com.innovalog.jmwe.jira-misc-workflow-extensions:TransitionIssue-function'

def relatedIssue = info?.isCloud ? relatedIssueCloud : relatedIssueServer
def groovyScript = '''def trigger = !issue.subtasks.collect { it.status.name }.any { it != 'Done'}'''
def nunjucksScript = '''{{ targetIssue | subtasks("status") | selectattr('fields.status.name', 'ne', 'Done') | list == [] }}'''

def labelsByTemplate = "test_labels"
def expressionComment = "expression"

def transitions = [
        specifyName : ["transitionType=rawValue"],
        byName : [ "transitionType=rawValue","transitions=In Progress" ],
        calculated : ["transitionType=expression","calculatedTransition='21'","transitions='21'" ]
]

def options = [
        allUnselected : ["skipConditions=no","skipValidators=no","skipPermissions=no","triggerEvent=no"],
        skipConditions : [ no : ["skipConditions=no"], yes : ["skipConditions=yes"] ],
        skipValidators : [ no : ["skipValidators=no"], yes : ["skipValidators=yes"] ],
        skipPermissions : [ no : ["skipPermissions=no"], yes : ["skipPermissions=yes"] ],
        triggerManualEvent : [ no : ["triggerEvent=no"], yes : ["triggerEvent=yes"]]
]

def addFields = [
        noField : ["fieldsToSet={}"],
        copyFromCurrentIssue : ["fieldsToSet={\"labels\":{\"action\":\"copy\"}}"],
        setByScript : ["fieldsToSet={\"labels\":{\"action\":\"script\",\"value\":\"$groovyExpression.getDescription\"}}"],
        setByTemplate : ["fieldsToSet={\"labels\":{\"action\":\"template\",\"value\":\"$labelsByTemplate\"}}"]
]

def addComment = [
        not : ["commentType=", "comment="],
        commentAddedBytemplate : ["commentType=template","comment=commentAddedBytemplate"],
        expression : [ "commentType=expression","comment=$groovyExpression.getDescription" ],
        runAsSpecificUser : [ "valueType=template", "comment=runAsSpecificUser" ],
        runAsUserInFieldAssignee : [ "commentType=template", "comment=runAsUserInFieldAssignee" ],
        runAsUserInFieldReporter: [ "commentType=template", "comment=runAsUserInFieldReporter" ],
        runAsUserInFieldCreator : [ "commentType=template", "comment=runAsUserInFieldCreator" ],
        runAsUserFromScript : [ "commentType=template", "comment=runAsUserFromScript" ],
        commentVisibleToJiraSoftwareUsers : ["commentType=template", "comment=commentVisibleToJiraSoftwareUsers"],
        commentVisibleToJiraAdminRoles: ["commentType=template", "comment=commentVisibleToJiraAdminRoles"],
        commentVisibleToTestGroup : ["commentType=template", "comment=commentVisibleToTestGroup"],
        commentVisibleToTestProjectRole : ["commentType=template", "comment=commentVisibleToTestProjectRole"],
]

def commentVisibility = [
        notSelected : [ "restrictToGroup=", "restrictToProjectRole=" ],
        jiraAdminGroups : [ "restrictToGroup=$jiraAdminGrooup", "restrictToProjectRole=" ],
        jiraAdminRoles : [ "restrictToGroup=", "restrictToProjectRole=$jiraAdminRoleId" ],
        jiraSoftwareUsers : ["restrictToGroup=$testGroup", "restrictToProjectRole="],
]

def defaultFieldsCloud = [
        "postFunction.id=18b36491-f556-48cd-b476-7b82f02c7249",
]

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'transition_issue_to_in_progress'
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"transition\":\"In Progress@@${workflow}\",\"runAsType\":\"currentUser\"}"
    def server = defaultFieldsServer +  "selectedLinkType=$value" + transitions.byName + options.allUnselected + addFields.noField + addComment.not + commentVisibility.notSelected + runAsUser.currentUser + conditionalExecution.false
    addTransitionFunction(transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud){
        moveTransitionFunction(transition + i, 4)
    }
}

statusList.eachWithIndex { key, value, i ->
    def transition = 'transition_current_issue_to_' + key
    def server = defaultFieldsServer + transitions.specifyName + "transitions=$value" + conditionalExecution.false + "selectedLinkType=$relatedIssue.currentIssue" + options.allUnselected + addFields.noField + addComment.not + commentVisibility.notSelected + runAsUser.currentUser
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"transition\":\"${value}@@${workflow}\",\"runAsType\":\"currentUser\"}"
    addTransitionFunction(transition ,'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud){
        moveTransitionFunction(transition , 4)
    }
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def transition = 'check_trigger_calculated_transition'
    def server = defaultFieldsServer + conditionalExecution.false +  "selectedLinkType=$value" + transitions.calculated + options.allUnselected + addFields.noField + addComment.not + commentVisibility.notSelected + runAsUser.currentUser
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"transition\":\"21\",\"runAsType\":\"currentUser\"}"
    addTransitionFunction(transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud){
        moveTransitionFunction(transition + i, 4)
    }
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def transition = 'transition_issue_to_in_progress_only_if_condition_true'
    def server = defaultFieldsServer + conditionalExecution.true +  "selectedLinkType=$value" + transitions.byName + options.allUnselected + addFields.noField + addComment.not + commentVisibility.notSelected + runAsUser.currentUser
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":true,\"conditionalExecutionScript\":\"$nunjuckExpression.checkPriorityHigh\",\"targetIssue\":\"$value\",\"transition\":\"In Progress@@${workflow}\",\"runAsType\":\"currentUser\"}"
    addTransitionFunction(transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud){
        moveTransitionFunction(transition + i, 4)
    }
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def transition = 'transition_issue_to_in_progress_and_add_labels_set_by_template'
    def server = defaultFieldsServer + conditionalExecution.false +  "selectedLinkType=$value" + transitions.byName + options.allUnselected + addFields.setByTemplate + addComment.not + commentVisibility.notSelected + runAsUser.currentUser
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"transition\":\"In Progress@@${workflow}\",\"runAsType\":\"currentUser\",\"fields\":{\"labels\":{\"value\":\"$labelsByTemplate\"}}}"
    addTransitionFunction(transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud){
        moveTransitionFunction(transition + i, 4)
    }
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def transition = 'commentAddedBytemplate'
    def server = defaultFieldsServer + conditionalExecution.false +  "selectedLinkType=$value" + transitions.byName + options.allUnselected + addFields.noField + addComment.commentAddedBytemplate + commentVisibility.notSelected + runAsUser.currentUser
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"transition\":\"In Progress@@${workflow}\",\"runAsType\":\"currentUser\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\"}"
    addTransitionFunction(transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud){
        moveTransitionFunction(transition + i, 4)
    }
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def transition = 'commentVisibleToJiraAdminRoles'
    def server = defaultFieldsServer + conditionalExecution.false +  "selectedLinkType=$value" + transitions.byName + options.allUnselected + addFields.noField + addComment.commentVisibleToJiraAdminRoles + commentVisibility.jiraAdminRoles + runAsUser.currentUser
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"transition\":\"In Progress@@${workflow}\",\"runAsType\":\"currentUser\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",\"restrictToProjectRoleId\":$jiraAdminRoleId}"
    addTransitionFunction(transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud){
        moveTransitionFunction(transition + i, 4)
    }
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def transition = 'runAsSpecificUser'
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"transition\":\"In Progress@@${workflow}\",\"runAsType\":\"thisUser\",\"runAs\":\"accountId:$currentUserKey\"}"
    def server = defaultFieldsServer +   "selectedLinkType=$value" + transitions.byName + options.allUnselected + addFields.noField + addComment.not + commentVisibility.notSelected + conditionalExecution.false + runAsUser.specificUser
    addTransitionFunction( transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud){
        moveTransitionFunction(transition + i, 4)
    }
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def transition = 'runAsUserInFieldAssignee'
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"transition\":\"In Progress@@${workflow}\",\"runAsType\":\"userField\",\"runAsField\":\"assignee\"}"
    def server = defaultFieldsServer +   "selectedLinkType=$value" + transitions.byName + options.allUnselected + addFields.noField + addComment.not + commentVisibility.notSelected + conditionalExecution.false + runAsUser.userInFieldAssignee
    addTransitionFunction( transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud){
        moveTransitionFunction(transition + i, 4)
    }
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def transition = 'runAsUserInFieldReporter'
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"transition\":\"In Progress@@${workflow}\",\"runAsType\":\"userField\",\"runAsField\":\"reporter\"}"
    def server = defaultFieldsServer +   "selectedLinkType=$value" + transitions.byName + options.allUnselected + addFields.noField + addComment.not + commentVisibility.notSelected + conditionalExecution.false + runAsUser.userInFieldReporter
    addTransitionFunction( transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud){
        moveTransitionFunction(transition + i, 4)
    }
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def transition = 'runAsUserInFieldCreator'
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"transition\":\"In Progress@@${workflow}\",\"runAsType\":\"userField\",\"runAsField\":\"creator\"}"
    def server = defaultFieldsServer +  "selectedLinkType=$value" + transitions.byName + options.allUnselected + addFields.noField + addComment.not + commentVisibility.notSelected + conditionalExecution.false + runAsUser.userInFieldCreator
    addTransitionFunction( transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud){
        moveTransitionFunction(transition + i, 4)
    }
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def transition = 'runAsUserFromScript'
    def cloud = defaultFieldsCloud + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={\"conditionalExecution\":false,\"targetIssue\":\"$value\",\"transition\":\"In Progress@@${workflow}\",\"runAsType\":\"userFromScript\",\"runAsScript\":\"$nunjuckExpression.returnsReporter\"}"
    def server = defaultFieldsServer + "selectedLinkType=$value" + transitions.byName + options.allUnselected + addFields.noField + addComment.not + commentVisibility.notSelected + conditionalExecution.false + runAsUser.userFromScript
    addTransitionFunction( transition + i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    if(!isCloud){
        moveTransitionFunction(transition + i, 4)
    }
}

createWorkflowScheme()
createProject()

def current = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'current')
def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[]}], 'Sub-task')
def epic = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic')
def issueBelongsToEpic = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic[]} ], 'BelongsToEpic')
def initiative = createIssue([type: 'Initiative', summary: 'JMWE_Issue' ], 'Initiative')
def epic_initiative = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative')
def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def blocks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'blocks')
def clones = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'clones')
def duplicates = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'duplicates')
def relatesTo = createIssue([type: 'Task', summary: 'JMWE_Task'], 'relatesTo')
def jqlIssue = createIssue([type: 'Task', summary: 'JQL_ISSUE'], 'jqlIssue')

updateIssue([issue: {->epic_initiative[]}, field: "Parent Link", value: {->initiative[]}], "parent initiative child epic")

def linkIssuesMap = [
        blocks : {->blocks[]},
        "$clonesLinkType" : {->clones[]},
        duplicates : {->duplicates[]},
        'relates to': {->relatesTo[]}
]

linkIssuesMap.eachWithIndex { key, value, i ->
    linkIssue([issue: {->issueLinks[]}, toIssue: value, link: "$key"], key)
}

def relatedIssuesMap = [
        {->current[]} : {->current[]},
        {->parent[]} : {->subtask[]},
        {->subtask[]} : {->parent[]},
        {->epic[]} : {->issueBelongsToEpic[]},
        {->issueBelongsToEpic[]} : {->epic[]},
        {-> initiative[]} : {->epic_initiative[]},
        {->epic_initiative[]} : {-> initiative[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->blocks[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->clones[]},
        {->clones[]} : {->issueLinks[]},
        {->issueLinks[]} : {->duplicates[]},
        {->duplicates[]} : {->issueLinks[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->relatesTo[]} : {->issueLinks[]},
        {->issueLinks[]} : {->jqlIssue[]}
]

[
        'transition_issue_to_in_progress',
].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ': when ' + it+ i,
                 sleep: info?.isCloud? 5000 :  0,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: info?.isCloud? 5000 :  0,
                 ext       : " :when :" + it + i,
                 parameters: [
                         issue: value,
                         field: "Status"
                 ],
                 data      : [/Status  . . . . . . . . . . . : In Progress/],
                ],
                [action    : 'transitionIssue',
                 sleep: info?.isCloud? 5000 :  0,
                 ext: ": current issue to TO DO status after checking:" + it+ i,
                 parameters: [
                         issue     : key,
                         transition: "To Do",
                 ]
                ],
                [action    : 'transitionIssue',
                 sleep: info?.isCloud? 5000 :  0,
                 ext: ": target issue to TO DO status after checking:" + it+ i,
                 parameters: [
                         issue     : value,
                         transition: "To Do",
                 ]
                ],
        ])
    }
}

[
        'transition_issue_to_in_progress_only_if_condition_true'
].collect {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action: 'updateIssue',
                 sleep: info?.isCloud? 5000 : 0,
                 ext: ": set priority Low to check conditional execution false: for transition:" + it + i,
                 parameters: [
                         issue: key,
                         priority: 'Low'
                 ]
                ],
                [action    : 'transitionIssue', ext: ': when condition returns false as priority not high' + it + i,
                 sleep: info?.isCloud? 5000 : 0,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: info?.isCloud? 5000 : 0,
                 ext       : ": OF status after transition the issue with:" + it + i +": and condition is false:",
                 parameters: [
                         issue: value,
                         field: "Status"
                 ],
                 failData      : [/Status  . . . . . . . . . . . : In Progress/],
                ],
                [action: 'updateIssue',
                 sleep: info?.isCloud? 5000 : 0,
                 ext: ": set priority High to check conditional execution true_for transition:" + it + i,
                 parameters: [
                         issue: key,
                         priority: 'High'
                 ]
                ],
                [action    : 'transitionIssue',
                 ext: ": when condition returns true_priority is high:" + it + i,
                 sleep: info?.isCloud? 5000 : 0,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: info?.isCloud? 5000 : 0,
                 ext       : ": OF status after transition the issue with:" + it + i +": and condition is true:",
                 parameters: [
                         issue: value,
                         field: "Status"
                 ],
                 data      : [ /Status  . . . . . . . . . . . : In Progress/ ],
                ],
                [action    : 'transitionIssue',
                 sleep: info?.isCloud? 5000 :  0,
                 ext: ": current issue to TO DO status after checking:" + it+ i,
                 parameters: [
                         issue     : key,
                         transition: "To Do",
                 ]
                ],
                [action    : 'transitionIssue',
                 sleep: info?.isCloud? 5000 :  0,
                 ext: ": linked issue to TO DO status after checking:" + it+ i,
                 parameters: [
                         issue     : value,
                         transition: "To Do",
                 ]
                ],
        ])
    }
}

[
        'check_trigger_calculated_transition'
].collect {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 ext: ": to check:" + it+ i,
                 sleep: info?.isCloud? 5000 :  0,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: info?.isCloud? 5000 :  0,
                 ext       : " :to check :" + it + i,
                 parameters: [
                         issue: value,
                         field: "Status"
                 ],
                 data      : [/Status  . . . . . . . . . . . : In Progress/],
                ],
                [action    : 'transitionIssue',
                 sleep: info?.isCloud? 5000 :  0,
                 ext: ": current issue to TO DO status after checking:" + it+ i,
                 parameters: [
                         issue     : key,
                         transition: "To Do",
                 ]
                ],
                [action    : 'transitionIssue',
                 sleep: info?.isCloud? 5000 :  0,
                 ext: ": target issue to TO DO status after checking:" + it+ i,
                 parameters: [
                         issue     : value,
                         transition: "To Do",
                 ]
                ],
        ])
    }
}

[
        'transition_current_issue_to_',
].collect {
    statusList.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 ext: it + key + i,
                 sleep: info?.isCloud? 5000 :  0,
                 parameters: [
                         issue     : { -> current[] },
                         transition: it + key,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: info?.isCloud? 5000 :  0,
                 ext       : it + key+ i,
                 parameters: [
                         issue: { -> current[] },
                         field: "Status"
                 ],
                 data      : [/Status  . . . . . . . . . . . : $value/],
                 failData  : [/Status  . . . . . . . . . . . : To Do/]
                ],
                [action    : 'transitionIssue',
                 ext: it + i + ":from $key to To Do",
                 sleep: info?.isCloud? 5000 :  0,
                 parameters: [
                         issue     : { -> current[] },
                         transition: "To Do",
                 ]
                ],
        ])
    }
}

// Need ACLI support to addTransitionScreen to existing workflow transition - ACLI-3646
[
        //'transition_issue_to_in_progress_and_add_labels_set_by_template',
].collect {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 ext: ":" + it + i,
                 sleep: info?.isCloud? 5000 :  0,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: info?.isCloud? 5000 :  0,
                 ext       : " :to check :" + it + i,
                 parameters: [
                         issue: value,
                         field: "Status"
                 ],
                 data      : [/Status  . . . . . . . . . . . : In Progress/],
                ],
                [action    : 'getFieldValue',
                 sleep: info?.isCloud? 5000 :  0,
                 ext       : ": $it "+ i,
                 parameters: [
                         issue: value,
                         field : "Labels"
                 ],
                 data      : [ /Labels  . . . . . . . . . . . : $labelsByTemplate/ ],
                ],
                [action    : 'transitionIssue',
                 ext: ": To Do after checking: " + it+ i,
                 sleep: info?.isCloud? 5000 :  0,
                 parameters: [
                         issue     : value,
                         transition: "To Do",
                 ]
                ],
        ])
    }
}

// Need ACLI support to addTransitionScreen to existing workflow transition - ACLI-3646
[
        //'commentAddedBytemplate',
        //'commentVisibleToJiraAdminRoles',
].collect {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ':' + it + i,
                 sleep: info?.isCloud? 5000 :  0,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: info?.isCloud? 5000 :  0,
                 ext       : it + i,
                 parameters: [
                         issue: value,
                         field: "Status"
                 ],
                 data      : [/Status  . . . . . . . . . . . : In Progress/],
                 failData  : [/Status  . . . . . . . . . . . : To Do/]
                ],
                [action: 'getComments', ext: " : add comment by template :" + it + i,
                 sleep: info?.isCloud? 5000 :  0,
                 parameters: [
                         issue: value
                 ],
                 data:[   /$user added a comment on/,
                          /$it/
                 ],
                ],
                [action    : 'transitionIssue',
                 ext: ": To Do:" + it+ i,
                 sleep: info?.isCloud? 5000 :  0,
                 parameters: [
                         issue     : value,
                         transition: "To Do",
                 ]
                ],
        ])
    }
}

[
        'runAsUserInFieldAssignee'
].each {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
            gint.taskHelper.add([
                    [action: 'assignIssue',
                     ext: ": assign the issue to $testUser to check run as user in field assignee option: " + it + i,
                     parameters:[
                             issue: key,
                             assignee: testUser
                     ],
                    ],
                    [action    : 'transitionIssue', ext: ': Check run as :  ' + it + i,
                     parameters: [
                             issue     : key,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     ext       : " :Check:" + it + i,
                     parameters: [
                             issue: value,
                             field: "Status"
                     ],
                     data      : [/Status  . . . . . . . . . . . : In Progress/],
                    ],
                    [action: 'getIssueHistoryList', ext: ": postfunction should be triggered by user : $testUser when :"+ it+i,
                        parameters: [
                                issue: value,
                                outputType: "Text",
                                columns: "Author,Field,'To String'",
                                select: ["Author:$testUser","Field:status","To String:In Progress"],
                                ],
                            data:[ "$testUser", "status", "In Progress" ],
                    ],
                    [action    : 'transitionIssue',
                     ext: ': current issue to original status to check next option for : ' + it + i,
                     parameters: [
                             issue     : value,
                             transition: "To Do",
                     ]
                    ],
            ])

        }
}

[
        'runAsUserInFieldReporter',
        'runAsUserInFieldCreator',
        'runAsUserFromScript',
        'runAsSpecificUser',
].each {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ': Check run as :  ' + it + i,
                 parameters: [
                         issue     : key,
                         transition:  it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 ext       : " :run as :" + it + i,
                 parameters: [
                         issue: value,
                         field: "Status"
                 ],
                 data      : [/Status  . . . . . . . . . . . : In Progress/],
                ],
                [action: 'getIssueHistoryList', ext: ": postfunction should be triggered by user : $user when :"+ it +i,
                 parameters: [
                         issue: value,
                         outputType: "Text",
                         columns: "Author,Field,'To String'",
                         select: ["Author:$user","Field:status","To String:In Progress"],
                 ],
                 data:[ "$user", "status", "In Progress" ],
                ],
                [action    : 'transitionIssue', ext: ': current issue to original status to check next option for : ' + it + i,
                 parameters: [
                         issue     : value,
                         transition: "To Do",
                 ]
                ],
        ])
    }
}
