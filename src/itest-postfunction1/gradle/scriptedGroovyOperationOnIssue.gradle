buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/itest-postfunction1/postfunction.gradle'

def functionKey = info?.isCloud ? "com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.${testCloudBuild}__ScriptedPostFunction" : 'com.innovalog.jmwe.jira-misc-workflow-extensions:groovy-function'

["currentUser","userFromScriptInvalid"].each {
    runAsUser.remove(it)
}

String scriptForSummary = "{{ '/rest/api/2/issue/:issue' | callJira(verb=('PUT'), params={'issue':issue.key}, body={'fields': {'summary': 'test_summary'} }) }}"
String scriptForSummaryCreateTransition = "{{ '/rest/api/2/issue/:issue' | callJira(verb=('PUT'), params={'issue':issue.key}, body={'fields': {'summary': 'issue_created_by_create_transition'} }) }}"

['setSummaryByScript'].each {
    def server =  ["groovyExpression=issue.setFieldValue('Summary','test_summary')","scriptDescription="]
    def cloud =  "{\"script\":\"$scriptForSummary\",\"scriptDescription\":\"\"}"
    addTransitionFunction(it, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

['setSummaryByScript'].each {
    def cloud =  "{\"script\":\"$scriptForSummaryCreateTransition\",\"scriptDescription\":\"\"}"
    if(isCloud){
        addTransitionFunctionOnCreateTransition(it + "by create transition", 'postfunction', cloud , functionKey)
    }
}

runAsUser.eachWithIndex { userType, fields, idx ->
    def transition = userType
    def server =  [/groovyExpression=issue.setFieldValue('Summary',"$userType")/,"scriptDescription=" ,fields]
    if(!isCloud) {
        addTransitionFunction(transition , 'postfunction', server, functionKey )
        moveTransitionFunction(transition, 4)
    }
}

def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'defaultIssue')

if(isCloud){
    gint.taskHelper.add(
            action: "getFieldValue", ext: ":to check the issue summary set by postfunction on create transition",
            sleep: sleep,
            parameters: [
                    field: "Summary",
                    issue: {->defaultIssue[]}
            ],
            failData: ["Summary . . . . . . . . . . . : JMWE_Issue"],
            data: ["Summary . . . . . . . . . . . : issue_created_by_create_transition"]
    )
}

[
        'setSummaryByScript'
].each {
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: " : " + it,
                 sleep     : sleep,
                 parameters: [
                         transition: it,
                         issue     : { -> defaultIssue[] },
                 ],
                ],
                [action    : 'getFieldValue', ext: ": Chack :" + it,
                 sleep     : sleep,
                 parameters: [
                         issue: { -> defaultIssue[] },
                         field: "Summary",
                 ],
                 data      : ["Summary . . . . . . . . . . . : test_summary"],
                ]

        ])
}

if(!isCloud) {
    gint.taskHelper.add(
            action: 'assignIssue',
            sleep: sleep,
            parameters: [
                    issue   : { -> defaultIssue[] },
                    assignee: user
            ]
    )
}

runAsUser.eachWithIndex { userType, fields, idx ->
    def transition = userType
    if(!isCloud) {
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 ext: " : " + transition,
                 sleep     : sleep,
                 parameters: [
                         transition: transition,
                         issue     : { -> defaultIssue[] },
                 ],
                ],
                [action    : 'getIssueHistoryList',
                 ext: ": Chack :" + transition,
                 sleep     : sleep,
                 parameters: [
                         issue     : { -> defaultIssue[] },
                         outputType: "Text",
                         select    : ["Field:summary","To String:$transition"],
                         columns   : "Author,'To String'",
                 ],
                 data      : ["$getCurrentUserName", "$transition"],
                ]
        ])
    }
}
/*
if(!isCloud) {
    gint.taskHelper.add(
            action: 'assignIssue',
            sleep: sleep,
            parameters: [
                    issue   : { -> defaultIssue[] },
                    assignee: testUser
            ]
    )
}

[
        'runAsUserInFieldAssignee',
].each {
    if(!isCloud) {
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: " : " + it,
                 sleep     : sleep,
                 parameters: [
                         transition: it,
                         issue     : { -> defaultIssue[] },
                 ],
                ],
                [action    : 'getIssueHistoryList', ext: ": Chack :" + it,
                 sleep     : sleep,
                 parameters: [
                         issue     : { -> defaultIssue[] },
                         outputType: "Text",
                         select    : ["Field:summary","To String:$it"],
                         columns   : "Author,'To String'",
                 ],
                 data      : ["$testUser", "$it"],
                ]
        ])
    }
}

 */