buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/itest-postfunction1/postfunction.gradle'

def functionKey = 'com.innovalog.jmwe.jira-misc-workflow-extensions:SetFieldValue-function'

def selectField = [
        labels : [ "field=labels" ],
        components : [ "field=components" ]
]

def options = [
        noOption:  ["ignoreEmptyValue=no", "createMissingValues=no", "appendValues=no", "copyOnlyIfNotSet=no"],
        ignoreEmptyValue : ["ignoreEmptyValue=yes"],
        createMissingValues : ["createMissingValues=yes"],
        appendValues: ["appendValues=yes"],
        copyOnlyIfNotSet: ["copyOnlyIfNotSet=yes"],
]

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'template' + i
    def server =  [selectField.labels , "valueType=template", "value=$transition" ,  conditionalExecution.false ,  options.noOption , "selectedLinkType=$value" , runAsUser.currentUser]
    if(!isCloud) {
        addTransitionFunction(transition, 'postfunction', server, functionKey)
    }
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'expression' + i
    def fields =  [selectField.labels , "valueType=expression", "value=$groovyExpression.getDescription" ,  conditionalExecution.false ,  options.noOption , "selectedLinkType=$value" , runAsUser.currentUser]
    if(!isCloud) {
        addTransitionFunction(transition, 'postfunction', fields, functionKey)
    }
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'copyOnlyIfNotSet' + i
    def fields =  [selectField.labels , conditionalExecution.false , options.copyOnlyIfNotSet , "valueType=template", "value=$transition" , "selectedLinkType=$value" , runAsUser.currentUser]
    if(!isCloud) {
        addTransitionFunction('copyOnlyIfNotSet' + i, 'postfunction', fields, functionKey)
    }
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'createMissingValueComponent' + i
    def fields =  [selectField.components ,  conditionalExecution.false , options.createMissingValues, "valueType=template", "value=$transition" , "selectedLinkType=$value" , runAsUser.currentUser]
    if(!isCloud) {
        addTransitionFunction('createMissingValueComponent' + i, 'postfunction', fields, functionKey)
    }
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'ignoreEmptyValue' + i
    def fields =  [selectField.labels , options.ignoreEmptyValue ,  conditionalExecution.false , "valueType=template", "value=" , "selectedLinkType=$value" , runAsUser.currentUser]
    if(!isCloud) {
        addTransitionFunction(transition, 'postfunction', fields, functionKey)
    }
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = 'appendValues' + i
    def fields =  [selectField.labels , options.appendValues , conditionalExecution.false , "valueType=template", "value=$transition" , "selectedLinkType=$value" , runAsUser.currentUser]
    if(!isCloud) {
        addTransitionFunction(transition, 'postfunction', fields, functionKey)
    }
}

relatedIssue.eachWithIndex { key, value, i ->
    def transition = "conditionalExecution" + i
    def fields =  [selectField.labels , conditionalExecution.true , options.noOption ,  "valueType=template", "value=$transition" , "selectedLinkType=$value" , runAsUser.currentUser]
    if(!isCloud) {
        addTransitionFunction(transition, 'postfunction', fields, functionKey)
    }
}

runAsUser.remove("currentUser")
runAsUser.eachWithIndex { userType, fields, idx ->
    relatedIssue.eachWithIndex { key, value, i ->
        def transition = "setFields_runAs_" + userType + i
        def server =  [selectField.labels , fields ,  conditionalExecution.false , options.noOption ,  "valueType=template", "value=$transition" , "selectedLinkType=$value"]
        if(!isCloud) {
            addTransitionFunction(transition, 'postfunction', server, functionKey)
            moveTransitionFunction(transition, 4)
        }
    }
}

createWorkflowScheme()
createProject()

(1..2).each {
    if(!isCloud) {
        gint.taskHelper.addSetUp([
                [action    : 'addVersion', ext: ': create versions : ' + it,
                 parameters: [
                         project: projectName,
                         version: it
                 ]
                ],
                [action    : 'addComponent', ext: ': create Component : ' + it,
                 parameters: [
                         project  : projectName,
                         component: 'component' + it
                 ],
                ]
        ])
    }
}

def current = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'current')
def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[]}], 'Sub-task')
def epic = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic')
def issueBelongsToEpic = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic[]} ], 'BelongsToEpic')
def initiative = createIssue([type: 'Initiative', summary: 'JMWE_Issue' ], 'Initiative')
def epic_initiative = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative')
def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def blocks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'blocks')
def clones = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'clones')
def duplicates = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'duplicates')
def relatesTo = createIssue([type: 'Task', summary: 'JMWE_Task'], 'relatesTo')
def jqlIssue = createIssue([type: 'Task', summary: 'JQL_ISSUE'], 'jqlIssue')
updateIssue([issue: {->epic_initiative[]}, field: "Parent Link", value: {->initiative[]}], "parent initiative child epic")

def linkIssuesMap = [
        blocks : {->blocks[]},
        "$clonesLinkType" : {->clones[]},
        duplicates : {->duplicates[]},
        'relates to': {->relatesTo[]}
]

linkIssuesMap.eachWithIndex { key, value, i ->
    linkIssue([issue: {->issueLinks[]}, toIssue: value, link: "$key"], key)
}

def relatedIssuesMap = [
        {->current[]} : {->current[]},
        {->parent[]} : {->subtask[]},
        {->subtask[]} : {->parent[]},
        {->epic[]} : {->issueBelongsToEpic[]},
        {->issueBelongsToEpic[]} : {->epic[]},
        {-> initiative[]} : {->epic_initiative[]},
        {->epic_initiative[]} : {-> initiative[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->blocks[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->clones[]},
        {->clones[]} : {->issueLinks[]},
        {->issueLinks[]} : {->duplicates[]},
        {->duplicates[]} : {->issueLinks[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->relatesTo[]} : {->issueLinks[]},
        {->issueLinks[]} : {->jqlIssue[]}
]

def getCurrentUserName = info?.isCloud? info?.userDisplayName : user

def testLabel = "label1"

[
        'template',
].collect {
    relatedIssuesMap.eachWithIndex { currentIssue, targetIssue, i ->
        if(!isCloud) {
            gint.taskHelper.add([
                    [action    : 'transitionIssue', ext: ": check SET_FIELD_VALUE_PF value set by : " + it + i,
                     sleepAfter: 3000,
                     parameters: [
                             issue     : currentIssue,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     ext       : ": check SET_FIELD_VALUE_PF value set by : " + it + i,
                     parameters: [
                             issue: targetIssue,
                             field: "Labels"
                     ],
                     data      : [/Labels  . . . . . . . . . . . : $it$i/],
                    ],
                    [action    : 'setFieldValue',
                     ext       : ":SET_FIELD_VALUE_PF value set to empty : " + it + i,
                     parameters: [
                             issue: targetIssue,
                             field: "Labels",
                             value: " "
                     ],
                    ],
            ])
        }
    }
}

['expression'].each{
    relatedIssuesMap.eachWithIndex{ currentIssue, targetIssue, i ->
        if(!isCloud) {
            gint.taskHelper.add([
                    [action: 'updateIssue', ext: ': add description to copy it in specific field : ' + i,
                     parameters: [
                             issue      : currentIssue,
                             description: it+i
                     ]
                    ],
                    [action    : 'transitionIssue', ext: ": check SET_FIELD_VALUE_PF value set by : " + it + i,
                     sleepAfter: 3000,
                     parameters: [
                             issue     : currentIssue,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     ext       : ": check SET_FIELD_VALUE_PF value set by : " + it + i,
                     parameters: [
                             issue: targetIssue,
                             field: "Labels"
                     ],
                     data      : [/Labels  . . . . . . . . . . . : $it$i/],
                    ],
                    [action    : 'setFieldValue',
                     ext       : ":SET_FIELD_VALUE_PF value set to empty : " + it + i,
                     parameters: [
                             issue: targetIssue,
                             field: "Labels",
                             value: " "
                     ],
                    ],
            ])
        }
    }

}

['copyOnlyIfNotSet'].collect {
    relatedIssuesMap.eachWithIndex { currentIssue, targetIssue, i ->
        if(!isCloud) {
            gint.taskHelper.add([
                    [action: 'setFieldValue',
                     ext: ': set labels to issue to check SET_FIELD_VALUE_PF_copyOnlyIfNotSet option  : ' + i,
                     parameters: [
                             issue: targetIssue,
                             field: "Labels",
                             value: testLabel
                     ]],
                    [action    : 'transitionIssue', ext: ': check SET_FIELD_VALUE_PF_copyOnlyIfNotSet when field is not empty :' + i,
                     sleepAfter: 3000,
                     parameters: [
                             issue     : currentIssue,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     ext       : ": check SET_FIELD_VALUE_PF_copyOnlyIfNotSet when field is not empty:" + i,
                     parameters: [
                             issue: targetIssue,
                             field: "Labels"
                     ],
                     failData  : [/Labels  . . . . . . . . . . . : $it$i/],
                     data      : [/Labels  . . . . . . . . . . . : $testLabel/],
                    ],
                    [action: 'setFieldValue', ext: ': set labels to empty of issue to check SET_FIELD_VALUE_PF_copyOnlyIfNotSet option  : ' + i,
                     parameters: [
                             issue: targetIssue,
                             field: "Labels",
                             value: " "
                     ]],
                    [action    : 'transitionIssue', ext: ': check SET_FIELD_VALUE_PF_copyOnlyIfNotSet when field is empty :'+ it+ i,
                     sleepAfter: 3000,
                     parameters: [
                             issue     : currentIssue,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     ext       : ": check SET_FIELD_VALUE_PF_copyOnlyIfNotSet when field is empty :"+it + i,
                     parameters: [
                             issue: targetIssue,
                             field: "Labels"
                     ],
                     data      : [/Labels  . . . . . . . . . . . : $it$i/],
                     failData  : [/Labels  . . . . . . . . . . . : $testLabel/],
                    ],
                    [action: 'setFieldValue', ext: ': remove the labels from issue to check SET_FIELD_VALUE_PF: ' + it + i,
                     parameters: [
                             issue: targetIssue,
                             field: "Labels",
                             value: " "
                     ]]
            ])
        }
    }
}


['ignoreEmptyValue'].collect {
    relatedIssuesMap.eachWithIndex { currentIssue, targetIssue, i ->
        if(!isCloud) {
            gint.taskHelper.add([
                    [action: 'setFieldValue',
                     ext: ': set the labels to from issue to check SET_FIELD_VALUE_PF_ignoreEmptyValue: '+testLabel + it + i,
                     parameters: [
                             issue: targetIssue,
                             field: "Labels",
                             value: testLabel
                     ]],
                    [action    : 'transitionIssue', ext: ': check SET_FIELD_VALUE_PF_Ignore empty values' +it+ i,
                     sleepAfter: 3000,
                     parameters: [
                             issue     : currentIssue,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     ext       : "check SET_FIELD_VALUE_PF_Ignore empty values" +it+ i,
                     parameters: [
                             issue: targetIssue,
                             field: "Labels"
                     ],
                     data      : [/Labels  . . . . . . . . . . . : $testLabel/],
                    ],
            ])
        }
    }
}

['appendValues'].collect {
    relatedIssuesMap.eachWithIndex { currentIssue, targetIssue, i ->
        if(!isCloud) {
            gint.taskHelper.add([
                    [action    : 'transitionIssue', ext: ':check SET_FIELD_VALUE_PF_Add source value to destination field: ' +it+ i,
                     sleepAfter: 3000,
                     parameters: [
                             issue     : currentIssue,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     ext       : "check SET_FIELD_VALUE_PF_Add source value to destination field: " +it+ i,
                     parameters: [
                             issue: targetIssue,
                             field: "Labels"
                     ],
                     data      : [/Labels  . . . . . . . . . . . : $it$i $testLabel/],
                    ],
                    [action: 'setFieldValue',
                     ext: ': remove the labels from issue to check SET_FIELD_VALUE_PF: ' + it + i,
                     parameters: [
                             issue: targetIssue,
                             field: "Labels",
                             value: " "
                     ]]
            ])
        }
    }
}


['createMissingValueComponent'].collect {
    relatedIssuesMap.eachWithIndex { currentIssue, targetIssue, i ->
        if(!isCloud) {
            gint.taskHelper.add([
                    [action    : 'transitionIssue', ext: ':check SET_FIELD_VALUE_PF_createMissingValueComponent: ' +it+ i,
                     parameters: [
                             issue     : currentIssue,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     ext       : "check SET_FIELD_VALUE_PF_createMissingValueComponent:" +it + i,
                     parameters: [
                             issue: targetIssue,
                             field: "Component/s"
                     ],
                     data      : ["Component/s . . . . . . . . . : $it$i"],
                    ],
            ])
        }
    }
}

[
        'setFields_runAs_userInFieldReporter',
        'setFields_runAs_userInFieldCreator',
        'setFields_runAs_userFromScript',
        'setFields_runAs_specificUser',
].each {
    relatedIssuesMap.eachWithIndex { currentIssue, targetIssue, i ->
        if(!isCloud) {
            gint.taskHelper.add([
                    [action    : 'transitionIssue', ext: ':check SET_FIELD_VALUE_PF:' + it + i,
                     parameters: [
                             issue     : currentIssue,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getIssueHistoryList',
                     ext       : ": :check SET_FIELD_VALUE_PF:" + it + i,
                     parameters: [
                             issue     : targetIssue,
                             outputType: "text",
                             select    : ["Field:labels", "Author:$user","To String:$it$i"],
                             columns   : "Author,Field,'To String'"
                     ],
                     data      : ["$user", "labels", "$it$i"],
                    ],
            ])
        }
    }
}
['setFields_runAs_userInFieldAssignee'].each {
    relatedIssuesMap.eachWithIndex { key, targetIssue, i ->
        if(!isCloud) {
            gint.taskHelper.add(
                    [action    : 'transitionIssue', ext: ': when assignee field is empty_check SET_FIELD_VALUE_PF:' + it + i,
                     expected  : -3,
                     parameters: [
                             issue     : key,
                             transition: it + i,
                     ]
                    ],
            )
        }
    }
}
relatedIssuesMap.eachWithIndex{ key, targetIssue,  i ->
    if(!isCloud) {
        gint.taskHelper.add(
                action: 'assignIssue', ext: ": to $testUser " + i,
                parameters: [
                        issue : key,
                        userId: testUser
                ]
        )
    }
}

[
        'setFields_runAs_userInFieldAssignee',
].each {
    relatedIssuesMap.eachWithIndex { currentIssue, targetIssue, i ->
        if(!isCloud) {
            gint.taskHelper.add([
                    [action    : 'transitionIssue', ext: ':check SET_FIELD_VALUE_PF:' + it + i,
                     parameters: [
                             issue     : currentIssue,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getIssueHistoryList',
                     ext       : ":check SET_FIELD_VALUE_PF:" + it + i,
                     parameters: [
                             issue     : targetIssue,
                             outputType: "text",
                             select    : ["Author:$testUser", "Field:labels","To String:$it$i"],
                             columns   : "Author,Field,'To String'"
                     ],
                     data      : ["$testUser", "labels", "$it$i"],
                    ],
            ])
        }
    }
}
['conditionalExecution'].each {
    relatedIssuesMap.eachWithIndex { currentIssue, targetIssue, i ->
        if(!isCloud) {
            gint.taskHelper.add([
                    [action    : 'transitionIssue', ext: ':check SET_FIELD_VALUE_PF:' + it + ' : when false' + i,
                     parameters: [
                             issue     : currentIssue,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     ext       : ":check SET_FIELD_VALUE_PF: $it when false" + i,
                     parameters: [
                             issue: targetIssue,
                             field: "Labels"
                     ],
                     failData  : [/Labels  . . . . . . . . . . . : $it$i/],
                    ],
            ])
        }
    }
}
relatedIssuesMap.eachWithIndex{ currentIssue, targetIssue,  i ->
    if(!isCloud) {
        gint.taskHelper.add(
                action: 'updateIssue', ext: ": set priority High to check conditional execution true_check SET_FIELD_VALUE_PF:" + i,
                parameters: [
                        issue   : currentIssue,
                        priority: 'High'
                ]
        )
    }
}
['conditionalExecution'].each {
    relatedIssuesMap.eachWithIndex { currentIssue, targetIssue, i ->
        if (!isCloud) {
            gint.taskHelper.add([
                    [action    : 'transitionIssue', ext: ': check SET_FIELD_VALUE_PF:' + it + ' : when true' + i,
                     parameters: [
                             issue     : currentIssue,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     ext       : ":check SET_FIELD_VALUE_PF: $it when true" + i,
                     parameters: [
                             issue: targetIssue,
                             field: "Labels"
                     ],
                     data      : [/Labels  . . . . . . . . . . . : $it$i/],
                    ],
            ])
        }
    }
}