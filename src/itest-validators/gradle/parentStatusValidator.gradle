buildscript {
    def gintVersion = findProperty('gintVersion') ?: System.getenv('GINT_VERSION') ?: '+'
    dependencies {
        classpath 'org.gint:gint-atlassian:' + gintVersion
    }
    repositories {
        flatDir { dirs 'libs' }
        mavenLocal()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
}

apply plugin: 'org.gint.atlassian'
apply from:'common/tearDown.gradle'
apply from:'configValidators/addParentStatusValidator.gradle'
apply from: 'common/setUp.gradle'

def info = gint.getJiraHelper().getServerInfoWithVerify() // Verify access to Jira instance otherwise end test if server not available
def project = gint.getJiraHelper().getProjectKey()	//get project key using jira helper functions
def user = info.user
def userqa1 = project.toLowerCase()+'qa1'
def userqa2 = project.toLowerCase()+'qa2'
def userdev1 = project.toLowerCase()+'dev1'
def userdev2 = project.toLowerCase()+'dev2'
def saved =	[:]
def savedIssues1 = [:]
def savedIssues2 = [:]
def transition = 'parentStatusValidator'


(1..7).each { number ->
def type = 'Bug'
def summary
	if (number == 1)
		summary = 'defaultErrorMsg'
	else if(number == 2)
		summary = 'customErrorMsg'
	else if(number == 3)
		summary = 'ifIssueNotHasDescription'
	else if(number == 4)
		summary = 'ifIssueNotAssigned'
	else if(number == 5)
		summary = 'ifPriorityIsHigh'
	else if (number == 6)
		summary = 'shouldBeInSelectedStatuses'
	else if(number == 7)
		summary = 'shouldBeInSelectedStatusesIfIssueHasLabel'

    gint.taskHelper.add(
        action: 'createIssue', ext: 'Parent'+number,
        group: 'create',
        project: project,
        parameters: [
            type: type,
            summary: summary ,
        ],
        stopOnFail: true,
        finalClosure: { Task task ->
            saved.issue1 = gint.searchForIssueKey(task.outData)
            savedIssues1[number] = saved.issue1
            gint.helper.logVarWithFormat('saved')
            gint.helper.log('create issues that having subtask',saved)
        },
    )
}
(1..7).each { number ->

def summary
	if (number == 1)
		summary = 'defaultErrorMsg'
	else if(number == 2)
		summary = 'customErrorMsg'
	else if(number == 3)
		summary = 'ifIssueNotHasDescription'
	else if(number == 4)
		summary = 'ifIssueNotAssigned'
	else if(number == 5)
		summary = 'ifPriorityIsHigh'
	else if (number == 6)
		summary = 'shouldBeInSelectedStatuses'
	else if(number == 7)
		summary = 'shouldBeInSelectedStatusesIfIssueHasLabel'

    gint.taskHelper.add(
        action: 'createIssue', ext: 'Subtask'+number,
        group: 'create',
        project: project,
        parameters: [
            parent: {-> savedIssues1[number]  },
            issueType: "Sub-task",
            summary: summary ,
        ],
        stopOnFail: true,
        finalClosure: { Task task ->
            saved.issue2 = gint.searchForIssueKey(task.outData)
            savedIssues2[number] = saved.issue2
            gint.helper.logVarWithFormat('saved')
            gint.helper.log('create subtasks of each parent issue to validate status of parent  issue',saved)
        },
    )
}
(1..7).each { number ->
def expected
	if(number == 1)
		expected = [ -3 ]
	if(number == 2)
		expected = [ -3 ]
	if(number == 3)
		expected = [ -3 ]
	if(number == 4)
		expected = [ -3 ]
	if(number == 5)
		expected = [ -3 ]
	if(number == 6)
		expected = [ 0 ]
	if(number == 7)
		expected = [ 0 ]
def data
	if(number == 1)
		data = "Remote error: Transition is not authorized because current Issue's parent Issue should be in one of the following statuses: [In Progress]"
	else if (number == 2)
		data = "Remote error: parentIssueMustBeInProgressStatus"
	else if (number == 3)
		data = "Remote error: Transition is not authorized because current Issue's parent Issue should be in one of the following statuses: [In Progress]"
	else if (number == 4)
		data = "Remote error: Transition is not authorized because current Issue's parent Issue should be in one of the following statuses: [In Progress]"
	else if (number == 5)
		data = "Remote error: Transition is not authorized because current Issue's parent Issue should be in one of the following statuses: [In Progress]"
	else if (number == 6)
        data = 	~/Successfully transitioned issue ${project}-\d+ with transition '${transition + number}'./
	else if (number == 7)
        data = 	~/Successfully transitioned issue ${project}-\d+ with transition '${transition + number}'./

    gint.taskHelper.add('transitionIssueAll', [
        [action: 'transitionIssue', ext: '--whenTheParentIssueIsNotInSelectedStatus'+number,
            expected:expected,
            parameters: [
                issue: {-> savedIssues2[number]  },
                transition: transition + number,
            ],
            data:[ data ],
         	finalClosure:{ Task task ->
         		gint.helper.log('Verify the Default or custom error msg should be display when the parent issues are not in selected statuses',saved)
         	},
        ],
    ])
}
(1..7).each{ number ->
    gint.taskHelper.add('transitionIssueAll', [
        [action: 'transitionIssue', ext: '--toStatusThatParentIssueMustBeIn'+number,
            expected: [ 0 ],
            parameters: [
                issue: {-> savedIssues1[number]  },
                transition: "In Progress",
				],
           data:[
            	~/Successfully transitioned issue ${project}-\d+ with transition 'In Progress'./
            ],
           finalClosure:{ Task task ->
         		gint.helper.log('Verify the issue is transitioned successfully to In  Progress',saved)
         	},

        ],
    ])
}
(1..7).each{ number ->
    gint.taskHelper.add('transitionIssue', [
        [action: 'transitionIssue', ext: '--WhenGroovyConditionReturnsFalse'+number,
            expected: [ 0 ],
            parameters: [
                issue: {-> savedIssues2[number]  },
                transition: transition + number,
				],
           data:[
            	~/Successfully transitioned issue ${project}-\d+ with transition '${transition + number}'./
            ],
           finalClosure:{ Task task ->
         		gint.helper.log('Verify the issue is transitioned successfully when the Groovy condition returns false for the issues,SKIP the validator',saved)
         	}

        ],
    ])
}