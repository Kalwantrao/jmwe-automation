import groovy.json.JsonSlurper
import java.nio.file.Paths

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
//apply from: 'common/setUp.gradle'
apply from: gint.resourceDirectory +'/src/common/testValidators.gradle'

def info = gint.getJiraHelper().getServerInfoWithVerify() // Verify access to Jira instance otherwise end test if server not available
def project = 'AUTOMATION'//gint.getJiraHelper().getProjectKey()	//get project key using jira helper functions
def workflow = project
def workflowScheme = project
def user = info.user
def userId = 'jmwe-qa'
def functionKey = 'com.innovalog.jmwe.jira-misc-workflow-extensions:fieldchanged-validator'	//function key for current status condition
def transition = 'fieldHasBeenModifiedValidator'
def startStep =	'11' // depends on workflow. '11' (To Do) works for custom jira workflow
def screen = project

def jsonSlurper = new JsonSlurper();
def path = Paths.get(gint.directories.resource + "/resources/validatorsData/FieldHasBeenModifiedValidator.json")
def transitionFunctions = jsonSlurper.parse(path)

createTransitionsWithFunctions(transitionFunctions, transition, functionKey, 'validator', startStep, workflow, screen, 0)

addUsers(userId)
createVersions(project, 5)
createComponents(project, 'component', 5)


// check affectsVersions
def currentIssue = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'CurrentIssue')
transitionIssue(transition+0, {-> currentIssue[0]}, -3, 'fieldVersionsNotModified', null, ['Remote error: versions: Affects Version/s should be modified during this transition.'])
transitionIssue(transition+0, {-> currentIssue[0]}, 0, 'fieldVersionsModified', [affectsVersions: '1'], null)

// check fixVersions
transitionIssue(transition+1, {-> currentIssue[0]}, -3, 'fieldFixVersionsNotModified', null, ['Remote error: fixVersions: Fix Version/s should be modified during this transition.'])
transitionIssue(transition+1, {-> currentIssue[0]}, 0, 'fieldFixVersionsModified', [fixVersions: '2'], null)

// check assignee
transitionIssue(transition+2, {-> currentIssue[0]}, -3, 'fieldAssigneeNotModified', null, ['Remote error: assignee: Assignee should be modified during this transition.'])
transitionIssue(transition+2, {-> currentIssue[0]}, 0, 'fieldAssigneeModified', [assignee: user], null)

//check components
transitionIssue(transition+3, {-> currentIssue[0]}, -3, 'fieldComponentsNotModified', null, ['Remote error: components: Component/s should be modified during this transition.'])
transitionIssue(transition+3, {-> currentIssue[0]}, 0, 'fieldComponentsModified', [components: 'component1'], null)

//check labels
transitionIssue(transition+4, {-> currentIssue[0]}, -3, 'fieldLabelsNotModified', null, ['Remote error: labels: Labels should be modified during this transition.'])
transitionIssue(transition+4, {-> currentIssue[0]}, 0, 'fieldLabelsModified', [labels: 'modifiedLabel'], null)

//check priority
transitionIssue(transition+5, {-> currentIssue[0]}, -3, 'fieldPriorityNotModified', null, ['Remote error: priority: Priority should be modified during this transition.'])
transitionIssue(transition+5, {-> currentIssue[0]}, 0, 'fieldPriorityModified', [priority: 'Highest'], null)

// check conditional execution - issueType = story
def condExecTrue = createIssue(project,{[ type: 'story', summary: 'JMWE_Issue']}, 'condExecTrue')
transitionIssue(transition+6, {-> condExecTrue[0]}, -3, 'condExecTrueFieldNotModified', null, ['Remote error: fixVersions: Fix Version/s should be modified during this transition.'])
transitionIssue(transition+6, {-> condExecTrue[0]}, 0, 'condExecTrueFieldModified', [fixVersions: '3'], null)

def condExecFalse = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue', labels: 'clearLabel']}, 'condExecFalse')
transitionIssue(transition+6, {-> condExecFalse[0]}, 0, 'condExecFalseFieldNotModified', null, null)




