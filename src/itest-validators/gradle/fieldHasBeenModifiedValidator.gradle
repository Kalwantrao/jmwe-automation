buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
//apply from: gint.resourceDirectory +'/src/common/utils.gradle'
apply from: gint.resourceDirectory +'/src/itest-validators/validator.gradle'

def functionKey = 'com.innovalog.jmwe.jira-misc-workflow-extensions:fieldchanged-validator'

if(!isCloud){
    addCustomField('Age', 'number')
    addFieldToScreen(screen, 'Age')
}

fields.eachWithIndex { fieldName, fieldValue, i ->
    def transition = fieldName + '_should_be_modified'
    def server = defaultFieldsServer + conditionalValidation.no + "field=$fieldValue"
    if(!isCloud){
        addTransitionFunction( transition, 'validator', server, functionKey )
    }
}

fields.eachWithIndex { fieldName, fieldValue, i ->
    def transition  = fieldName + '_should_be_modified_if_condition_true'
    def server = defaultFieldsServer + "field=$fieldValue" + conditionalValidation.yes
    if(!isCloud){
        addTransitionFunction( transition, 'validator', server, functionKey )
    }
}

[
        'customField_age_should_be_modified'
].each {
    def transition  = it
    def server = defaultFieldsServer + "field=Age" + conditionalValidation.no
    if(!isCloud){
        addTransitionFunction( transition, 'validator', server, functionKey )
    }
}

createWorkflowScheme()
createProject()

(1..2).each {
    if(!isCloud) {
        gint.taskHelper.add([
                [action: 'addVersion',
                 ext: ': create versions:' + it,
                 parameters: [
                         project: projectName,
                         version:it
                 ]
                ],
                [action: 'addComponent',
                 ext: ': create Component:' + it,
                 parameters: [
                         project: projectName,
                         component: 'component' + it
                 ]
                ]
        ])
    }
}


def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'defaultIssue')
def label1 = "testLabel1"
def label2 = "testLabel2"
// FIELD_HAS_BEEN_MODIFIED_VALIDATOR_TS_10_TC_01-verify the error message for _Labels
// FIELD_HAS_BEEN_MODIFIED_VALIDATOR_TS_10_TC_02-verify the error message for _components
// FIELD_HAS_BEEN_MODIFIED_VALIDATOR_TS_10_TC_03-verify the error message for _Assignee
// FIELD_HAS_BEEN_MODIFIED_VALIDATOR_TS_10_TC_04-verify the error message for _affects versions
// FIELD_HAS_BEEN_MODIFIED_VALIDATOR_TS_10_TC_05-verify the error message for _FixVersions

[
        'Labels_should_be_modified',
        'Components_should_be_modified',
        'Assignee_should_be_modified',
        'AffectsVersions_should_be_modified',
        'FixVersions_should_be_modified'
].each {
    def requiredField;
    if(it == 'Labels_should_be_modified'){
        requiredField = [labels    : label1]
    }
    else if(it == 'Components_should_be_modified'){
        requiredField = [components    : "component1"]
    }
    else if(it == 'Assignee_should_be_modified'){
        requiredField = [assignee    : user]
    }
    else if(it == 'AffectsVersions_should_be_modified'){
        requiredField = [affectsVersions: 1]
    }
    else if(it == 'FixVersions_should_be_modified'){
        requiredField = [fixVersions: 1]
    }
    if(!isCloud) {
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 ext       : " : FIELD_HAS_BEEN_MODIFIED_VALIDATOR_TS_10_TC_01-Case_01_ $it _when field not modified : ",
                 expected  : -3,
                 parameters: [
                         transition: it,
                         issue     : { -> defaultIssue[] },
                 ],
                ],
                [action    : 'transitionIssue',
                 ext       : " : FIELD_HAS_BEEN_MODIFIED_VALIDATOR_TS_10_TC_01-Case_02_ $it _when field modified : ",
                 expected  : 0,
                 parameters: [
                         transition: it,
                         issue     : { -> defaultIssue[] },
                 ] + requiredField,
                ],
        ])
    }
}

// FIELD_HAS_BEEN_MODIFIED_VALIDATOR_check when the field has value before transition issue and after transition the fields should be appended
if(!isCloud){
    gint.taskHelper.add(
            action: "updateIssue", ext: ":set field values",
            parameters: [
                    issue: {->defaultIssue[]},
                    labels: label1,
                    assignee: user,
                    components: "component1",
                    affectsVersions: 1,
                    fixVersions: 1
            ]
    )
}


[
        'Labels_should_be_modified',
        'Components_should_be_modified',
        //'Assignee_should_be_modified',
        'AffectsVersions_should_be_modified',
        'FixVersions_should_be_modified'
].each {
    def requiredField;
    if(it == 'Labels_should_be_modified'){
        requiredField = [labels    : label2]
    }
    else if(it == 'Components_should_be_modified'){
        requiredField = [components    : "component2"]
    }
    else if(it == 'Assignee_should_be_modified'){
        requiredField = [assignee    : testUser]
    }
    else if(it == 'AffectsVersions_should_be_modified'){
        requiredField = [affectsVersions: 2]
    }
    else if(it == 'FixVersions_should_be_modified'){
        requiredField = [fixVersions: 2]
    }
    if(!isCloud) {
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 ext       : " : FIELD_HAS_BEEN_MODIFIED_VALIDATOR_TS_10_TC_01-Case_01_ $it _when field has value before transition: ",
                 expected  : -3,
                 parameters: [
                         transition: it,
                         issue     : { -> defaultIssue[] },
                 ],
                ],
                [action    : 'transitionIssue',
                 ext       : " : FIELD_HAS_BEEN_MODIFIED_VALIDATOR_TS_10_TC_01-Case_02_ $it _when field has value before transition and added another value during transition: ",
                 expected  : 0,
                 parameters: [
                         transition: it,
                         issue     : { -> defaultIssue[] },
                 ] + requiredField,
                ],
        ])
    }
}

// TODO : it is not working as expected by ACLI as validate manually, fields not appended when adding on transition screen
/*
gint.taskHelper.add(
        action: "getIssue", ext: ": to check the field values appended:",
        parameters: [
                issue: {->defaultIssue[]}
        ],
        data: [
                /Labels  . . . . . . . . . . . : $label1 $label2/,
                /Affects versions  . . . . . . : 1 2/,
                /Fix versions  . . . . . . . . : 1 2/,
                /Components  . . . . . . . . . : component1 component2/
        ]
)
*/
// FIELD_HAS_BEEN_MODIFIED_VALIDATOR_TS_12_TC_01-verify the error message for _Labels _only if condition true
[
        'Labels_should_be_modified_if_condition_true',
        'Components_should_be_modified_if_condition_true',
        'Assignee_should_be_modified_if_condition_true',
        'AffectsVersions_should_be_modified_if_condition_true',
        'FixVersions_should_be_modified_if_condition_true'
].each {
    ["High", "Low"].eachWithIndex { priority, int i ->
        def expected;
        if(priority == "High"){
            expected = -3
        }
        else {
            expected = 0
        }
        if(!isCloud) {
        gint.taskHelper.add([
                [action    : 'setFieldValue',
                 ext       : " : change priority to $priority _to check_ $it : ",
                 parameters: [
                         issue   : { -> defaultIssue[] },
                         field: "Priority",
                         value: priority
                 ],
                ],
                [action    : 'transitionIssue',
                 ext       : " : FIELD_HAS_BEEN_MODIFIED_VALIDATOR_TS_10_TC_01-Case_01_ $it _when priority is $priority : ",
                 expected  : expected,
                 parameters: [
                         transition: it,
                         issue     : { -> defaultIssue[] },
                 ],
                ],
        ])
    }
}
    }


['customField_age_should_be_modified'].each {
    if(!isCloud) {
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 ext       : " : FIELD_HAS_BEEN_MODIFIED_VALIDATOR -Case_01_ $it _when customfield  age not modified: ",
                 expected  : -3,
                 parameters: [
                         transition: it,
                         issue     : { -> defaultIssue[] },
                 ],
                ],
                /*[action    : 'transitionIssue',
                 ext       : " : FIELD_HAS_BEEN_MODIFIED_VALIDATOR_Case_02_ $it _when customfield age has modified during transition: ",
                 expected  : 0,
                 parameters: [
                         transition: it,
                         issue     : { -> defaultIssue[] },
                         field     : 'Age',
                         value     : 30
                 ]
                ],*/
                [action    : "removeCustomField",
                 ext       : ":age_to check the impact of validator  after removing the configured custom field:",
                 parameters: [
                         field: 'Age'
                 ]
                ],
                [action    : 'transitionIssue',
                 ext       : " : FIELD_HAS_BEEN_MODIFIED_VALIDATOR -Case_01_ $it _when configured customfield removed before transition issue: ",
                 expected  : -3,
                 parameters: [
                         transition: it,
                         issue     : { -> defaultIssue[] },
                 ],
                 data      : ["Unable to find field 'Age'"]
                ],
        ])
    }
}


/*
1.single value fields and multi valued fields = "Done"
2.conditional validation = "Done"
positives and negatives

 */

/*
REVIEWED by Chirag: 19.02.2024 -
1. Set field value before transition and transition issue = DONE
2. Add field value before transition and during transition => values should be appended ex: value1 + value2 = NOT WORKING
3. Add custom field - number type and check for this field => --action addCustomField --field jiraVersion --type com.atlassian.jira.plugin.system.customfieldtypes:float
4. Delete custom field which is already configured in validator and check
5. Exclude project for custom field and check = Error: Field age should be modified during this transition, but it is not present on the transition screen.
*/




