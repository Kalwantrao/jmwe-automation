import groovy.json.JsonSlurper
import java.nio.file.Paths

buildscript {
    def gintVersion = findProperty('gintVersion') ?: System.getenv('GINT_VERSION') ?: '+'
    dependencies {
        classpath 'org.gint:gint-atlassian:' + gintVersion
    }
    repositories {
        flatDir { dirs 'libs' } // for testing SNAPSHOT versions
        mavenLocal()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
}

apply plugin: 'org.gint.atlassian'
apply from: 'common/setUp.gradle'

def info = gint.getJiraHelper().getServerInfoWithVerify() // Verify access to Jira instance otherwise end test if server not available
def project = gint.getJiraHelper().getProjectKey()	//get project key using jira helper functions
def workflow = project
def workflowScheme = project
def user = info.user
def userqa1 = project.toLowerCase()+'qa1'
def userqa2 = project.toLowerCase()+'qa2'
def userdev1 = project.toLowerCase()+'dev1'
def userdev2 = project.toLowerCase()+'dev2'
def saved =	[:]
def savedIssues = [:]
def functionKey = 'com.innovalog.jmwe.jira-misc-workflow-extensions:fieldchanged-validator'	//function key for current status condition
def transition = 'fieldHasBeenModifiedValidator'
def startStep =	'11' // depends on workflow. '11' (To Do) works for custom jira workflow
def screen = project

def jsonSlurper = new JsonSlurper();
def path = Paths.get(gint.directories.resource + "/resources/validatorsData/FieldHasBeenModifiedValidator.json")
def transitionFunctions = jsonSlurper.parse(path)

createTransitionsWithFunctions(transitionFunctions, transition, functionKey, 'validator', startStep, workflow, screen, 0)

def summaries = [
		 'fieldsShouldBeModified',
		 'groovyConditionReturnsTrue',
		 'groovyConditionReturnsFalse',
		 'issueLinkedByBlocksLink',
		 'groovyConditionFalse'
		 ]
def bug = createIssue(project, summaries.collect{[type: 'Bug', summary: it] } )
def subTask = createIssue(project, [1, 1 ].collect{[type: 'Sub-Task', summary: 'summary', parent: { -> bug[it] }]} )
def epic = createIssue(project, summaries.collect{[type: 'Epic', summary: it, field: "Epic Name", value: "Epic"]} )
def story = createIssue(project, [1, 1, 1, 1 ].collect{[type: 'story', summary: 'summary',field: "Epic Link", value: { -> epic[it] }, assignee: userqa1, description: 'TEST_DESCRIPTION_AUTOMATION']} )
linkIssues({[ issue: { -> story[0] }, toIssue: { -> story[1] }, link: 'blocks'] } )

def issueList1 = [
	0: { -> bug[0] },
    1: { -> bug[1] },
    2: { -> bug[2] },
    3: { -> bug[3] },
    4: { -> story[0] },
    5: { -> story[1] },
	6: { -> epic[1] },
]
[
	0:'Remote error: versions: Affects Version/s should be modified during this transition.',
	1:'Remote error: fixVersions: Fix Version/s should be modified during this transition.',
	2:'Remote error: assignee: Assignee should be modified during this transition.',
	3:'Remote error: components: Component/s should be modified during this transition.',
	4:'Remote error: labels: Labels should be modified during this transition.',
	5:'Remote error: priority: Priority should be modified during this transition.',
	6:'Remote error: description: Description should be modified during this transition.'
].eachWithIndex { data, number ->
    gint.taskHelper.add([
            [action: 'transitionIssue',
            ext: 'whenFieldsNotModified' + number,
            dependsOn: true,
            expected: [ -3 ],
            parameters: [
                issue: issueList1[number],
                transition: transition + number
            ],
            data: [],
        ],
            [action: 'transitionIssue',
            ext: 'whenFieldsAreModified' + number,
            dependsOn: true,
            expected: [ 0 ],
            parameters: [
                issue: issueList1[number],
                transition: transition + number,
                affectsVersions: '1',
                fixVersions: '2',
                assignee: userqa1,
                components: 'component1',
                labels: 'Test_label_Automation',
                priority: 'Low',
                description: 'Test_description_Automation'
            ],
            data: [
            	~/Successfully transitioned issue ${project}-\d+ with transition '${transition + number}'./
            	],
        ]
    ])
}
// When groovy condition returns true and false for the issue

def issueList2 = [
	7: { -> story[0] },
    8: { -> story[2] },
    9: { -> story[1] },
    10: { -> story[3] },
]

def expectedData2 = [
	7:'Remote error: versions: Affects Version/s should be modified during this transition.',
	8:'Remote error: fixVersions: Fix Version/s should be modified during this transition.',
	9:'Remote error: assignee: Assignee should be modified during this transition.',
	10:'Remote error: components: Component/s should be modified during this transition.',
]
(7..10).each { number ->
    gint.taskHelper.add([
            [action: 'transitionIssue',
            ext: 'whenGroovyConditionReturnsTrueAndFieldsNotModified' + number,
            dependsOn: true,
            expected: [ -3 ],
            parameters: [
                issue: issueList2[number],
                transition: transition + number
            ],
            data: [expectedData2[number]],
        	],
            [action: 'transitionIssue',
            ext: 'whenGroovyConditionReturnsTrueAndFieldsModified' + number,
            dependsOn: true,
            expected: [ 0 ],
            parameters: [
                issue: issueList2[number],
                transition: transition + number,
                affectsVersions: '3',
                fixVersions: '2',
                assignee: userqa2,
                components: 'component1',
            ],
            data: [
            	~/Successfully transitioned issue ${project}-\d+ with transition '${transition + number}'./
            	],
        	],
            [action: 'transitionIssue',
            ext: 'whenGroovyConditionReturnsFalseAndFieldsNotModified' + number,
            dependsOn: true,
            expected: [ 0 ],
            parameters: [
                issue: { -> bug[4] },
                transition: transition + number
            ],
            data: [
            	~/Successfully transitioned issue ${project}-\d+ with transition '${transition + number}'./
            	],
        	]
    ])
}
