buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/utils.gradle'

tearDown()
addWorkflow()

def defaultFieldsServer = [
        "correlationId=",
]
def fieldsList = [
        labels : 'labels',
        fixVersions : 'fixVersions',
        affectsVersions : 'versions',
        components : 'components',
        priority : 'priority',
        assignee : 'assignee'
]
def functionKey = functionKey.fieldHasBeenModifiedValidatorServer	//function key for current status condition
// Configuration for validator

fieldsList.eachWithIndex { field, value, i ->
    def fields = defaultFieldsServer +"conditionalValidation=no" + "field=$value"
    addTransitionFunction( field  + 'ShouldModified', 'validator', fields, functionKey )
}

fieldsList.eachWithIndex { field, value, i ->
    def fields = defaultFieldsServer +"conditionalValidation=yes" + "field=$value" + "conditionalValidationScript=$groovyExpression.getIssuetype"
            addTransitionFunction(field + 'ShouldModifiedIfConditionValidationTrue' , 'validator', fields, functionKey )
}

createWorkflowScheme()
createProject()

gint.taskHelper.add( action: 'addVersion', ext: ': create versions',
            parameters: [ project: projectName, version: 1 ])
gint.taskHelper.add( action: 'addComponent', ext: ': create Component',
        parameters: [ project: projectName, component: 'component1' ])

def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'defaultIssue')

// checking the current status To Do and previous status In Progress
['ShouldModified','ShouldModifiedIfConditionValidationTrue']
.each {
    fieldsList.eachWithIndex { field, value, i ->
        gint.taskHelper.add(
                [action    : 'transitionIssue', ext: " : custom error when field_$field not provided during transition" + it,
                 expected  : -3,
                 parameters: [
                         transition: field + it,
                         issue     : { -> defaultIssue[] },
                    ],
                ],
         )
   }
}
['ShouldModified','ShouldModifiedIfConditionValidationTrue'].each {
    gint.taskHelper.add(
            [action    : 'transitionIssue', ext: " : when field_labels provided during transition" + it,
             expected  : 0,
             parameters: [
                     transition: 'labels' + it,
                     issue     : { -> defaultIssue[] },
                     labels    : it
             ],
            ])
}
['ShouldModified'].each {
    gint.taskHelper.add(
            [action    : 'transitionIssue', ext: " : when field_assignee provided during transition" + it,
             expected  : 0,
             parameters: [
                     transition: 'assignee' + it,
                     issue     : { -> defaultIssue[] },
                     assignee    : user
             ],
            ])
}
gint.taskHelper.add(
        [action: 'updateIssue', ext: ': change issue type',
         parameters: [
                 issue: {->defaultIssue[]},
                 issueType: 'Story'
         ]
   ],
)
fieldsList.eachWithIndex { field, value, i ->
    gint.taskHelper.add(
            [action    : 'transitionIssue', ext: " : should not throw error when conditional validation false : $field",
             expected  : 0,
             parameters: [
                     transition: field + 'ShouldModifiedIfConditionValidationTrue',
                     issue: { -> defaultIssue[] },
                ],
            ]
    )
}

/*
1.single value fields and multi valued fields = "Done"
2.conditional validation = "Done"
positives and negatives

 */




