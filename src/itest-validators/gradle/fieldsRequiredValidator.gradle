buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.gint:gint-atlassian:3.8.4"
	}
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/utils.gradle'

tearDown()
addWorkflow()

def defaultFieldsServer = [
		"correlationId=",
]
def fieldsList = [
		labels : 'labels',
		fixVersions : 'fixVersions',
		affectsVersions : 'versions',
		components : 'components',
		assignee: 'assignee',
]
def functionKey = functionKey.fieldRequiredValidatorServer

def testUser =  info?.isCloud ? cloudUser : serverUser
// Configuration for validator

fieldsList.eachWithIndex { field, value, i ->
	def fields = defaultFieldsServer +"conditionalValidation=no" + "field=$value"
	addTransitionFunction( field  + 'Required', 'validator', fields, functionKey )
}

fieldsList.eachWithIndex { field, value, i ->
	def fields = defaultFieldsServer +"conditionalValidation=yes" + "field=$value" + "conditionalValidationScript=$groovyExpression.getIssuetype"
	addTransitionFunction(field + 'RequiredConditionalValidation' , 'validator', fields, functionKey )
}

createWorkflowScheme()
createProject()

(1..1).each {
	gint.taskHelper.addSetUp([
			[action: 'addVersion', ext: ': create versions : ' + it,
			 parameters: [
					 project: projectName,
					 version: it
			 ]
			],
			[action: 'addComponent', ext: ': create Component : ' + it,
			 parameters: [
					 project: projectName,
					 component: 'component' + it
			 ],
			]
	])
}
def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'defaultIssue')

// checking the current status To Do and previous status In Progress
['Required','RequiredConditionalValidation'].each {
	fieldsList.eachWithIndex { field, value, i ->
		gint.taskHelper.add(
				[action    : 'transitionIssue', ext: " : Should throw error when require field_$field has no value" + it,
				 expected  : -3,
				 parameters: [
						 transition: field + it,
						 issue     : { -> defaultIssue[] },
				 ],
				],
		)
	}
}
gint.taskHelper.add(
		[action: 'updateIssue', ext: ': change issue type',
		 parameters: [
				 issue: {->defaultIssue[]},
				 issueType: 'Story',
		 ]
		],
)
fieldsList.eachWithIndex { field, value, i ->
	gint.taskHelper.add(
			[action    : 'transitionIssue', ext: " : should not throw error when conditional validation false : $field",
			 expected  : 0,
			 parameters: [
					 transition: field + 'RequiredConditionalValidation',
					 issue: { -> defaultIssue[] },
			 ],
			]
	)
}
gint.taskHelper.add(
		[action: 'updateIssue', ext: ': add required field values',
		 parameters: [
				 issue: {->defaultIssue[]},
				 issueType: 'Story',
				 labels: 'test_label',
				 fixVersions: 1,
				 affectsVersions: 1,
				 assignee: user,
				 components: 'component1'
		 ],
		],
)
['Required','RequiredConditionalValidation'].each {
	fieldsList.eachWithIndex { field, value, i ->
		gint.taskHelper.add(
				[action    : 'transitionIssue', ext: " : Should not throw error when require field_$field is has value" + it,
				 expected  : 0,
				 parameters: [
						 transition: field + it,
						 issue     : { -> defaultIssue[] },
				 ],
				],
		)
	}
}






