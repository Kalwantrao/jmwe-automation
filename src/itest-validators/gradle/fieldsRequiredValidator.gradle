buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.gint:gint-atlassian:3.8.4"
	}
}

apply plugin: 'org.gint.atlassian'
//apply from: gint.resourceDirectory +'/src/common/utils.gradle'
apply from: gint.resourceDirectory +'/src/itest-validators/validator.gradle'

def errorMessage = "fields required"

def defaultFieldsCloud = [
		"validator.id=ba2aae99-13c1-422b-933c-1c16e0739d3a",
]

def fieldsList = [
		labels : 'labels',
		fixVersions : 'fixVersions',
		affectsVersions : 'versions',
		components : 'components'
]

//def functionKey = info?.isCloud ? 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__FieldRequiredValidator' : 'com.innovalog.jmwe.jira-misc-workflow-extensions:fieldrequired-validator'
def functionKey = info?.isCloud ? "com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.${testCloudBuild}__FieldRequiredValidator" : 'com.innovalog.jmwe.jira-misc-workflow-extensions:fieldrequired-validator'

fieldsList.eachWithIndex { field, value, i ->
	def transition = field + '_field_is_required'
	def server = defaultFieldsServer + conditionalValidation.no + "field=$value" + "errorMessage=$errorMessage"
	def cloud = defaultFieldsCloud + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a={\"conditionalValidation\":false,\"fields\":\"$value\",\"errorMessage\":\"$errorMessage\",\"expression\":\"!!issue.${value} && issue.${value}.length > 0\"}"
	def fields = info?.isCloud ? cloud : server
	addTransitionFunction( transition, 'validator', fields, functionKey )
}

fieldsList.eachWithIndex { field, value, i ->
	def transition = field + '_field_is_required_only_if_condition_true'
	def server = defaultFieldsServer + conditionalValidation.yes + "field=$value" + "errorMessage=$errorMessage"
	def cloud = defaultFieldsCloud + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a={\"conditionalValidation\":true,\"conditionalValidationExpression\":\"$jiraExpression.checkPriorityHigh\",\"fields\":\"$value\",\"errorMessage\":\"$errorMessage\",\"expression\":\"!($jiraExpression.checkPriorityHigh) || !!issue.${value} && issue.${value}.length > 0\"}"
	//def abcde = defaultFieldsCloud + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a={\"conditionalValidation\":true,\"conditionalValidationExpression\":\"!!issue.priority && issue.priority.name == 'High'\",\"_modified\":\"2024-01-29T06:40:25.133Z\",\"fields\":\"labels\",\"errorMessage\":\"fields required\",\"expression\":\"!(!!issue.priority && issue.priority.name == 'High') || !!issue.labels && issue.labels.length > 0\"}"
	def fields = info?.isCloud ? cloud : server
	addTransitionFunction( transition , 'validator', fields, functionKey )
}

['labels_assignee_component_multiple_fields_required'].each{
	def server = defaultFieldsServer + conditionalValidation.no + "field=labels,assignee,components" + "errorMessage=$errorMessage"
	def cloud = defaultFieldsCloud + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a={\"conditionalValidation\":false,\"fields\":\"labels,assignee,components\",\"errorMessage\":\"$errorMessage\",\"expression\":\"!!issue.labels && issue.labels.length > 0 && issue.assignee != null && (typeof(issue.assignee) != 'List' || issue.assignee.length > 0) && !!issue.components && issue.components.length > 0\"}"
	def fields = info?.isCloud ? cloud : server
	addTransitionFunction( it, 'validator', fields, functionKey )
}

createWorkflowScheme()
createProject()

(1..2).each {
	gint.taskHelper.addSetUp([
			[action: 'addVersion', ext: ': create versions : ' + it,
			 parameters: [
					 project: projectName,
					 version: it
			 ]
			],
			[action: 'addComponent', ext: ': create Component : ' + it,
			 parameters: [
					 project: projectName,
					 component: 'component' + it
			 ],
			]
	])
}

def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'defaultIssue')

// FIELDS_REQUIRED_VALIDATOR-TS_09_TC_01 - Verify the validator on issue view for the selected fields
// FIELDS_REQUIRED_VALIDATOR-TS_09_TC_02 - Verify the validator on issue view for the selected fields
// FIELDS_REQUIRED_VALIDATOR-TS_09_TC_03 - Verify the validator on issue view for the selected fields
[
		'labels_field_is_required',
		'fixVersions_field_is_required',
		'affectsVersions_field_is_required',
].each {
	def addField;
	if(it == 'labels_field_is_required'){
		addField = [labels: "testLabels"]
	}
	else if(it == 'fixVersions_field_is_required'){
		addField = [fixVersions: 1]
	}
	else if(it == 'affectsVersions_field_is_required'){
		addField = [affectsVersions: 1]
	}
		gint.taskHelper.add([
				[action    : 'transitionIssue',
				 sleep : defaultSleepTime,
				 ext: ": FIELDS_REQUIRED_VALIDATOR-TS_09_TC_01_Case_01- $it _ when field not has value:",
				 expected  : -3,
				 parameters: [
						 transition: it,
						 issue     : { -> defaultIssue[] },
				 ],
						data: ["$errorMessage"],
				],
				[action    : 'transitionIssue',
				 sleep : defaultSleepTime,
				 ext: ": FIELDS_REQUIRED_VALIDATOR-TS_09_TC_01_Case_02 $it _ when field value added on transition screen:",
				 expected  : 0,
				 parameters: [
						 transition: it,
						 issue     : { -> defaultIssue[] },
				 ] + addField ,
				 failData: ["$errorMessage"],
				],
				[action    : 'transitionIssue',
				 sleep : defaultSleepTime,
				 ext: ": FIELDS_REQUIRED_VALIDATOR-TS_09_TC_01_Case_03 $it _ when field has value:",
				 expected  : 0,
				 parameters: [
						 transition: it,
						 issue     : { -> defaultIssue[] },
				 ],
				 failData: ["$errorMessage"],
				],
		])
}

// FIELDS_REQUIRED_VALIDATOR-TS_14_TC_01 -Verify the Condition groovy expression
[
		'labels_field_is_required_only_if_condition_true',
		'fixVersions_field_is_required_only_if_condition_true',
		'affectsVersions_field_is_required_only_if_condition_true'
].each {
	["High","Low"].eachWithIndex{ priority, int i ->
		def removeFields;
		if(it == 'labels_field_is_required_only_if_condition_true'){
			removeFields = [labels: " "]
		}
		else if(it == 'fixVersions_field_is_required_only_if_condition_true'){
			removeFields = [fixVersions: " "]
		}
		else if(it == 'affectsVersions_field_is_required_only_if_condition_true'){
			removeFields = [affectsVersions: " "]
		}
		def expected;
		if(priority == "High"){
			expected = -3
		}
		else{
			expected = 0
		}
	gint.taskHelper.add([
			[action: 'updateIssue',
			 sleep : defaultSleepTime,
			 ext: ":remove fields to check $it _when priority is $priority :",
			 parameters: [
					 issue: {->defaultIssue[]},
					 priority: priority
			 ] + removeFields,
			],
			[action    : 'transitionIssue',
			 sleep : defaultSleepTime,
			 ext: ": FIELDS_REQUIRED_VALIDATOR-TS_14_TC_01_Case_01- $it _ when field not has value_ and priority is $priority:",
			 expected  : expected,
			 parameters: [
					 transition: it,
					 issue     : { -> defaultIssue[] },
			 ],
			],
	])
}
	}

// FIELDS_REQUIRED_VALIDATOR-TS_14_TC_02 - Verify the Condition groovy expression
// FIELDS_REQUIRED_VALIDATOR-TS_14_TC_03 - Verify the Condition groovy expression

// FIELDS_REQUIRED_VALIDATOR-Check for multiple fields
[
		'labels_assignee_component_multiple_fields_required'
].each {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 sleep : defaultSleepTime,
			 ext: ": FIELDS_REQUIRED_VALIDATOR-Case_01- $it _ when multiple fields not provided:",
			 expected  : -3,
			 parameters: [
					 transition: it,
					 issue     : { -> defaultIssue[] },
			 ],
			 data: ["$errorMessage"],
			],
			[action    : 'transitionIssue',
			 sleep : defaultSleepTime,
			 ext: ": FIELDS_REQUIRED_VALIDATOR-Case_02 $it _ when only one field from multiple fields provided on transition screen:",
			 expected  : -3,
			 parameters: [
					 transition: it,
					 issue     : { -> defaultIssue[] },
					 labels: "testLabel"
			 ],
			 data: ["$errorMessage"],
			],
			[action: 'updateIssue',
			 sleep : defaultSleepTime,
			 ext: ":add all required fields to issue to check $it :",
			 parameters: [
					 issue: {->defaultIssue[]},
					 assignee: user,
					 components: 'component1',
					 labels: "testLabel"
			 ],
			],
			[action    : 'transitionIssue',
			 sleep : defaultSleepTime,
			 ext: ": FIELDS_REQUIRED_VALIDATOR-Case_03 $it _ when all fields from multiple fields has provided value:",
			 expected  : 0,
			 parameters: [
					 transition: it,
					 issue     : { -> defaultIssue[] },
			 ],
			 failData: ["$errorMessage"],
			],
	])
}

/*
1. single and multi value fields = "Done"
2. check with custom field and normal fields = "ToDo - need to configure custom field"
3. check with multiple fields and provide value for any one value and check error  = "Done"
 */

/*
REVIEWED by Chirag:12.03.2024
1. check with custom field
		- Add custom field and transition issue
		- Delete custom field and transition issue
"An error occurred while executing a Field Required Validator validator: Unable to find field 'customfield_10700' Field Required Validator: root cause: Unable to find field 'customfield_10700'"

2.Check default error message = "This field is required"
 */



