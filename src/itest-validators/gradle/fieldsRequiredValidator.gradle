import groovy.json.JsonSlurper
import java.nio.file.Paths

buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.gint:gint-atlassian:3.8.4"
	}
}

apply plugin: 'org.gint.atlassian'
//apply from: 'common/setUp.gradle'
apply from: gint.resourceDirectory +'/src/common/testValidators.gradle'

def info = gint.getJiraHelper().getServerInfoWithVerify() // Verify access to Jira instance otherwise end test if server not available
def project = 'AUTOMATION'//gint.getJiraHelper().getProjectKey()	//get project key using jira helper functions
def workflow = project
def screen = project
gint.xmlReport =	true	//xml report generates in projects root directory
gint.verbose =	true
def user = info.user
def transition = 'fieldsRequiredValidator'
def jsonSlurper = new JsonSlurper();
def path = Paths.get(gint.directories.resource + "/resources/validatorsData/FieldsRequiredValidatorFunctions${info?.isCloud ? "Cloud" : ""}.json")
def transitionFunctions = jsonSlurper.parse(path)
def functionKey = info?.isCloud ? 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.mwec__CommentRequiredValidator' : 'com.innovalog.jmwe.jira-misc-workflow-extensions:fieldrequired-validator'
def startStep = info?.isCloud ? '1':'11' // depends on workflow. '1' for cloud and '11' (To Do)for server works for custom jira workflow

createTransitionsWithFunctions(transitionFunctions, transition, functionKey, 'validator', startStep, workflow, screen, 0)

// check fieldsRequired
def currentIssue = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue', affectsVersions: '1']}, 'fieldsRequired')
transitionIssue(transition+0, {-> currentIssue[0]}, 0, 'whenAffectsVersionHasValue', null, null)
transitionIssue(transition+1, {-> currentIssue[0]}, -3, 'whenFixVersionNotHavingValues', null, ['Remote error: thisIsCustomMsgForFixVersionFieldsRequired'])
transitionIssue(transition+2, {-> currentIssue[0]}, 0, 'whenAssigneeHavingValuesFromTransitionScreen', [assignee: user], null)


// check conditional execution - issueType = story
def condExecTrue = createIssue(project,{[ type: 'story', summary: 'JMWE_Issue']}, 'condExecTrue')
transitionIssue(transition+7, {-> condExecTrue[0]}, -3, 'condExecTrueFieldRequired', null, ['Remote error: assignee: Field Assignee is required.'])
transitionIssue(transition+7, {-> condExecTrue[0]}, 0, 'condExecTrueFieldRequiredProvided', [assignee: user], null)

def condExecFalse = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'condExecFalse')
transitionIssue(transition+7, {-> condExecFalse[0]}, 0, 'condExecFalseFieldNotRequired', null, null)








