buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/itest-validators/validator.gradle'

def errorMessage = "Check the scripted groovy returns true"

def chooseType = [
        noCode: ["type=noCode"]
]
def valueToCompareType = [
        text: ["valueToCompare=text"],
        field: ["valueToCompare=field"]
]
def field = [
        reporter: "field=reporter"
]

def operator = [
        equals : ["operator=equals"]
]
def valueToCompare = [
        assignee: ["targetField=assignee"],
        reporter: ["targetField=reporter"],
]

def noCodeFields = [
        "targetListText=",
        "targetRegex=",
        "targetText="
]

def functionKey = info?.isCloud ? "com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.${testCloudBuild}__ScriptedValidator" : 'com.innovalog.jmwe.jira-misc-workflow-extensions:groovy-validator'

[
        'verify_issue_must_assigned_to_specific_user'
].each {
    def server = ["errorMessage=$errorMessage" , "field=" , "scriptDescription=" , "groovyExpression=issue.getAsString(\"assignee\") == \"$getCurrentUserName\""]
    def cloud = "{\"conditionalValidation\":false,\"script\":\"!!issue.assignee && issue.assignee.accountId == '$currentUserKey'\",\"expression\":\"!!issue.assignee && issue.assignee.accountId == '$currentUserKey'\",\"scriptDescription\":\"\",\"errorMessage\":\"$errorMessage\"}"
    addTransitionFunction(it, 'validator', info?.isCloud ? cloud : server, functionKey )
}

['labelsShouldBeEmptyOnCreateTransition'].each {
    def server = ["errorMessage=$errorMessage" , "field=" , "scriptDescription=" , "groovyExpression=!issue.get(\"labels\")"]
    def cloud = "{\"errorMessage\":\"$errorMessage\",\"script\":\"(! issue.labels || issue.labels.length == 0)\",\"type\":\"script\",\"expression\":\"(! issue.labels || issue.labels.length == 0)\"}"
    if(isCloud){
        addTransitionFunctionOnCreateTransition(it, 'validator', info?.isCloud ? cloud : server, functionKey)
    }
}

[
        'check_no_code'
].each {
    def server = ["errorMessage=$errorMessage" , "field=" , "scriptDescription=" , chooseType.noCode , valueToCompareType.field , field.reporter , valueToCompare.assignee , operator.equals ,  noCodeFields]
    if(!isCloud) {
        addTransitionFunction( it, 'validator', server, functionKey )
    }
}

createWorkflowScheme()
createProject()

def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'defaultIssue')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: {->defaultIssue[]}], 'subtask')

// Check create transition , field labels should be
if(isCloud){
    gint.taskHelper.add(
            action: "createIssue",
            ext: ":to check build your own validator on create transition error when field label provided",
            expected: -3,
            parameters: [
                    summary: "JMWE_Issue",
                    type: "Task",
                    project: projectName,
                    labels: "testLabel",
            ],
            data: [errorMessage]
    )

}

if(isCloud){
    gint.taskHelper.add(
            action: "createIssue",
            ext: ":to check build your own validator on create transition error when field label not provided",
            parameters: [
                    summary: "JMWE_Issue",
                    type: "Task",
                    project: projectName
            ]
    )
}


// SCRIPTED_GROOVY_VALIDATOR -Verify for the Groovy script_The system should display error message
[
        'verify_issue_must_assigned_to_specific_user'
].each {
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             sleep: info?.isCloud? 5000 : 0,
             ext: ":SCRIPTED_GROOVY_VALIDATOR_TC_24_ $it _when issue not having assignee _the system should display error message",
             expected  : -3,
             parameters: [
                     transition: it,
                     issue: { -> defaultIssue[] },
             ],
             data: ["$errorMessage"],
            ],
            [action    : 'updateIssue',
             ext: "assign issue to $user _to check success _ $it:",
             sleep: info?.isCloud? 5000 : 0,
             parameters: [
                     assignee: user,
                     issue: { -> defaultIssue[] },
             ],
            ],
            [action    : 'transitionIssue',
             ext: ":SCRIPTED_GROOVY_VALIDATOR_TC_25_$it _when assignee is selected user _the system should not display error message",
             sleep: info?.isCloud? 5000 : 0,
             expected  : 0,
             parameters: [
                     transition: it,
                     issue: { -> defaultIssue[] },
             ],
             failData: ["$errorMessage"],
            ],
            [action    : 'updateIssue',
             ext: "assign issue to $testUser _to check success _ $it:",
             sleep: info?.isCloud? 5000 : 0,
             parameters: [
                     assignee: testUser,
                     issue: { -> defaultIssue[] },
             ],
            ],
            [action    : 'transitionIssue',
             ext: ":SCRIPTED_GROOVY_VALIDATOR_TC_36_ $it _when assignee is not selected user _the system should display error message",
             sleep: info?.isCloud? 5000 : 0,
             expected  : -3,
             parameters: [
                     transition: it,
                     issue: { -> defaultIssue[] },
             ],
             data: ["$errorMessage"],
            ],
    ])
}

// SCRIPTED_GROOVY_VALIDATOR TC_37-Verify for the Groovy script_The system should display error message_on subtask
[
        'verify_issue_must_assigned_to_specific_user'
].each {
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             expected: -3,
             ext       : ":SCRIPTED_GROOVY_VALIDATOR_TC_37_Case_01_ $it _when subtask not having assignee _the system should display error message",
             sleep: info?.isCloud? 5000 : 0,
             parameters: [
                     transition: it,
                     issue     : { -> subtask[] },
             ],
             data      : ["$errorMessage"],
            ],
            [action    : 'updateIssue',
             ext       : "assign subtask to $user _to check success _ $it:",
             sleep: info?.isCloud? 5000 : 0,
             parameters: [
                     assignee: user,
                     issue   : { -> subtask[] },
             ],
            ],
            [action    : 'transitionIssue',
             ext       : ":SCRIPTED_GROOVY_VALIDATOR_TC_37_Case_02 _$it _when subatsks assignee is selected user _the system should not display error message",
             sleep: info?.isCloud? 5000 : 0,
             expected  : 0,
             parameters: [
                     transition: it,
                     issue     : { -> subtask[] },
             ],
             failData  : ["$errorMessage"],
            ],
    ])
}

// SCRIPTED_GROOVY_VALIDATOR TC_38-Verify for the Scripted_Groovy from the issue transition screen.
[
        'verify_issue_must_assigned_to_specific_user'
].each {
    gint.taskHelper.add([
            [action    : 'updateIssue',
             ext       : "unassign issue to check_ $it _adding the assignee on transition screen:",
             sleep: info?.isCloud? 5000 : 0,
             parameters: [
                     issue   : { -> defaultIssue[] },
                     assignee: " ",
             ],
            ],
            [action    : 'transitionIssue',
             sleep: info?.isCloud? 5000 : 0,
             ext       : ":SCRIPTED_GROOVY_VALIDATOR TC_38_Case_01_ $it _added the selected assignee_from the issue transition screen",
             expected  : 0,
             parameters: [
                     transition: it,
                     issue     : { -> defaultIssue[] },
                     assignee: user,
             ],
             failData      : ["$errorMessage"],
            ],
            [action    : 'transitionIssue',
             sleep: info?.isCloud? 5000 : 0,
             ext       : ":SCRIPTED_GROOVY_VALIDATOR TC_38_Case_02_ $it _added the different assignee_from the issue transition screen",
             expected  : -3,
             parameters: [
                     transition: it,
                     issue     : { -> defaultIssue[] },
                     assignee: testUser,
             ],
             data  : ["$errorMessage"],
            ],
            [action    : 'updateIssue',
             sleep: info?.isCloud? 5000 : 0,
             ext       : "unassign issue to $user _after checking_ $it _adding the assignee on transition screen:",
             parameters: [
                     issue   : { -> defaultIssue[] },
                     assignee: " ",
             ],
            ],
    ])
}

/*
REVIEWED BY Chirag: 13.03.2024
1. fix version & affects version field with operators:
   - field
        - Equals to
        - does not equals to

   - Text
        - Equals to
        - Does not equals
Note: Check on transition screen
2. fix version & affects version field with operators:
        - empty
        - not empty
3. fix version & affects version field with operators:
   - field
        - one of
        - not one of
   - Text
       - one of
       - not one of
Note: Check on transition screen
4. story point and original story points fields with operator -
     - Field
        - less than
        - not less than
        - Greater than
        - Not greater than
     - Text
        - less than
        - not less than
        - Greater than
        - Not greater than
5. Description fields with the operator :
       - matches a regular expression
       - Regex : TEST
       - does not matches a regular expression
       - Regex : TEST
6. fix version & affects version field with operators: to compare integer
    - Field:
        - contains value
        - does not contains value
    - Text:
        - contains value
        - does not contains value
7. labels and description field with below operators: to compare string and alphanumeric values
    - Field:
       - contains value
       - does not contains value
    - Text
       - contains value
       - does not contains value

 */

