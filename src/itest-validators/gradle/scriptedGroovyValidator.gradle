import groovy.json.JsonSlurper
import java.nio.file.Paths

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
//apply from: 'common/setUp.gradle'
apply from: gint.resourceDirectory +'/src/common/testValidators.gradle'

def info = gint.getJiraHelper().getServerInfoWithVerify() // Verify access to Jira instance otherwise end test if server not available
def project = 'AUTOMATION' //gint.getJiraHelper().getProjectKey()	//get project key using jira helper functions
def transition = 'scriptedGroovyValidator'
def workflow = project
def screen = project
def user = info.user
gint.xmlReport =	true	//xml report generates in projects root directory
gint.verbose =	true

def jsonSlurper = new JsonSlurper();
def path = Paths.get(gint.directories.resource + "/resources/validatorsData/ScriptedGroovyValidatorFunctions${info?.isCloud ? "Cloud" : ""}.json")
def transitionFunctions = jsonSlurper.parse(path)
def functionKey = info?.isCloud ? 'com.innovalog.jmwe.jira-misc-workflow-extensions:groovy-validator' : 'com.innovalog.jmwe.jira-misc-workflow-extensions:groovy-validator'	//function key for HideTransitionCondition
def startStep = info?.isCloud ? '1':'11' // depends on workflow. '1' for cloud and '11' (To Do)for server works for custom jira workflow

createTransitionsWithFunctions(transitionFunctions, transition, functionKey, 'validator', startStep, workflow, screen, 0)

createVersions(project, 5)
createComponents(project, 'component', 5)

// check when issue is not assigned - condition fails
def currentIssue = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'currentIssue')
transitionIssue(transition+0, {-> currentIssue[0]}, -3, 'TC_01- When issue not having assignee', null, null)

// check when issue has assigned - condition true
def parent = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue', assignee: user]}, 'currentIssueWithAssignee')
transitionIssue(transition+0, {-> parent[0]}, 0, 'TC_02-When Condition true', null, null)

// check when condition (!!issue.getLinkedIssues()) returns true
def linkIssue1 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'linkIssue1')
def linkIssue2 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'linkIssue2')
linkIssues([issue: { -> linkIssue1[0] }, toIssue: { -> linkIssue2[0] }, link: 'duplicates'], 'linkByAnyLinkType1' )
transitionIssue(transition+1, {-> linkIssue1[0]}, 0, 'TC_03-check when condition (!!issue.getLinkedIssues()) returns true', null, null)

// check when condition (!!issue.getLinkedIssues()) returns false
transitionIssue(transition+1, {-> parent[0]}, -3, 'TC_04-check when condition (!!issue.getLinkedIssues()) returns false', null, null)

// check when condition (!!issue.getLinkedIssues()) returns false
def parent1 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'currentIssueWithoutFixVersion')
transitionIssue(transition+2, {-> parent1[0]}, -3, "TC_05-When condition false", null, null)

// check when condition (!!issue.getLinkedIssues()) returns true
def parent2 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue', fixVersions: '1']}, 'currentIssueWithFixVersion')
transitionIssue(transition+2, {-> parent2[0]}, 0, "TC_06-When condition true", null, null)
