buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/itest-validators/validator.gradle'

def errorMessage = "Error from JMWE validator"

def functionKey = info?.isCloud ? "com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.${testCloudBuild}__ScriptedValidator" : 'com.innovalog.jmwe.jira-misc-workflow-extensions:groovy-validator'
/*
addVersion(projectName)
addComponent(projectName)

addCustomField('Age', "number")
addFieldToScreen(screen, 'Age')

def GET_CUSTOM_FIELD_AGE_ID = getCustomFieldId('Age')
def CF_Age_Id = {->GET_CUSTOM_FIELD_AGE_ID.getAt(0).trim()}

def GET_CUSTOM_FIELD_STORY_POINTS_ID = getCustomFieldId("Story Point")
def CF_Story_Points_Id = {->GET_CUSTOM_FIELD_STORY_POINTS_ID.getAt(0).trim()}

def integerFieldsList = [
        storyPoints: [
                name: "Story Points",
                value: 10,
                configValue: CF_Story_Points_Id
                ],
        age:  [
                name: "Age",
                value: 10,
                configValue: CF_Age_Id
                ]
]

//Check custom field age and story points does not equals to given value
[
        'age',
        'storyPoints'
].each {fieldName ->
    def fieldsData = integerFieldsList[fieldName]
    def transition = 'checkFieldsDoesNotEqualsToGivenValue' + fieldName
    def server = ["errorMessage=$errorMessage", "field=", "scriptDescription=", "groovyExpression=issue.getAsString(\"assignee\") == \"$getCurrentUserName\""]
    def cloud = "{\"errorMessage\":\"$errorMessage\",\"script\":\"let convertToNumber = x => x ? Number(x) : 0;\\nlet convertToCalendarDate = x => x ? new CalendarDate(x) : null;\\nlet convertToDate = x => x ? new Date(x) : null;\\nlet convertCalendarDateToDate = x => x ? new Date(x.toISOString() + 'T00:00:00') : null;\\nlet convertDateToCalendarDate = x =>x ? x.toCalendarDate() : null;\\nlet convertRichText = x => typeof x == 'RichText' ? x.plainText : x; \\nlet source = convertRichText(issue.${fieldsData.configValue});\\nlet target = 10;\\nsource != target\",\"expression\":\"let convertToNumber = x => x ? Number(x) : 0;\\nlet convertToCalendarDate = x => x ? new CalendarDate(x) : null;\\nlet convertToDate = x => x ? new Date(x) : null;\\nlet convertCalendarDateToDate = x => x ? new Date(x.toISOString() + 'T00:00:00') : null;\\nlet convertDateToCalendarDate = x =>x ? x.toCalendarDate() : null;\\nlet convertRichText = x => typeof x == 'RichText' ? x.plainText : x; \\nlet source = convertRichText(issue.${fieldsData.configValue});\\nlet target = 10;\\nsource != target\",\"type\":\"noCode\",\"field\":\"$fieldsData.configValue\",\"operator\":\"notEqual\",\"valueToCompare\":\"text\",\"targetText\":\"10\"}"
    addTransitionFunction(transition, 'validator', info?.isCloud ? cloud : server, functionKey)

    def issue = createIssue([type: 'Story', summary: 'JMWE_Issue'], transition)

    gint.taskHelper.add([
            [action    : 'transitionIssue',
             expected  : 0,
             ext       : ": By $transition when field $fieldName is empty",
             parameters: [
                     issue     : { -> issue[] },
                     transition: transition
             ],
             failData      : [errorMessage]
            ],
            [action    : "setFieldValue",
             ext       : ":Of $fieldName to 5 before transition with: $transition",
             sleep     : sleep,
             parameters: [
                     issue: { -> issue[] },
                     field: fieldsData.name,
                     value: 5,

             ]
            ],
            [action    : 'transitionIssue',
             expected  : 0,
             ext       : ": By $transition when field $fieldName does not equals to 10",
             parameters: [
                     issue     : { -> issue[] },
                     transition: transition
             ],
             failData      : [errorMessage]
            ],
            [action    : "setFieldValue",
             ext       : ":Of $fieldName to 10 before transition with: $transition",
             sleep     : sleep,
             parameters: [
                     issue: { -> issue[] },
                     field: fieldsData.name,
                     value: 10,

             ]
            ],
            [action    : 'transitionIssue',
             expected  : -3,
             ext       : ": By $transition when field $fieldName equals 10",
             parameters: [
                     issue     : { -> issue[] },
                     transition: transition
             ],
             data      : [errorMessage]
            ],

    ])
}

//Check custom field age and story points equals to given value
[
        'age',
        'storyPoints'
].each {fieldName ->
    def fieldsData = integerFieldsList[fieldName]
    def transition = 'checkFieldsEqualsToGivenValue' + fieldName
    def server = ["errorMessage=$errorMessage", "field=", "scriptDescription=", "groovyExpression=issue.getAsString(\"assignee\") == \"$getCurrentUserName\""]
    def cloud = "{\"errorMessage\":\"$errorMessage\",\"script\":\"let convertToNumber = x => x ? Number(x) : 0;\\nlet convertToCalendarDate = x => x ? new CalendarDate(x) : null;\\nlet convertToDate = x => x ? new Date(x) : null;\\nlet convertCalendarDateToDate = x => x ? new Date(x.toISOString() + 'T00:00:00') : null;\\nlet convertDateToCalendarDate = x =>x ? x.toCalendarDate() : null;\\nlet convertRichText = x => typeof x == 'RichText' ? x.plainText : x; \\nlet source = convertRichText(issue.${fieldsData.configValue});\\nlet target = 10;\\nsource == target\",\"expression\":\"let convertToNumber = x => x ? Number(x) : 0;\\nlet convertToCalendarDate = x => x ? new CalendarDate(x) : null;\\nlet convertToDate = x => x ? new Date(x) : null;\\nlet convertCalendarDateToDate = x => x ? new Date(x.toISOString() + 'T00:00:00') : null;\\nlet convertDateToCalendarDate = x =>x ? x.toCalendarDate() : null;\\nlet convertRichText = x => typeof x == 'RichText' ? x.plainText : x; \\nlet source = convertRichText(issue.${fieldsData.configValue});\\nlet target = 10;\\nsource == target\",\"type\":\"noCode\",\"field\":\"$fieldsData.configValue\",\"operator\":\"equals\",\"valueToCompare\":\"text\",\"targetText\":\"10\"}"
    addTransitionFunction(transition, 'validator', info?.isCloud ? cloud : server, functionKey)

    def issue = createIssue([type: 'Story', summary: 'JMWE_Issue'], transition)

    gint.taskHelper.add([
            [action    : 'transitionIssue',
             expected  : -3,
             ext       : ": By $transition when field $fieldName is not equals to 10",
             parameters: [
                     issue     : { -> issue[] },
                     transition: transition
             ],
             data      : [errorMessage]
            ],
            [action    : "setFieldValue",
             ext       : ":Of $fieldName to 10 before transition with: $transition",
             sleep     : sleep,
             parameters: [
                     issue: { -> issue[] },
                     field: fieldsData.name,
                     value: 10,

             ]
            ],
            [action    : 'transitionIssue',
             expected  : 0,
             ext       : ": By $transition when field $fieldName equals 10",
             parameters: [
                     issue     : { -> issue[] },
                     transition: transition
             ],
             failData      : [errorMessage]
            ],
    ])
}

// Check custom field Age equals to story points
[
        'CustomField-Age Does not Equals To StoryPoints',
].each {
    def transition = 'checkCustomFieldAgeDoesNotEqualsToStoryPoints'
    def server = ["errorMessage=$errorMessage", "field=", "scriptDescription=", "groovyExpression=issue.getAsString(\"assignee\") == \"$getCurrentUserName\""]
    def cloud = "{\"errorMessage\":\"$errorMessage\",\"script\":\"let convertToNumber = x => x ? Number(x) : 0;\\nlet convertToCalendarDate = x => x ? new CalendarDate(x) : null;\\nlet convertToDate = x => x ? new Date(x) : null;\\nlet convertCalendarDateToDate = x => x ? new Date(x.toISOString() + 'T00:00:00') : null;\\nlet convertDateToCalendarDate = x =>x ? x.toCalendarDate() : null;\\nlet convertRichText = x => typeof x == 'RichText' ? x.plainText : x; \\nlet source = convertRichText(issue.${CF_Age_Id});\\nlet target = convertRichText(issue.${CF_Story_Points_Id});\\nsource != target\",\"expression\":\"let convertToNumber = x => x ? Number(x) : 0;\\nlet convertToCalendarDate = x => x ? new CalendarDate(x) : null;\\nlet convertToDate = x => x ? new Date(x) : null;\\nlet convertCalendarDateToDate = x => x ? new Date(x.toISOString() + 'T00:00:00') : null;\\nlet convertDateToCalendarDate = x =>x ? x.toCalendarDate() : null;\\nlet convertRichText = x => typeof x == 'RichText' ? x.plainText : x; \\nlet source = convertRichText(issue.${CF_Age_Id});\\nlet target = convertRichText(issue.${CF_Story_Points_Id});\\nsource != target\",\"type\":\"noCode\",\"field\":\"$CF_Age_Id\",\"operator\":\"notEqual\",\"valueToCompare\":\"field\",\"targetField\":\"$CF_Story_Points_Id\"}"
    addTransitionFunction(transition, 'validator', info?.isCloud ? cloud : server, functionKey)

    def issue = createIssue([type: 'Story', summary: 'JMWE_Issue'], transition)

    gint.taskHelper.add([
            [action    : 'transitionIssue',
             expected  : -3,
             ext       : ": By $transition when fields are emmpty",
             parameters: [
                     issue     : { -> issue[] },
                     transition: transition
             ],
             data      : [errorMessage]
            ],
            [action    : "setFieldValue",
             ext       : ":Of Story Points to 5 before transition with: $transition",
             sleep     : sleep,
             parameters: [
                     issue: { -> issue[] },
                     field: 'Story Points',
                     value: 5,
             ]
            ],
            [action    : 'transitionIssue',
             expected  : 0,
             ext       : ": By $transition when field age is empty and Story points has value",
             parameters: [
                     issue     : { -> issue[] },
                     transition: transition
             ],
             failData      : [errorMessage]
            ],
            [action    : "setFieldValue",
             ext       : ":Of Age to 5 before transition with: $transition",
             sleep     : sleep,
             parameters: [
                     issue: { -> issue[] },
                     field: 'Age',
                     value: 5,

             ]
            ],
            [action    : 'transitionIssue',
             expected  : -3,
             ext       : ": By $transition when field age value is not equals to Story points",
             parameters: [
                     issue     : { -> issue[] },
                     transition: transition
             ],
             data      : [errorMessage]
            ],
    ])
}


// Check custom field Age equals to story points
[
       'CustomField-Age EqualsToStoryPoints',
].each {
    def transition = 'checkCustomFieldAgeEqualsToStoryPoints'
    def server = ["errorMessage=$errorMessage", "field=", "scriptDescription=", "groovyExpression=issue.getAsString(\"assignee\") == \"$getCurrentUserName\""]
    def cloud = "{\"errorMessage\":\"$errorMessage\",\"script\":\"let convertToNumber = x => x ? Number(x) : 0;\\nlet convertToCalendarDate = x => x ? new CalendarDate(x) : null;\\nlet convertToDate = x => x ? new Date(x) : null;\\nlet convertCalendarDateToDate = x => x ? new Date(x.toISOString() + 'T00:00:00') : null;\\nlet convertDateToCalendarDate = x =>x ? x.toCalendarDate() : null;\\nlet convertRichText = x => typeof x == 'RichText' ? x.plainText : x; \\nlet source = convertRichText(issue.${CF_Age_Id});\\nlet target = convertRichText(issue.${CF_Story_Points_Id});\\nsource == target\",\"expression\":\"let convertToNumber = x => x ? Number(x) : 0;\\nlet convertToCalendarDate = x => x ? new CalendarDate(x) : null;\\nlet convertToDate = x => x ? new Date(x) : null;\\nlet convertCalendarDateToDate = x => x ? new Date(x.toISOString() + 'T00:00:00') : null;\\nlet convertDateToCalendarDate = x =>x ? x.toCalendarDate() : null;\\nlet convertRichText = x => typeof x == 'RichText' ? x.plainText : x; \\nlet source = convertRichText(issue.${CF_Age_Id});\\nlet target = convertRichText(issue.${CF_Story_Points_Id});\\nsource == target\",\"type\":\"noCode\",\"field\":\"${CF_Age_Id}\",\"operator\":\"equals\",\"valueToCompare\":\"field\",\"targetField\":\"${CF_Story_Points_Id}\"}"
    addTransitionFunction(transition, 'validator', info?.isCloud ? cloud : server, functionKey)

    def issue = createIssue([type: 'Story', summary: 'JMWE_Issue'], transition)

    gint.taskHelper.add([
            [action    : 'transitionIssue',
             expected  : 0,
             ext       : ": By $transition when fields are emmpty",
             parameters: [
                     issue     : { -> issue[] },
                     transition: transition
             ],
             failData      : [errorMessage]
            ],
            [action    : "setFieldValue",
             ext       : ":Of Story Points to 5 before transition with: $transition",
             sleep     : sleep,
             parameters: [
                     issue: { -> issue[] },
                     field: 'Story Points',
                     value: 5,

             ]
            ],
            [action    : 'transitionIssue',
             expected  : -3,
             ext       : ": By $transition when field age is empty and Story points has value",
             parameters: [
                     issue     : { -> issue[] },
                     transition: transition
             ],
             data      : [errorMessage]
            ],
            [action    : "setFieldValue",
             ext       : ":Of Age to 10 before transition with: $transition",
             sleep     : sleep,
             parameters: [
                     issue: { -> issue[] },
                     field: 'Age',
                     value: 10,

             ]
            ],
            [action    : 'transitionIssue',
             expected  : -3,
             ext       : ": By $transition when field age value is not equals to Story points",
             parameters: [
                     issue     : { -> issue[] },
                     transition: transition
             ],
             data      : [errorMessage]
            ],
    ])
}

// Check fix versions equals to affects versions.
[
        'equals',
].each {
    def transition = 'checkFixVersionsEqualsAffectsVersions'
    def server = ["errorMessage=$errorMessage", "field=", "scriptDescription=", "groovyExpression=issue.getAsString(\"assignee\") == \"$getCurrentUserName\""]
    def cloud = "{\"errorMessage\":\"$errorMessage\",\"script\":\"let convertToNumber = x => x ? Number(x) : 0;\\nlet convertToCalendarDate = x => x ? new CalendarDate(x) : null;\\nlet convertToDate = x => x ? new Date(x) : null;\\nlet convertCalendarDateToDate = x => x ? new Date(x.toISOString() + 'T00:00:00') : null;\\nlet convertDateToCalendarDate = x =>x ? x.toCalendarDate() : null;\\nlet convertRichText = x => typeof x == 'RichText' ? x.plainText : x; \\nlet source = (issue.fixVersions ?? []).map(f => f?.name).map(convertRichText);\\nlet target = (issue.versions ?? []).map(f => f?.name).map(convertRichText);\\nsource == target\",\"expression\":\"let convertToNumber = x => x ? Number(x) : 0;\\nlet convertToCalendarDate = x => x ? new CalendarDate(x) : null;\\nlet convertToDate = x => x ? new Date(x) : null;\\nlet convertCalendarDateToDate = x => x ? new Date(x.toISOString() + 'T00:00:00') : null;\\nlet convertDateToCalendarDate = x =>x ? x.toCalendarDate() : null;\\nlet convertRichText = x => typeof x == 'RichText' ? x.plainText : x; \\nlet source = (issue.fixVersions ?? []).map(f => f?.name).map(convertRichText);\\nlet target = (issue.versions ?? []).map(f => f?.name).map(convertRichText);\\nsource == target\",\"type\":\"noCode\",\"field\":\"fixVersions\",\"operator\":\"equals\",\"valueToCompare\":\"field\",\"targetField\":\"versions\"}"
    addTransitionFunction(transition, 'validator', info?.isCloud ? cloud : server, functionKey)

    def issue = createIssue([type: 'Task', summary: 'JMWE_Issue'], transition)

    gint.taskHelper.add([
            [action    : 'transitionIssue',
             expected  : 0,
             ext       : ": By $transition when fields are empty",
             parameters: [
                     issue     : { -> issue[] },
                     transition: transition
             ],
             failData      : [errorMessage]
            ],
            [action    : "setFieldValue",
             ext       : ":Of affects version to $defaultValueOfVersions1: $transition",
             sleep     : sleep,
             parameters: [
                     issue: { -> issue[] },
                     field: fields.affectsVersions.name,
                     value: fields.affectsVersions.value,
             ]
            ],
            [action    : "setFieldValue",
             ext       : ":Of fix version to $defaultValueOfVersions2: $transition",
             sleep     : sleep,
             parameters: [
                     issue: { -> issue[] },
                     field: fields.fixVersions.name,
                     value: defaultValueOfVersions2,
             ]
            ],
            [action    : 'transitionIssue',
             expected  : -3,
             ext       : ": By $transition when fields are equal",
             parameters: [
                     issue     : { -> issue[] },
                     transition: transition
             ],
             data      : [errorMessage]
            ],
    ])
}

[
        'notEquals',
].each {
    def transition = 'checkFixVersionsDoesNotEqualsAffectsVersions'
    def server = ["errorMessage=$errorMessage", "field=", "scriptDescription=", "groovyExpression=issue.getAsString(\"assignee\") == \"$getCurrentUserName\""]
    def cloud = "{\"errorMessage\":\"$errorMessage\",\"script\":\"let convertToNumber = x => x ? Number(x) : 0;\\nlet convertToCalendarDate = x => x ? new CalendarDate(x) : null;\\nlet convertToDate = x => x ? new Date(x) : null;\\nlet convertCalendarDateToDate = x => x ? new Date(x.toISOString() + 'T00:00:00') : null;\\nlet convertDateToCalendarDate = x =>x ? x.toCalendarDate() : null;\\nlet convertRichText = x => typeof x == 'RichText' ? x.plainText : x; \\nlet source = (issue.fixVersions ?? []).map(f => f?.name).map(convertRichText);\\nlet target = (issue.versions ?? []).map(f => f?.name).map(convertRichText);\\nsource != target\",\"expression\":\"let convertToNumber = x => x ? Number(x) : 0;\\nlet convertToCalendarDate = x => x ? new CalendarDate(x) : null;\\nlet convertToDate = x => x ? new Date(x) : null;\\nlet convertCalendarDateToDate = x => x ? new Date(x.toISOString() + 'T00:00:00') : null;\\nlet convertDateToCalendarDate = x =>x ? x.toCalendarDate() : null;\\nlet convertRichText = x => typeof x == 'RichText' ? x.plainText : x; \\nlet source = (issue.fixVersions ?? []).map(f => f?.name).map(convertRichText);\\nlet target = (issue.versions ?? []).map(f => f?.name).map(convertRichText);\\nsource != target\",\"type\":\"noCode\",\"field\":\"fixVersions\",\"operator\":\"notEqual\",\"valueToCompare\":\"field\",\"targetField\":\"versions\"}"
    addTransitionFunction(transition, 'validator', info?.isCloud ? cloud : server, functionKey)

    def issue = createIssue([type: 'Task', summary: 'JMWE_Issue'], transition)

    gint.taskHelper.add([
            [action    : 'transitionIssue',
             expected  : -3,
             ext       : ": By $transition when fields are empty",
             parameters: [
                     issue     : { -> issue[] },
                     transition: transition
             ],
             data      : [errorMessage]
            ],
            [action    : "setFieldValue",
             ext       : ":Of affects version to $defaultValueOfVersions1:$transition",
             sleep     : sleep,
             parameters: [
                     issue: { -> issue[] },
                     field: fields.affectsVersions.name,
                     value: fields.affectsVersions.value,

             ]
            ],
            [action    : "setFieldValue",
             ext       : ":Of fix version to $defaultValueOfVersions2: $transition",
             sleep     : sleep,
             parameters: [
                     issue: { -> issue[] },
                     field: fields.fixVersions.name,
                     value: defaultValueOfVersions2,
             ]
            ],
            [action    : 'transitionIssue',
             expected  : 0,
             ext       : ": By $transition when fields are not equal",
             parameters: [
                     issue     : { -> issue[] },
                     transition: transition
             ],
             failData      : [errorMessage]
            ],
    ])
}
*/
[
        'verify_issue_must_assigned_to_specific_user'
].each {
    def server = ["errorMessage=$errorMessage" , "field=" , "scriptDescription=" , "groovyExpression=issue.getAsString(\"assignee\") == \"$getCurrentUserName\""]
    def cloud = "{\"conditionalValidation\":false,\"script\":\"!!issue.assignee && issue.assignee.accountId == '$info.userKey'\",\"expression\":\"!!issue.assignee && issue.assignee.accountId == '$info.userKey'\",\"scriptDescription\":\"\",\"errorMessage\":\"$errorMessage\"}"
    addTransitionFunction(it, 'validator', info?.isCloud ? cloud : server, functionKey )
}

['labelsShouldBeEmptyOnCreateTransition'].each {
    def server = ["errorMessage=$errorMessage" , "field=" , "scriptDescription=" , "groovyExpression=!issue.get(\"labels\")"]
    def cloud = "{\"errorMessage\":\"$errorMessage\",\"script\":\"(! issue.labels || issue.labels.length == 0)\",\"type\":\"script\",\"expression\":\"(! issue.labels || issue.labels.length == 0)\"}"
    if(isCloud){
        addTransitionFunctionOnCreateTransition(it, 'validator', info?.isCloud ? cloud : server, functionKey)
    }
}

def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'defaultIssue')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: {->defaultIssue[]}], 'subtask')

// Check create transition , field labels should be
if(isCloud){
    gint.taskHelper.add(
            action: "createIssue",
            ext: ":to check build your own validator on create transition error when field label provided",
            expected: -3,
            parameters: [
                    summary: "JMWE_Issue",
                    type: "Task",
                    project: projectName,
                    labels: "testLabel",
            ],
            data: [errorMessage]
    )
}

if(isCloud){
    gint.taskHelper.add(
            action: "createIssue",
            ext: ":to check build your own validator on create transition error when field label not provided",
            parameters: [
                    summary: "JMWE_Issue",
                    type: "Task",
                    project: projectName
            ]
    )
}

// SCRIPTED_GROOVY_VALIDATOR -Verify for the Groovy script_The system should display error message
[
        'verify_issue_must_assigned_to_specific_user'
].each {
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             sleep: info?.isCloud? 5000 : 0,
             ext: ":SCRIPTED_GROOVY_VALIDATOR_TC_24_ $it _when issue not having assignee _the system should display error message",
             expected  : -3,
             parameters: [
                     transition: it,
                     issue: { -> defaultIssue[] },
             ],
             data: ["$errorMessage"],
            ],
            [action    : 'updateIssue',
             ext: "assign issue to $user _to check success _ $it:",
             sleep: info?.isCloud? 5000 : 0,
             parameters: [
                     assignee: user,
                     issue: { -> defaultIssue[] },
             ],
            ],
            [action    : 'transitionIssue',
             ext: ":SCRIPTED_GROOVY_VALIDATOR_TC_25_$it _when assignee is selected user _the system should not display error message",
             sleep: info?.isCloud? 5000 : 0,
             expected  : 0,
             parameters: [
                     transition: it,
                     issue: { -> defaultIssue[] },
             ],
             failData: ["$errorMessage"],
            ],
            [action    : 'updateIssue',
             ext: "assign issue to $testUser _to check success _ $it:",
             sleep: info?.isCloud? 5000 : 0,
             parameters: [
                     assignee: testUser,
                     issue: { -> defaultIssue[] },
             ],
            ],
            [action    : 'transitionIssue',
             ext: ":SCRIPTED_GROOVY_VALIDATOR_TC_36_ $it _when assignee is not selected user _the system should display error message",
             sleep: info?.isCloud? 5000 : 0,
             expected  : -3,
             parameters: [
                     transition: it,
                     issue: { -> defaultIssue[] },
             ],
             data: ["$errorMessage"],
            ],
    ])
}

// SCRIPTED_GROOVY_VALIDATOR TC_37-Verify for the Groovy script_The system should display error message_on subtask
[
        'verify_issue_must_assigned_to_specific_user'
].each {
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             expected: -3,
             ext       : ":SCRIPTED_GROOVY_VALIDATOR_TC_37_Case_01_ $it _when subtask not having assignee _the system should display error message",
             sleep: info?.isCloud? 5000 : 0,
             parameters: [
                     transition: it,
                     issue     : { -> subtask[] },
             ],
             data      : ["$errorMessage"],
            ],
            [action    : 'updateIssue',
             ext       : "assign subtask to $user _to check success _ $it:",
             sleep: info?.isCloud? 5000 : 0,
             parameters: [
                     assignee: user,
                     issue   : { -> subtask[] },
             ],
            ],
            [action    : 'transitionIssue',
             ext       : ":SCRIPTED_GROOVY_VALIDATOR_TC_37_Case_02 _$it _when subatsks assignee is selected user _the system should not display error message",
             sleep: info?.isCloud? 5000 : 0,
             expected  : 0,
             parameters: [
                     transition: it,
                     issue     : { -> subtask[] },
             ],
             failData  : ["$errorMessage"],
            ],
    ])
}

// SCRIPTED_GROOVY_VALIDATOR TC_38-Verify for the Scripted_Groovy from the issue transition screen.
[
        'verify_issue_must_assigned_to_specific_user'
].each {
    gint.taskHelper.add([
            [action    : 'updateIssue',
             ext       : "unassign issue to check_ $it _adding the assignee on transition screen:",
             sleep: info?.isCloud? 5000 : 0,
             parameters: [
                     issue   : { -> defaultIssue[] },
                     assignee: " ",
             ],
            ],
            [action    : 'transitionIssue',
             sleep: info?.isCloud? 5000 : 0,
             ext       : ":SCRIPTED_GROOVY_VALIDATOR TC_38_Case_01_ $it _added the selected assignee_from the issue transition screen",
             expected  : 0,
             parameters: [
                     transition: it,
                     issue     : { -> defaultIssue[] },
                     assignee: user,
             ],
             failData      : ["$errorMessage"],
            ],
            [action    : 'transitionIssue',
             sleep: info?.isCloud? 5000 : 0,
             ext       : ":SCRIPTED_GROOVY_VALIDATOR TC_38_Case_02_ $it _added the different assignee_from the issue transition screen",
             expected  : -3,
             parameters: [
                     transition: it,
                     issue     : { -> defaultIssue[] },
                     assignee: testUser,
             ],
             data  : ["$errorMessage"],
            ],
            [action    : 'updateIssue',
             sleep: info?.isCloud? 5000 : 0,
             ext       : "unassign issue to $user _after checking_ $it _adding the assignee on transition screen:",
             parameters: [
                     issue   : { -> defaultIssue[] },
                     assignee: " ",
             ],
            ],
    ])
}


/*
REVIEWED BY Chirag: 13.03.2024
1. fix version & affects version field with operators:
   - field
        - Equals to
        - does not equals to

   - Text
        - Equals to
        - Does not equals
Note: Check on transition screen
2. fix version & affects version field with operators:
        - empty
        - not empty
3. fix version & affects version field with operators:
   - field
        - one of
        - not one of
   - Text
       - one of
       - not one of
Note: Check on transition screen
4. story point and original story points fields with operator -
     - Field
        - less than
        - not less than
        - Greater than
        - Not greater than
     - Text
        - less than
        - not less than
        - Greater than
        - Not greater than
5. Description fields with the operator :
       - matches a regular expression
       - Regex : TEST
       - does not matches a regular expression
       - Regex : TEST
6. fix version & affects version field with operators: to compare integer
    - Field:
        - contains value
        - does not contains value
    - Text:
        - contains value
        - does not contains value
7. labels and description field with below operators: to compare string and alphanumeric values
    - Field:
       - contains value
       - does not contains value
    - Text
       - contains value
       - does not contains value

 */

