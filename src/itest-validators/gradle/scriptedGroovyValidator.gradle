import groovy.json.JsonSlurper
import java.nio.file.Paths

buildscript {
    def gintVersion = findProperty('gintVersion') ?: System.getenv('GINT_VERSION') ?: '+'
    dependencies {
        classpath 'org.gint:gint-atlassian:' + gintVersion
    }
    repositories {
        flatDir { dirs 'libs' } // for testing SNAPSHOT versions
        mavenLocal()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
}

apply plugin: 'org.gint.atlassian'
apply from: 'common/setUp.gradle'

def info = gint.getJiraHelper().getServerInfoWithVerify() // Verify access to Jira instance otherwise end test if server not available
def project = gint.getJiraHelper().getProjectKey()	//get project key using jira helper functions
def transition = 'scriptedGroovyValidator'
def workflow = project
def screen = project
def user = info.user
def userqa1 = project.toLowerCase()+'qa1'
gint.xmlReport =	true	//xml report generates in projects root directory
gint.verbose =	true

def jsonSlurper = new JsonSlurper();
def path = Paths.get(gint.directories.resource + "/resources/validatorsData/ScriptedGroovyValidatorFunctions${info?.isCloud ? "Cloud" : ""}.json")
def transitionFunctions = jsonSlurper.parse(path)
def functionKey = info?.isCloud ? 'com.innovalog.jmwe.jira-misc-workflow-extensions:groovy-validator' : 'com.innovalog.jmwe.jira-misc-workflow-extensions:groovy-validator'	//function key for HideTransitionCondition
def startStep = info?.isCloud ? '1':'11' // depends on workflow. '1' for cloud and '11' (To Do)for server works for custom jira workflow

createTransitionsWithFunctions(transitionFunctions, transition, functionKey, 'validator', startStep, workflow, screen, 0)

// Create issues
def summaries = [
		'groovyConditionMustReturnTrue',
		'groovyConditionMustReturnTrue',
		'groovyConditionMustReturnTrue',
]
def bug = createIssue(project, summaries.collect{[type: 'Bug', summary: it,] } )
def subTask = createIssue(project, [1, 1 ].collect{[type: 'Sub-Task', summary: 'summary', parent: { -> bug[it] }]} )
def epic = createIssue(project, summaries.collect{[type: 'Epic', summary: it, field: "Epic Name", value: "Epic"]} )
def story = createIssue(project, [1, 1 ].collect{[type: 'story', summary: 'summary',field: "Epic Link", value: { -> epic[it] }, fixVersions: '1', assignee: user]} )
def linktype = [ 'blocks' ]
linkIssues(linktype.collect{[ issue: { -> story[0] }, toIssue: { -> epic[0] }, link: it] } )

def transitions = [
		'scriptedGroovyValidator0',
		'scriptedGroovyValidator1',
		'scriptedGroovyValidator2',
		'scriptedGroovyValidator3'
 ].eachWithIndex { transitions, number ->
    def transitionIssue1 = gint.taskHelper.add('transitionIssue',[
        [
            action: 'transitionIssue',
            ext: 'transitionWhenIssueReturnsGroovyConditionFalse' + number,
            dependsOn: true,
            expected: [ -3 ],
            parameters: [
                issue: { -> bug[0] },
                transition: transitions
            ],
            data: ['Remote error: groovy condition must return true for issue'],
        ],
        [
            action: 'transitionIssue',
            ext: 'transitionWhenIssueReturnsGroovyConditionTrue' + number,
            dependsOn: true,
            expected: [ 0 ],
            parameters: [
                issue: { -> story[0] },
                transition: transitions
            ],
            data: [
            	~/Successfully transitioned issue ${project}-\d+ with transition '${transition + number}'./
            ],
        ]
    ])
}