import groovy.json.JsonSlurper
import java.nio.file.Paths

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}
apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/testValidators.gradle'

def info = gint.getJiraHelper().getServerInfoWithVerify() // Verify access to Jira instance otherwise end test if server not available
def project = 'AUTOMATION'//gint.getJiraHelper().getProjectKey()	//get project key using jira helper functions
def transition = 'userValidator'
def workflow = project
def screen = project
def user = info.user
def userId = 'jmwe_qa'
gint.xmlReport =	true	//xml report generates in projects root directory
gint.verbose =	true

def jsonSlurper = new JsonSlurper();
def path = Paths.get(gint.directories.resource + "/resources/validatorsData/userValidatorFunctions${info?.isCloud ? "Cloud" : ""}.json")
def transitionFunctions = jsonSlurper.parse(path)
def functionKey = info?.isCloud ? 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.mwec__CommentRequiredValidator' : 'com.innovalog.jmwe.jira-misc-workflow-extensions:generic-user-validator'	//function key for HideTransitionCondition
def startStep = info?.isCloud ? '1':'11' // depends on workflow. '1' for cloud and '11' (To Do)for server works for custom jira workflow

createTransitionsWithFunctions(transitionFunctions, transition, functionKey, 'validator', startStep, workflow, screen, 0)

// check when currrent user is not reporter - criteria fails
def currentIssue = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue', reporter: userId]}, 'currentIssue')
transitionIssue(transition+0, {-> currentIssue[0]}, -3, 'TC_01- current user not satisfies the criteria', null, null)

// check when currrent user is reporter - condition true
def parent = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue', reporter: user, assignee: user]}, 'currentUserReporter')
transitionIssue(transition+0, {-> parent[0]}, 0, 'TC_02-current user satisfies the criteria', null, null)

// check when currrent user is not assignee - criteria fails
transitionIssue(transition+1, {-> currentIssue[0]}, -3, 'TC_03- current user not satisfies the criteria', null, null)

// check when currrent user is assignee - condition true
transitionIssue(transition+1, {-> parent[0]}, 0, 'TC_04-current user satisfies the criteria', null, null)

// check when currrent user is project lead - condition true
transitionIssue(transition+2, {-> parent[0]}, 0, 'TC_05-current user satisfies the criteria', null, null)

// check when currrent user is not project lead - condition false
transitionByUserTask(transition+2, userId, {-> parent[0]}, null, -3)

// check when currrent user is in selected group - condition true
transitionIssue(transition+4, {-> parent[0]}, 0, "TC_07-When condition true", null, null)

// check when currrent user is not in selected group - condition false
transitionByUserTask(transition+4, userId, {-> parent[0]}, null, -3 )

// check when currrent user is in selected field - condition true
def parent2 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue', assignee: user]}, 'currentUserIsAssignee')
transitionIssue(transition+5, {-> parent2[0]}, 0, "TC_09-When condition true", null, null)

// check when currrent user is not in selected field - condition false
transitionByUserTask(transition+5, userId, {-> parent2[0]}, null, -3)

// check when currrent user is return from the script - condition true
transitionIssue(transition+6, {-> parent2[0]}, 0, "TC_11-When condition true", null, null)

