buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/utils.gradle'

tearDown()
addWorkflow()

def functionKey = info?.isCloud? functionKey.uservalidatorCloud : functionKey.userValidatorServer
def errorMessage = "Check user satisfy the given criteria"

def defaultFieldsServer = [
        "errorMessage=$errorMessage",
        "correlationId=",
]
def defaultFieldsCloud = [
        "validator.id=e92924ef-17fc-4863-809d-add6da80b9e7"
]
def whichUser = [
        current : [ "fromUserType=currentUser" ],
        userInFieldAssignee : [ "fromUserType=userInField", "userField=assignee" ],
        userInFieldReporter : [  "fromUserType=userInField", "userField=reporter"],
        userInFieldCreator : [  "fromUserType=userInField", "userField=creator"],
]
def fieldEmpty = [
        no : [ "fieldEmpty=no" ],
        yes : [ "fieldEmpty=yes" ],
]
def mode = [
        allUsers : [ "conditionMode=all-user-condition" ],
        atLeastOne : [ "conditionMode=any-user-condition" ],
]
def userCriteria = [
        reporter : "isReporter=yes",
        assignee : "isAssignee=yes",
        checkFields : "userFieldsToCheck=labels",
        checkScript : "usersConditionScript=$groovyExpression.returnsReporter",
        projectLead : "isProjectLead=yes",
        checkRoles : "rolesToCheck=$jiraAdminRoleId",
        checkGroup : "groupsToCheck=jira-administrators",
        checkUser : "usersToCheck=$user",
        watcher : "isWatcher=yes",
]
def reverse = [
        no : [ "reverse=" ],
        yes : [ "reverse=yes" ]
]
// Configuration for conditions

userCriteria.eachWithIndex { criteria, userFields, i ->
    def cloud = defaultFieldsCloud + "validator.config-e92924ef-17fc-4863-809d-add6da80b9e7={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"errorMessage\":\"error\",\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))\"}"
    def server = defaultFieldsServer + userFields + whichUser.current +  mode.allUsers + fieldEmpty.no + reverse.no + conditionalValidation.no
    addTransitionFunction('currentUser' + criteria, 'validator',info ?.isCloud ? cloud : server, functionKey )
}

userCriteria.eachWithIndex { criteria, userFields, i ->
 // ToDo for cloud fields should be checked and have to change
    def cloud = defaultFieldsCloud + "validator.config-e92924ef-17fc-4863-809d-add6da80b9e7={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"errorMessage\":\"error\",\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))\"}"
    def server = defaultFieldsServer + userFields + whichUser.userInFieldAssignee +  mode.allUsers + fieldEmpty.no + reverse.no + conditionalValidation.no
    addTransitionFunction('assignee' + criteria, 'validator',info ?.isCloud ? cloud : server,  functionKey )
}

userCriteria.eachWithIndex { criteria, userFields, i ->
    // ToDo for cloud fields should be checked and have to change
    def cloud = defaultFieldsCloud + "validator.config-e92924ef-17fc-4863-809d-add6da80b9e7={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"errorMessage\":\"error\",\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))\"}"
    def server = defaultFieldsServer + userFields + whichUser.userInFieldReporter +  mode.allUsers + fieldEmpty.no + reverse.no + conditionalValidation.no
    addTransitionFunction('reporter' + criteria, 'validator',info ?.isCloud ? cloud : server,  functionKey )
}

userCriteria.eachWithIndex { criteria, userFields, i ->
    // ToDo for cloud fields should be checked and have to change
    def cloud = defaultFieldsCloud + "validator.config-e92924ef-17fc-4863-809d-add6da80b9e7={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"errorMessage\":\"error\",\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))\"}"
    def server = defaultFieldsServer + userFields + whichUser.userInFieldCreator +  mode.allUsers + fieldEmpty.no + reverse.no + conditionalValidation.no
    addTransitionFunction('creator' + criteria, 'validator',info ?.isCloud ? cloud : server,  functionKey )
}

['currentUser_assignee_reporter_field'].each {
    // ToDo for cloud fields should be checked and have to change
    def cloud = defaultFieldsCloud + "validator.config-e92924ef-17fc-4863-809d-add6da80b9e7={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"errorMessage\":\"error\",\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))\"}"
    def server = defaultFieldsServer + userCriteria.assignee + userCriteria.reporter +userCriteria.checkFields + whichUser.current +  mode.allUsers + fieldEmpty.no + reverse.no + conditionalValidation.no
    addTransitionFunction(it, 'validator',info ?.isCloud ? cloud : server,  functionKey )
}
['assignee_reporter_field'].each {
    // ToDo for cloud fields should be checked and have to change
    def cloud = defaultFieldsCloud + "validator.config-e92924ef-17fc-4863-809d-add6da80b9e7={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"errorMessage\":\"error\",\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))\"}"
    def server = defaultFieldsServer + userCriteria.reporter +userCriteria.checkFields + whichUser.userInFieldAssignee +  mode.allUsers + fieldEmpty.no + reverse.no + conditionalValidation.no
    addTransitionFunction(it, 'validator',info ?.isCloud ? cloud : server,  functionKey )
}
['atleastOneCriteria_currentUser'].each {
    // ToDo for cloud fields should be checked and have to change
    def cloud = defaultFieldsCloud + "validator.config-e92924ef-17fc-4863-809d-add6da80b9e7={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"errorMessage\":\"error\",\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))\"}"
    def server = defaultFieldsServer + userCriteria.assignee + userCriteria.reporter +userCriteria.checkFields + whichUser.current + mode.atLeastOne + fieldEmpty.no + reverse.no + conditionalValidation.no
    addTransitionFunction(it, 'validator', info ?.isCloud ? cloud : server, functionKey)
}
['atleastOneCriteria_assigneeField'].each {
    // ToDo for cloud fields should be checked and have to change
    def cloud = defaultFieldsCloud + "validator.config-e92924ef-17fc-4863-809d-add6da80b9e7={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"errorMessage\":\"error\",\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))\"}"
    def server = defaultFieldsServer + whichUser.userInFieldAssignee + userCriteria.checkRoles +userCriteria.projectLead +  mode.atLeastOne + fieldEmpty.no + reverse.no + conditionalValidation.no
    addTransitionFunction(it, 'validator', info ?.isCloud ? cloud : server, functionKey)
}
['atleastOneCriteria_reporterField'].each {
    // ToDo for cloud fields should be checked and have to change
    def cloud = defaultFieldsCloud + "validator.config-e92924ef-17fc-4863-809d-add6da80b9e7={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"errorMessage\":\"error\",\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))\"}"
    def server = defaultFieldsServer + whichUser.userInFieldReporter + userCriteria.checkRoles +userCriteria.projectLead +  mode.atLeastOne + fieldEmpty.no + reverse.no + conditionalValidation.no
    addTransitionFunction(it, 'validator', info ?.isCloud ? cloud : server, functionKey)
}
['atleastOneCriteria_creatorField'].each {
    // ToDo for cloud fields should be checked and have to change
    def cloud = defaultFieldsCloud + "validator.config-e92924ef-17fc-4863-809d-add6da80b9e7={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"errorMessage\":\"error\",\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))\"}"
    def server = defaultFieldsServer + whichUser.userInFieldCreator + userCriteria.checkFields +userCriteria.projectLead +  mode.atLeastOne + fieldEmpty.no + reverse.no + conditionalValidation.no
    addTransitionFunction(it, 'validator', info ?.isCloud ? cloud : server, functionKey)
}
['currentUser_assignee_reporter_field_reverse'].each {
    def server = defaultFieldsServer + whichUser.current + userCriteria.assignee + userCriteria.reporter +userCriteria.checkFields +  mode.atLeastOne + fieldEmpty.no + reverse.yes + conditionalValidation.no
    // ToDo for cloud fields should be checked and have to change
    def cloud = defaultFieldsCloud + "validator.config-e92924ef-17fc-4863-809d-add6da80b9e7={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"errorMessage\":\"error\",\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))\"}"
    addTransitionFunction(it, 'validator',info ?.isCloud ? cloud : server,  functionKey )
}
['atleastOneCriteria_assigneeField_OrEmpty'].each {
    def server = defaultFieldsServer + whichUser.userInFieldAssignee + userCriteria.checkRoles + userCriteria.projectLead +  mode.atLeastOne + fieldEmpty.yes + reverse.no + conditionalValidation.no
    def cloud = defaultFieldsCloud + "validator.config-e92924ef-17fc-4863-809d-add6da80b9e7={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"errorMessage\":\"error\",\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))\"}"
    addTransitionFunction(it, 'validator', info ?.isCloud ? cloud : server, functionKey)
}

['checkUser_ifConditionTrue'].each {
    def server = defaultFieldsServer + whichUser.current + userCriteria.reporter + userCriteria.checkFields + userCriteria.assignee +  mode.allUsers + fieldEmpty.no + reverse.no + conditionalValidation.yes
    def cloud = defaultFieldsCloud + "validator.config-e92924ef-17fc-4863-809d-add6da80b9e7={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"errorMessage\":\"error\",\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))\"}"
    addTransitionFunction(it, 'validator', info ?.isCloud ? cloud : server, functionKey)
}

createWorkflowScheme()
createProject()
//addProjectRole()
//addProjectRoleActors()

def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'defaultIssue')

[
        'atleastOneCriteria_assigneeField_OrEmpty',
        'checkUser_ifConditionTrue'
].each {
    gint.taskHelper.add([
            [action    : 'transitionIssue', ext: ": WHEN $it field is empty: ",
             expected  : 0,
             parameters: [
                     issue     : {->defaultIssue[]},
                     transition: it,
             ],
            ],
    ])
}
gint.taskHelper.add(
        [action: 'updateIssue',ext: ': set priority High ',sleep: 1000,
         parameters:[issue: {->defaultIssue[]}, priority: 'High']])

['checkUser_ifConditionTrue'].each {
    gint.taskHelper.add(
            [action : 'transitionIssue',ext: ": when condition true and user not satisfies the given criteria_ $it : ",
             expected: -3,
             parameters:[
                     issue: {->defaultIssue[]},
                     transition:  it ,
             ],
             data : [/$errorMessage/],
            ]
    )
}
// update issue so that respective user satisfies all the criteria
gint.taskHelper.add(
        [action: 'assignIssue',ext: ': to current user',sleep: 1000,
         parameters:[issue: {->defaultIssue[]}, userId: user]])

gint.taskHelper.add( action: 'addLabels',ext: 'current user in label', parameters:[ issue : { ->defaultIssue[] }, labels: user])

[
        'currentUser',
        'assignee',
        'reporter',
        'creator'
].collect {
    userCriteria.eachWithIndex { criteria, userFields, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ": WHEN $it IS: " + criteria,
                 expected  : 0,
                 parameters: [
                         issue     : {->defaultIssue[]},
                         transition: it + criteria,
                 ],
                ],
        ])
    }
}

// when specific user(current and user in selected field) satisfies all the selected criteria
[
        'currentUser_assignee_reporter_field',
        'assignee_reporter_field',
        'atleastOneCriteria_currentUser',
        'atleastOneCriteria_assigneeField',
        'atleastOneCriteria_reporterField',
        'atleastOneCriteria_creatorField',
        'checkUser_ifConditionTrue',
].each {
    gint.taskHelper.add(
            [action : 'transitionIssue',ext: ": satisfies all the criteria_ $it : ",
             expected: 0,
             parameters:[
                     issue: {->defaultIssue[]},
                     transition:  it ,
             ],
                    failData: [/$errorMessage/],
            ]
    )
}
[
        'currentUser_assignee_reporter_field_reverse',
].each {
    gint.taskHelper.add(
            [action : 'transitionIssue',ext: ": satisfies all the criteria_ $it : ",
             expected: -3,
             parameters:[
                     issue: {->defaultIssue[]},
                     transition:  it ,
             ],
                    data : [/$errorMessage/],
            ]
    )
}

// change assignee, reporter, projectLead, field value, watcher, user from script to check error

gint.taskHelper.add(
        action: 'updateIssue',
        parameters:[
                issue: {->defaultIssue[]},
                assignee: testUser,
                reporter: testUser,
                labels: testUser
        ]
)

// ToDo this is not working -> removeWatcher
gint.taskHelper.add(action: 'removeWatchers', ext: ': stop current user from watching issue',
        parameters: [
                issue: {-> defaultIssue[]} ]
)

gint.taskHelper.add( action: 'updateProject',parameters: [project: projectName, lead: testUser ] )

[
        'reporter',
        'checkFields',
        'projectLead',
        'assignee'
].collect {
    gint.taskHelper.add(
            [action : 'transitionIssue',ext: ": WHEN current user is NOT $it: ",
             expected: -3,
             parameters:[
                     issue: {->defaultIssue[]},
                     transition: 'currentUser' + it,
             ],
                    data : [/$errorMessage/]
            ]
    )
}

gint.taskHelper.add(
        action: 'updateIssue', ext: ': check user in field assignee',
        parameters:[
                issue: {->defaultIssue[]},
                assignee: user,
                reporter: testUser,
                labels: testUser
        ]
)
[
        'reporter',
        'checkFields',
        'projectLead'
].each{
    gint.taskHelper.add(
            [action : 'transitionIssue',ext: ": WHEN assignee is NOT $it : ",
             expected: -3,
             parameters:[
                     issue: {->defaultIssue[]},
                     transition: 'assignee'+ it ,
             ],
                    data :[ /$errorMessage/ ],
            ]
    )
}
gint.taskHelper.add(
        action: 'updateIssue', ext: ': check user in field reporter',
        parameters:[
                issue: {->defaultIssue[]},
                assignee: testUser,
                reporter: user,
                labels: testUser
        ]
)
[
        'assignee',
        'checkFields',
        'projectLead'
].each{
    gint.taskHelper.add(
            [action : 'transitionIssue',ext: ": WHEN reporter is NOT $it : ",
             expected: -3,
             parameters:[
                     issue: {->defaultIssue[]},
                     transition: 'reporter'+ it ,
             ],
                    data : [/$errorMessage/],
            ]
    )
}
[
        'assignee',
        'checkFields',
        'projectLead'
].each{
    gint.taskHelper.add(
            [action : 'transitionIssue',ext: ": WHEN creator is NOT $it : ",
             expected: -3,
             parameters:[
                     issue: {->defaultIssue[]},
                     transition: 'creator'+ it ,
             ],
                    data:[/$errorMessage/]
            ]
    )
}
// when specific user(current and user in selected field) not satisfies all the selected criteria
[
        'currentUser_assignee_reporter_field',
        'assignee_reporter_field'
].each {
    gint.taskHelper.add(
            [action : 'transitionIssue',ext: ": not satisfies all the criteria_ $it : ",
             expected: -3,
             parameters:[
                     issue: {->defaultIssue[]},
                     transition:  it ,
             ],
                    data:[/$errorMessage/],
            ]
    )
}
[
        'currentUser_assignee_reporter_field_reverse'
].each {
    gint.taskHelper.add(
            [action : 'transitionIssue',ext: ": not satisfies all the criteria_ $it : ",
             expected: 0,
             parameters:[
                     issue: {->defaultIssue[]},
                     transition:  it ,
             ]
            ]
    )
}
[
        'atleastOneCriteria_currentUser',
].each {
    gint.taskHelper.add(
            [action: 'transitionIssue', ext: ": When $it satisfies",
             expected: 0,
             parameters: [
                     issue: {->defaultIssue[]},
                     transition: it
             ]
            ]
    )
}
gint.taskHelper.add(
        [action: 'updateIssue', ext: "least one criteria for current user",
         parameters: [
                 issue: {->defaultIssue[]},
                 assignee: testUser,
                 reporter: testUser,
         ]
        ]
)

[
        'atleastOneCriteria_currentUser',
].each {
    gint.taskHelper.add(
            [action: 'transitionIssue', ext: "When $it not satisfies ",
             expected: -3,
             parameters: [
                     issue: {->defaultIssue[]},
                     transition: it
             ],
                    data:[/$errorMessage/],
            ]
    )
}