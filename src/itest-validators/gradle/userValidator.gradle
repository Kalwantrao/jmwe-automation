buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
// apply from: gint.resourceDirectory +'/src/common/utils.gradle'
apply from: gint.resourceDirectory +'/src/itest-validators/validator.gradle'

//def functionKey = info?.isCloud? 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__UserValidator' : 'com.innovalog.jmwe.jira-misc-workflow-extensions:generic-user-validator'
def functionKey = info?.isCloud? "com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.${testCloudBuild}__UserValidator" : 'com.innovalog.jmwe.jira-misc-workflow-extensions:generic-user-validator'
def errorMessage = "Check user satisfy the given criteria"

def defaultFieldsServer = [
        "errorMessage=$errorMessage",
        "correlationId=",
]
def errorMessageCloud = /"errorMessage":"$errorMessage"/

def whichUser = [
        currentUser :         info?.isCloud? /"fromUserType":"currentUser"/ : ["fromUserType=currentUser"],
        userInFieldAssignee : info?.isCloud? /"fromUserType":"userInField", "userField":"assignee"/ : [ "fromUserType=userInField", "userField=assignee" ],
        userInFieldReporter : info?.isCloud? /"fromUserType":"userInField", "userField":"reporter"/ : [  "fromUserType=userInField", "userField=reporter"],
        userInFieldCreator :  info?.isCloud? /"fromUserType":"userInField", "userField":"creator"/ : [  "fromUserType=userInField", "userField=creator"],
]

def userMode = [
        allUsers :   info?.isCloud? /"conditionMode":"all-user-condition"/ : [ "conditionMode=all-user-condition" ],
        atLeastOne : info?.isCloud? /"conditionMode":"any-user-condition"/ : [ "conditionMode=any-user-condition" ],
]

def fieldEmpty = [
        no : info?.isCloud? /"fieldEmpty":true/ : [ "fieldEmpty=no" ],
        yes : info?.isCloud? /"fieldEmpty":true/ : [ "fieldEmpty=yes" ],
]

def userCriteria = [
        reporter : "isReporter=yes",
        assignee : "isAssignee=yes",
        inFieldAssignee : "userFieldsToCheck=assignee",
        returnFromScript : /usersConditionScript=issue.get('reporter')?.name == "$user"/,
        projectLead : "isProjectLead=yes",
        inAdminRole : "rolesToCheck=$jiraAdminRoleId",
        inAdminGroup : "groupsToCheck=jira-administrators",
        inTestGroup : "groupsToCheck=$testGroup",
        watcher : "isWatcher=yes",
        voter : "isVoter=yes",
        checkUser : "usersToCheck=$currentUserKey",
]

def reverse = [
        no : [ "reverse=" ],
        yes : [ "reverse=yes" ]
]
def currentUserValidatorCriteriaCloud = [
        reporter : /"userCriteria":{"isReporter":true},"expression":"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))"/,
        assignee : /"userCriteria":{"isAssignee":true},"expression":"let selectedUser = user; ((!!user && (false || (!!issue.assignee && user.accountId == issue.assignee.accountId))))"/,
        inFieldAssignee : /"userCriteria":{"userFieldsToCheck":["assignee"]},"expression":"let selectedUser = user; ((!!user && (false || ((!!issue.assignee && issue.assignee.accountId == user.accountId)))))"/,
        returnFromScript : /"userCriteria":{"usersConditionScript":"$returnsReporter"},"expression":"let selectedUser = user; ((!!user && (false || ($returnsReporter))))"/,
        inAdminRole : /"userCriteria":{"rolesToCheck":[$jiraAdminRoleId]},"expression":"let selectedUser = user; ((!!user && (false || ([$jiraAdminRoleId].some(roleId => (new User(user.accountId)).getProjectRoles(project).map(role => role.id).includes(roleId))))))"/,
        inAdminGroup : /"userCriteria":{"groupsToCheck":["$jiraAdminGroupIdCloud"]},"expression":"let selectedUser = user; ((!!user && (false || ([$jiraAdminGroupIdCloud].some(groupId => (new User(user.accountId)).groupIds.includes(groupId))))))"/,
        inTestGroup : /"userCriteria":{"groupsToCheck":["$testGroupIdCloud"]},"expression":"let selectedUser = user; ((!!user && (false || ([$testGroupIdCloud].some(groupId => (new User(user.accountId)).groupIds.includes(groupId))))))"/,
        watcher : /"userCriteria":{"isWatcher":true},"expression":"let selectedUser = user; ((!!user && (false || (!!issue.watchers && issue.watchers.map(watcher => watcher.accountId).includes(user.accountId)))))"/,
]

def userInFieldAssigneeUserValidatorCriteriaCloud = [
        reporter : /"userCriteria":{"isReporter":true},"expression":"let selectedUser = !!issue && !!issue.assignee && issue.assignee; ((!!issue && !!issue.assignee && (false || (!!issue.reporter && issue.assignee.accountId == issue.reporter.accountId))))"/,
        returnFromScript : /"userCriteria":{"usersConditionScript":"$returnsReporter"},"expression":"let selectedUser = !!issue && !!issue.assignee && issue.assignee; ((!!issue && !!issue.assignee && (false || ($returnsReporter))))"/,
        inAdminRole : /"userCriteria":{"rolesToCheck":[$jiraAdminRoleId]},"expression":"let selectedUser = !!issue && !!issue.assignee && issue.assignee; ((!!issue && !!issue.assignee && (false || ([$jiraAdminRoleId].some(roleId => (new User(issue.assignee.accountId)).getProjectRoles(project).map(role => role.id).includes(roleId))))))"/,
        watcher : /"userCriteria":{"isWatcher":true},"expression":"let selectedUser = !!issue && !!issue.assignee && issue.assignee; ((!!issue && !!issue.assignee && (false || (!!issue.watchers && issue.watchers.map(watcher => watcher.accountId).includes(issue.assignee.accountId)))))"/,
        checkUser : /"userCriteria":{"usersToCheck":["$currentUserKey"]},"expression":"let selectedUser = !!issue && !!issue.assignee && issue.assignee; ((!!issue && !!issue.assignee && (false || ([$currentUserKey].some(userId => (issue.assignee.accountId == userId))))))"/,
]

def userInFieldCreatorUserValidatorCriteriaCloud = [
        reporter : /"userCriteria":{"isReporter":true},"expression":"let selectedUser = !!issue && !!issue.creator && issue.creator; ((!!issue && !!issue.creator && (false || (!!issue.reporter && issue.creator.accountId == issue.reporter.accountId))))"/,
        assignee : /"userCriteria":{"isAssignee":true},"expression":"let selectedUser = !!issue && !!issue.creator && issue.creator; ((!!issue && !!issue.creator && (false || (!!issue.assignee && issue.creator.accountId == issue.assignee.accountId))))"/,
        inFieldAssignee : /"userCriteria":{"userFieldsToCheck":["assignee"]},"expression":"let selectedUser = !!issue && !!issue.creator && issue.creator; ((!!issue && !!issue.creator && (false || ((!!issue.assignee && issue.assignee.accountId == issue.creator.accountId)))))"/,
        returnFromScript : /"userCriteria":{"usersConditionScript":"$returnsReporter"},"expression":"let selectedUser = !!issue && !!issue.creator && issue.creator; ((!!issue && !!issue.creator && (false || ($returnsReporter))))"/,
        inAdminRole : /"userCriteria":{"rolesToCheck":[$jiraAdminRoleId]},"expression":"let selectedUser = !!issue && !!issue.creator && issue.creator; ((!!issue && !!issue.creator && (false || ([$jiraAdminRoleId].some(roleId => (new User(issue.creator.accountId)).getProjectRoles(project).map(role => role.id).includes(roleId))))))"/,
        watcher : /"userCriteria":{"isWatcher":true},"expression":"let selectedUser = !!issue && !!issue.creator && issue.creator; ((!!issue && !!issue.creator && (false || (!!issue.watchers && issue.watchers.map(watcher => watcher.accountId).includes(issue.creator.accountId)))))"/,
        checkUser : /"userCriteria":{"usersToCheck":["$currentUserKey"]},"expression":"let selectedUser = !!issue && !!issue.creator && issue.creator; ((!!issue && !!issue.creator && (false || ([$currentUserKey].some(userId => (issue.creator.accountId == userId))))))"/,
]

def userInFieldReporterUserValidatorCriteriaCloud = [
        assignee : /"userCriteria":{"isAssignee":true},"expression":"let selectedUser = !!issue && !!issue.reporter && issue.reporter; ((!!issue && !!issue.reporter && (false || (!!issue.assignee && issue.reporter.accountId == issue.assignee.accountId))))"/,
        inFieldAssignee : /"userCriteria":{"userFieldsToCheck":["assignee"]},"expression":"let selectedUser = !!issue && !!issue.reporter && issue.reporter; ((!!issue && !!issue.reporter && (false || ((!!issue.assignee && issue.assignee.accountId == issue.reporter.accountId)))))"/,
        returnFromScript : /"userCriteria":{"usersConditionScript":"$returnsReporter"},"expression":"let selectedUser = !!issue && !!issue.reporter && issue.reporter; ((!!issue && !!issue.reporter && (false || ($returnsReporter))))"/,
        inAdminRole : /"userCriteria":{"rolesToCheck":[$jiraAdminRoleId]},"expression":"let selectedUser = !!issue && !!issue.reporter && issue.reporter; ((!!issue && !!issue.reporter && (false || ([$jiraAdminRoleId].some(roleId => (new User(issue.reporter.accountId)).getProjectRoles(project).map(role => role.id).includes(roleId))))))"/,
        inAdminGroup : /"userCriteria":{"groupsToCheck":["$jiraAdminGroupIdCloud"]},"expression":"let selectedUser = !!issue && !!issue.reporter && issue.reporter; ((!!issue && !!issue.reporter && (false || ([$jiraAdminGroupIdCloud].some(groupId => (new User(issue.reporter.accountId)).groupIds.includes(groupId))))))"/,
        watcher : /"userCriteria":{"isWatcher":true},"expression":"let selectedUser = !!issue && !!issue.reporter && issue.reporter; ((!!issue && !!issue.reporter && (false || (!!issue.watchers && issue.watchers.map(watcher => watcher.accountId).includes(issue.reporter.accountId)))))"/,
        checkUser : /"userCriteria":{"usersToCheck":["$currentUserKey"]},"expression":"let selectedUser = !!issue && !!issue.reporter && issue.reporter; ((!!issue && !!issue.reporter && (false || ([$currentUserKey].some(userId => (issue.reporter.accountId == userId))))))"/,
]

def currentUserValidatorCriteria = info?.isCloud ? currentUserValidatorCriteriaCloud : userCriteria
def userInFieldAssigneeUserValidatorCriteria = info?.isCloud ? userInFieldAssigneeUserValidatorCriteriaCloud : userCriteria
def userInFieldReporterUserValidatorCriteria = info?.isCloud ? userInFieldReporterUserValidatorCriteriaCloud : userCriteria
def userInFieldCreatorUserValidatorCriteria = info?.isCloud ? userInFieldCreatorUserValidatorCriteriaCloud : userCriteria

currentUserValidatorCriteria.eachWithIndex { criteria, userFields, i ->
    def transition = "verify_current_user_should_be_" + criteria //verify_current_user_should_be_inTestGroup
    def cloud = defaultFieldsCloud.validator + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a={\"problems\":[],$errorMessageCloud,$userMode.allUsers,$whichUser.currentUser,$userFields}"
    def server = defaultFieldsServer + userFields +  whichUser.currentUser + reverse.no + userMode.allUsers + fieldEmpty.no
    addTransitionFunction(transition, 'validator', info?.isCloud ? cloud : server, functionKey )
}

userInFieldAssigneeUserValidatorCriteria.eachWithIndex { criteria, userFields, i ->
    def transition = "verify_user_in_field_assignee_should_be_" + criteria
    def cloud = defaultFieldsCloud.validator + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a={\"problems\":[],$errorMessageCloud,$userMode.allUsers,$whichUser.userInFieldAssignee,$userFields}"
    def server = defaultFieldsServer + userFields + whichUser.userInFieldAssignee + reverse.no + userMode.allUsers + fieldEmpty.no
    addTransitionFunction(transition, 'validator', info?.isCloud ? cloud : server,  functionKey )
}

userInFieldReporterUserValidatorCriteria.eachWithIndex { criteria, userFields, i ->
    def transition = "verify_user_in_field_reporter_should_be_" + criteria
    def cloud = defaultFieldsCloud.validator + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a={\"problems\":[],$errorMessageCloud,$userMode.allUsers,$whichUser.userInFieldReporter,$userFields}"
    def server = defaultFieldsServer + whichUser.userInFieldReporter + userFields + reverse.no + userMode.allUsers + fieldEmpty.no
    addTransitionFunction(transition, 'validator', info?.isCloud ? cloud : server,  functionKey )
}

userInFieldCreatorUserValidatorCriteria.eachWithIndex { criteria, userFields, i ->
    def transition = "verify_user_in_field_creator_should_be_" + criteria
    def cloud = defaultFieldsCloud.validator + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a={\"problems\":[],$errorMessageCloud,$userMode.allUsers,$whichUser.userInFieldCreator,$userFields}"
    def server = defaultFieldsServer + whichUser.userInFieldCreator + userFields + reverse.no + userMode.allUsers + fieldEmpty.no
    addTransitionFunction(transition, 'validator', info?.isCloud ? cloud : server,  functionKey )
}

['verify_current_user_should_be_in_assignee_reporter'].each {
    def server =  defaultFieldsServer + whichUser.currentUser + userCriteria.assignee + userCriteria.reporter + reverse.no + userMode.allUsers + fieldEmpty.no
    def cloud = defaultFieldsCloud.validator + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a={\"problems\":[],$errorMessageCloud,$whichUser.currentUser,$userMode.allUsers,\"userCriteria\":{\"isReporter\":true,\"isAssignee\":true},\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId)&&(!!issue.assignee && user.accountId == issue.assignee.accountId))))\"}"
    addTransitionFunction(it, 'validator',info?.isCloud ? cloud : server,  functionKey )
}

['verify_user_in_field_assignee_should_be_in_reporter'].each {
    def cloud = defaultFieldsCloud.validator + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a={\"problems\":[],$whichUser.userInFieldAssignee,$userMode.allUsers,\"userCriteria\":{\"isReporter\":true},$errorMessageCloud,\"expression\":\"let selectedUser = !!issue && !!issue.assignee && issue.assignee; ((!!issue && !!issue.assignee && (false || (!!issue.reporter && issue.assignee.accountId == issue.reporter.accountId))))\"}"
    def server =  defaultFieldsServer + whichUser.userInFieldAssignee + userCriteria.reporter + reverse.no + userMode.allUsers + fieldEmpty.no
    addTransitionFunction(it, 'validator',info?.isCloud ? cloud : server,  functionKey )
}

['verify_user_in_field_reporter_should_be_in_assignee'].each {
    def cloud = defaultFieldsCloud.validator + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a={\"problems\":[],$whichUser.userInFieldReporter,$userMode.allUsers,\"userCriteria\":{\"isAssignee\":true},$errorMessageCloud,\"expression\":\"let selectedUser = !!issue && !!issue.reporter && issue.reporter; ((!!issue && !!issue.reporter && (false || (!!issue.assignee && issue.reporter.accountId == issue.assignee.accountId))))\"}"
    def server =  defaultFieldsServer + whichUser.userInFieldReporter + userCriteria.assignee + reverse.no + userMode.allUsers + fieldEmpty.no
    addTransitionFunction(it, 'validator',info?.isCloud ? cloud : server,  functionKey )
}

['verify_user_in_field_creator_should_be_in_reporter_assignee'].each {
    def cloud = defaultFieldsCloud.validator + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a={\"problems\":[],$whichUser.userInFieldCreator,$userMode.allUsers,\"userCriteria\":{\"isReporter\":true,\"isAssignee\":true},$errorMessageCloud,\"expression\":\"let selectedUser = !!issue && !!issue.creator && issue.creator; ((!!issue && !!issue.creator && (false || (!!issue.reporter && issue.creator.accountId == issue.reporter.accountId)&&(!!issue.assignee && issue.creator.accountId == issue.assignee.accountId))))\"}"
    def server =  defaultFieldsServer + whichUser.userInFieldCreator + userCriteria.reporter + userCriteria.assignee + reverse.no + userMode.allUsers + fieldEmpty.no
    addTransitionFunction(it, 'validator',info?.isCloud ? cloud : server,  functionKey )
}

['verify_current_user_should_be_in_at_least_one_field_assignee_reporter'].each {
    def cloud = defaultFieldsCloud.validator + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a={\"problems\":[],$whichUser.currentUser,$userMode.atLeastOne,\"userCriteria\":{\"isReporter\":true,\"isAssignee\":true},$errorMessageCloud,\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId)||(!!issue.assignee && user.accountId == issue.assignee.accountId))))\"}"
    def server =  defaultFieldsServer + whichUser.currentUser + userCriteria.assignee + userCriteria.reporter + reverse.no + userMode.atLeastOne + fieldEmpty.no
    addTransitionFunction(it, 'validator', info?.isCloud ? cloud : server, functionKey)
}

['verify_user_in_field_assignee_should_be_in_at_least_one_field_reporter'].each {
    def cloud = defaultFieldsCloud.validator + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a={\"problems\":[],$whichUser.userInFieldAssignee,\"fieldEmpty\":false,$userMode.atLeastOne,\"userCriteria\":{\"isReporter\":true},$errorMessageCloud,\"expression\":\"let selectedUser = !!issue && !!issue.assignee && issue.assignee; ((!!issue && !!issue.assignee && (false || (!!issue.reporter && issue.assignee.accountId == issue.reporter.accountId))))\"}"
    def server =  defaultFieldsServer + whichUser.userInFieldAssignee + userCriteria.reporter + reverse.no + userMode.atLeastOne + fieldEmpty.no
    addTransitionFunction(it, 'validator', info?.isCloud ? cloud : server, functionKey)
}

['verify_user_in_field_reporter_should_be_in_at_least_one_field_assignee'].each {
    def cloud = defaultFieldsCloud.validator + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a={\"problems\":[],$whichUser.userInFieldReporter,$userMode.atLeastOne,\"userCriteria\":{\"isAssignee\":true},$errorMessageCloud,\"expression\":\"let selectedUser = !!issue && !!issue.reporter && issue.reporter; ((!!issue && !!issue.reporter && (false || (!!issue.assignee && issue.reporter.accountId == issue.assignee.accountId))))\",\"fieldEmpty\":false}"
    def server =  defaultFieldsServer + whichUser.userInFieldReporter + userCriteria.assignee + reverse.no + userMode.atLeastOne + fieldEmpty.no
    addTransitionFunction(it, 'validator', info?.isCloud ? cloud : server, functionKey)
}

['verify_user_in_field_creator_should_be_in_at_least_one_field_reporter_assignee'].each {
    def cloud = defaultFieldsCloud.validator + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a={$userMode.atLeastOne,\"expression\":\"let selectedUser = !!issue && !!issue.creator && issue.creator; ((!!issue && !!issue.creator && (false || (!!issue.reporter && issue.creator.accountId == issue.reporter.accountId)||(!!issue.assignee && issue.creator.accountId == issue.assignee.accountId))))\",$whichUser.userInFieldCreator,$errorMessageCloud,\"userCriteria\":{\"isAssignee\":true,\"isReporter\":true},\"problems\":[],\"fieldEmpty\":false}"
    def server =  defaultFieldsServer + whichUser.userInFieldCreator + userCriteria.reporter + userCriteria.assignee + reverse.no + userMode.atLeastOne + fieldEmpty.no
    addTransitionFunction(it, 'validator', info?.isCloud ? cloud : server, functionKey)
}

['currentUser_should_not_be_in_fields_assignee_reporter_field_reverse'].each {
    def cloud = defaultFieldsCloud.validator + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a={\"problems\":[],$whichUser.currentUser,$userMode.atLeastOne,\"userCriteria\":{\"isReporter\":true,\"isAssignee\":true,\"reverse\":true},$errorMessageCloud,\"expression\":\"let selectedUser = user; !((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId)&&(!!issue.assignee && user.accountId == issue.assignee.accountId))))\"}"
    def server =  defaultFieldsServer + whichUser.currentUser + userCriteria.assignee + userCriteria.reporter + reverse.yes + userMode.atLeastOne + fieldEmpty.no
    addTransitionFunction(it, 'validator',info?.isCloud ? cloud : server,  functionKey )
}

['user_in_field_assignee_should_be_in_field_reporter_or_field_empty'].each {
    def cloud = defaultFieldsCloud.validator + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a={\"problems\":[],$whichUser.userInFieldAssignee,\"fieldEmpty\":true,$userMode.atLeastOne,\"userCriteria\":{\"isReporter\":true},$errorMessageCloud,\"expression\":\"let selectedUser = !!issue && issue.assignee; ((!!issue && (!issue.assignee || (!!issue.reporter && issue.assignee.accountId == issue.reporter.accountId))))\"}"
    def server =  defaultFieldsServer + whichUser.userInFieldAssignee + userCriteria.reporter + reverse.no + userMode.atLeastOne + fieldEmpty.yes
    addTransitionFunction(it, 'validator', info?.isCloud ? cloud : server, functionKey)
}

['current_user_should_be_assignee_if_condition_true'].each {
    def cloud = defaultFieldsCloud.validator + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a={\"problems\":[],$whichUser.currentUser,$userMode.allUsers,\"userCriteria\":{\"isAssignee\":true},$errorMessageCloud,\"conditionalValidation\":true,\"conditionalValidationExpression\":\"!!issue.priority && issue.priority.name == 'High'\",\"expression\":\"let selectedUser = user; (!(!!issue.priority && issue.priority.name == 'High') || (!!user && (false || (!!issue.assignee && user.accountId == issue.assignee.accountId))))\"}"
    def server =  defaultFieldsServer + whichUser.currentUser + userCriteria.assignee + reverse.no + userMode.allUsers + fieldEmpty.yes + conditionalValidation.yes
    addTransitionFunction(it, 'validator', info?.isCloud ? cloud : server, functionKey)
}

createWorkflowScheme()
createProject()

def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'defaultIssue')
def currentUser = info?.isCloud ? info?.userDisplayName : user
def listOfUsers = [testUser,user]

// USER_VALIDATOR_TS_26_TC_01_Verify the current user should be reporter
[
        'verify_current_user_should_be_reporter',
        'verify_current_user_should_be_assignee',
        'verify_current_user_should_be_inFieldAssignee',
        'verify_current_user_should_be_returnFromScript',
].each {
    listOfUsers.eachWithIndex { userToCheck, index ->
        def fieldToCheck;
        if (it == 'verify_current_user_should_be_reporter') {
            fieldToCheck = "Reporter"
        } else if (it == 'verify_current_user_should_be_assignee') {
            fieldToCheck = "Assignee"
        } else if (it == 'verify_current_user_should_be_inFieldAssignee') {
            fieldToCheck = "Assignee"
        } else if (it == 'verify_current_user_should_be_returnFromScript') {
            fieldToCheck = "Reporter"
        }
        def expected;
        if (userToCheck == testUser) {
            expected = -3
        } else {
            expected = 0
        }
        gint.taskHelper.add([
                [action    : 'setFieldValue',
                 sleep     : info?.isCloud ? 5000 : 0,
                 ext       : ":Of field_ $fieldToCheck to $userToCheck _before transition issue with _ $it: ",
                 parameters: [
                         issue: { -> defaultIssue[] },
                         field: fieldToCheck,
                         value: userToCheck,
                 ],
                ],
                /*[action      : 'getFieldValue',
                 sleep       : info?.isCloud ? 5000 : 0,
                 ext         : ":Validate that the $userToCheck should be in $fieldToCheck _ before transition issue:$it ",
                 parameters  : [
                         issue: { -> defaultIssue[] },
                         field: fieldToCheck
                 ],
                 finalClosure: { Task task ->
                     def getUserInField = "$task.outData"
                     assert getUserInField.contains(userToCheck)
                 }
                ],*/
                [action    : 'transitionIssue',
                 sleep     : info?.isCloud ? 5000 : 0,
                 ext       : ":USER_VALIDATOR_TS_26_TC_01_Case_01_ $it _when current user is $currentUser and _ $fieldToCheck is $userToCheck: ",
                 expected  : expected,
                 parameters: [
                         issue     : { -> defaultIssue[] },
                         transition: it,
                 ],
                ],
        ])
    }
}

// USER_VALIDATOR_TS_30_TC_05_Verify the current user should be project lead
[
        'verify_current_user_should_be_projectLead',
        'verify_user_in_field_assignee_should_be_projectLead',
        'verify_user_in_field_reporter_should_be_projectLead',
        'verify_user_in_field_creator_should_be_projectLead',

].eachWithIndex { String transition, int i ->
    listOfUsers.eachWithIndex { usersToCheck, idx ->
        def expected;
        if(usersToCheck == testUser){
            expected = -3
        }
        else {
            expected = 0
        }
        def fieldToCheck;
        if(transition == 'verify_user_in_field_assignee_should_be_projectLead'){
            fieldToCheck = "Assignee"
        }
        else if (transition == 'verify_user_in_field_reporter_should_be_projectLead'){
            fieldToCheck = "Reporter"
        }
        else { fieldToCheck = "Assignee" }
        if(!isCloud) {
            gint.taskHelper.add([
                    [action    : 'setFieldValue',
                     sleep: info?.isCloud ? 5000 : 0,
                     ext       : ":Of field_ $fieldToCheck _ to $user _when the user_ $usersToCheck _is project lead:$transition  ",
                     parameters: [
                             issue: { -> defaultIssue[] },
                             field: fieldToCheck,
                             value: user
                     ],
                    ],
                    [action    : 'updateProject',
                     sleep: info?.isCloud ? 5000 : 0,
                     ext       : ":change the project lead to $usersToCheck _to $transition : ",
                     parameters: [
                             project: projectName,
                             lead   : usersToCheck,
                     ],
                    ],
                    [action      : 'transitionIssue',
                     sleep: info?.isCloud ? 5000 : 0,
                     ext         : ":USER_VALIDATOR_TS_3$idx _Case_01_ $transition _when project lead is $usersToCheck and field _ $fieldToCheck is $currentUser : ",
                     expected    : expected,
                     parameters  : [
                             issue     : { -> defaultIssue[] },
                             transition: transition,
                     ],
                    ],
            ])
        }
    }
}

// USER_VALIDATOR_TS_40_TC_01_Verify the user in field assignee should be reporter
[
        'verify_user_in_field_assignee_should_be_reporter',
        'verify_user_in_field_assignee_should_be_returnFromScript',
].each {
    listOfUsers.eachWithIndex { userToCheck, idx ->
        def userInFieldAssignee= user;
        def expected;
        if(userToCheck == testUser){
            expected = -3
        }
        else{
            expected = 0
        }
        def fieldToCheck; if(it == 'verify_user_in_field_assignee_should_be_reporter') {
            fieldToCheck = "Reporter"
        } else if (it == 'verify_user_in_field_assignee_should_be_returnFromScript') {
            fieldToCheck = "Reporter"
        }
        gint.taskHelper.add([
                [action    : 'setFieldValue',
                 sleep     : info?.isCloud ? 5000 : 0,
                 ext       : ":Of assignee to $userInFieldAssignee when user in field $fieldToCheck is $userToCheck _before transition issue with_ $it:",
                 parameters: [
                         issue: { -> defaultIssue[] },
                         field: "Assignee",
                         value: userInFieldAssignee
                 ],
                ],
                [action    : 'setFieldValue',
                 sleep     : info?.isCloud ? 5000 : 0,
                 ext       : ":Of field_ $fieldToCheck _ to $userToCheck _before transition issue with_ $it: ",
                 parameters: [
                         issue: { -> defaultIssue[] },
                         field: fieldToCheck,
                         value: userToCheck
                 ],
                ],
                [action      : 'transitionIssue',
                 sleep       : info?.isCloud ? 5000 : 0,
                 ext         : ":USER_VALIDATOR_TS_40_TC_01_Case_01_ $it _when user in field assignee is $userInFieldAssignee and user in field $fieldToCheck is $userToCheck:",
                 expected    : expected,
                 parameters  : [
                         issue     : { -> defaultIssue[] },
                         transition: it,
                 ],
                ],
        ])
    }
}

// USER_VALIDATOR_TS_40_TC_05_Verify the user in field assignee should be of admin role
// USER_VALIDATOR_TS_40_TC_07_Verify the user in field assignee should specific user_checkUser
// USER_VALIDATOR_TS_40_TC_14_Verify the user in field reporter should be specific user_checkUser
// USER_VALIDATOR_TS_40_TC_13_Verify the user in field reporter should be in admin group
def transitionListForUsersAndGroupsServer = [
        'verify_user_in_field_assignee_should_be_inAdminRole',
        'verify_user_in_field_reporter_should_be_inAdminRole',
        'verify_user_in_field_assignee_should_be_checkUser',
        'verify_user_in_field_reporter_should_be_checkUser',
        'verify_user_in_field_reporter_should_be_inAdminGroup',
        //'verify_user_in_field_creator_should_be_inAdminRole'
]

def transitionListForUsersAndGroupsCloud = [
        'verify_user_in_field_assignee_should_be_inAdminRole',
        'verify_user_in_field_reporter_should_be_inAdminRole',
        //'verify_user_in_field_assignee_should_be_checkUser',
        //'verify_user_in_field_reporter_should_be_checkUser',
        //'verify_user_in_field_reporter_should_be_inAdminGroup'
        //'verify_user_in_field_creator_should_be_inAdminRole',
]

def transitionListForUsersAndGroups = info?.isCloud? transitionListForUsersAndGroupsCloud : transitionListForUsersAndGroupsServer

transitionListForUsersAndGroups.eachWithIndex { transition, index ->
    listOfUsers.collect {
        def expected;
        if(it == testUser){
            expected = -3
        }
        else {
            expected = 0
        }

        def fieldToCheck;

        if (transition == 'verify_user_in_field_assignee_should_be_inAdminRole') {
            fieldToCheck = "Assignee"
        } else if (transition == 'verify_user_in_field_reporter_should_be_inAdminRole') {
            fieldToCheck = "Reporter"
        }
        else if(transition == 'verify_user_in_field_assignee_should_be_checkUser'){
            fieldToCheck = "Assignee"
        }
        else if( transition == 'verify_user_in_field_reporter_should_be_checkUser'){
            fieldToCheck = "Reporter"
        }
        else if( transition == 'verify_user_in_field_reporter_should_be_inAdminGroup'){
            fieldToCheck = "Reporter"
        }
        gint.taskHelper.add([
                [action    : 'setFieldValue',
                 sleep : info?.isCloud? 5000 : 0,
                 ext       : ": Of Field $fieldToCheck to $it _to check _ $transition : ",
                 parameters: [
                         issue: { -> defaultIssue[] },
                         field: fieldToCheck,
                         value: it
                 ],],
                [action    : 'transitionIssue',
                 sleep : info?.isCloud? 5000 : 0,
                 ext       : ":USER_VALIDATOR_TS_40_TC_05_Case_01_ $transition _user in field_ $fieldToCheck is $it not in admin role: ",
                 expected  : expected,
                 parameters: [
                         issue     : { -> defaultIssue[] },
                         transition: transition,
                 ],
                ],
        ])
    }
}

// USER_VALIDATOR_TS_40_TC_08_Verify the user in field reporter should be
[
        'verify_user_in_field_reporter_should_be_assignee',
        'verify_user_in_field_reporter_should_be_inFieldAssignee'
].eachWithIndex { transition, index ->
    listOfUsers.collect {
        def userInfieldReporter = currentUser
        def expected;
        if(it == testUser){
            expected = -3
        }
        else {
            expected = 0
        }
        def fieldToCheck = "Assignee";

        gint.taskHelper.add([
                [action    : 'setFieldValue',
                 sleep : info?.isCloud? 5000 : 0,
                 ext       : ":Of field Reporter $userInfieldReporter _to check $transition _when the user in field_ $fieldToCheck is _$it: ",
                 parameters: [
                         issue: { -> defaultIssue[] },
                         field: "Reporter",
                         value: userInfieldReporter
                 ],
                ],
                [action    : 'setFieldValue',
                 sleep : info?.isCloud? 5000 : 0,
                 ext       : ":Of field_ $fieldToCheck to $it _to check $transition _when user in field _ $fieldToCheck is _$it : ",
                 parameters: [
                         issue: { -> defaultIssue[] },
                         field: fieldToCheck,
                         value: it
                 ],
                ],
                /*[action    : 'getFieldValue',
                 sleep : info?.isCloud? 5000 : 0,
                 ext: ": Of $fieldToCheck should be_ $it _to check $transition : ",
                 parameters: [
                         issue     : { ->defaultIssue[] },
                         field: fieldToCheck,
                 ],
                 finalClosure: {Task task ->
                     assert ("$task.outData").contains(it)
                 }
                ],*/
                [action    : 'transitionIssue',
                 sleep : info?.isCloud? 5000 : 0,
                 ext       : ":USER_VALIDATOR_TS_40_TC_08_Case_01_ to check $transition _when user in field _ $fieldToCheck is _$it: ",
                 expected  : expected,
                 parameters: [
                         issue     : { -> defaultIssue[] },
                         transition: transition,
                 ],
                ],
        ])
    }
}

// USER_VALIDATOR_TS_40_TC_15_Verify the user in field creator should be reporter
[
        'verify_user_in_field_creator_should_be_reporter',
        'verify_user_in_field_creator_should_be_assignee',
        'verify_user_in_field_creator_should_be_inFieldAssignee'
].eachWithIndex { transition, index ->
    listOfUsers.collect {
        def userInFieldCreator = currentUser
        def fieldToCheck;
        if(transition == 'verify_user_in_field_creator_should_be_reporter'){
            fieldToCheck = "Reporter"
        }
        else if(transition == 'verify_user_in_field_creator_should_be_assignee'){
            fieldToCheck = "Assignee"
        }
        else if(transition == 'verify_user_in_field_creator_should_be_inFieldAssignee'){
            fieldToCheck = "Assignee"
        }
        def expected;
        if(it == testUser){
            expected = -3
        }
        else {
            expected = 0
        }
        gint.taskHelper.add([
                [action    : 'setFieldValue',
                 sleep : info?.isCloud? 5000 : 0,
                 ext       : ":Of field _$fieldToCheck to $it _ to check $transition _when user in field creator is $userInFieldCreator and the user in field $fieldToCheck is $it: ",
                 parameters: [
                         issue: { -> defaultIssue[] },
                         field: fieldToCheck,
                         value: it
                 ],
                ],
                /*[action    : 'getFieldValue',
                 sleep : info?.isCloud? 5000 : 0,
                 ext: ": Of $fieldToCheck should be_ $it _to check $transition : ",
                 parameters: [
                         issue     : { ->defaultIssue[] },
                         field: fieldToCheck,
                 ],
                 finalClosure: {Task task ->
                     assert ("$task.outData").contains(it)
                 }
                ],*/
                [action    : 'transitionIssue',
                 sleep : info?.isCloud? 5000 : 0,
                 ext       : ":USER_VALIDATOR_TS_40_TC_15_Case_01_ $transition _when user in field creator is $userInFieldCreator and the user in field $fieldToCheck is $it: ",
                 expected  : expected,
                 parameters: [
                         issue     : { -> defaultIssue[] },
                         transition: transition,
                 ],
                ],
        ])
    }
}

// USER_VALIDATOR_TS_49_TC_01_Verify the mode: all the criteria configured below_current user
[
        'verify_current_user_should_be_in_assignee_reporter'
].each {
    listOfUsers.eachWithIndex { userToCheck, index ->
        def currentUserName = info?.isCloud? info?.userDisplayName : user
        def expected;
        if(userToCheck == testUser) {
            expected = -3
        }
        else { expected = 0 }

        ["Assignee","Reporter"].eachWithIndex { fieldToCheck, idx ->
            gint.taskHelper.add([
                    [action    : 'setFieldValue',
                     sleep     : info?.isCloud ? 5000 : 0,
                     ext       : ":Of field $fieldToCheck _to_ $userToCheck _to check_ $it : ",
                     parameters: [
                             issue: { -> defaultIssue[] },
                             field: fieldToCheck,
                             value: userToCheck
                     ],
                    ],
                    /*[action      : 'getFieldValue',
                     sleep       : info?.isCloud ? 5000 : 0,
                     ext         : ":Of field $fieldToCheck _to_ $userToCheck _to check_ $it : ",
                     parameters  : [
                             issue: { -> defaultIssue[] },
                             field: fieldToCheck,
                     ],
                     finalClosure: { Task task ->
                         assert ("$task.outData").contains(userToCheck)
                     }
                    ],*/
            ]
            )
        }
        gint.taskHelper.add([
                [action      : 'transitionIssue',
                 sleep : info?.isCloud? 5000 : 0,
                 ext         : ":USER_VALIDATOR_TS_49_TC_01_Case_01_ $it _when current user is_$currentUser _and user in fields_ assignee and reporter is_ $userToCheck: ",
                 expected    : expected,
                 parameters  : [
                         issue     : { -> defaultIssue[] },
                         transition: it,
                 ],
                ],
        ])
    }
}

// USER_VALIDATOR_TS_50_TC_01_Verify the mode: at least one of the criteria configured below_ current user
// USER_VALIDATOR_TS_50_TC_04_Verify the mode: at least one of the criteria configured below_ user in field creator

[
        'verify_current_user_should_be_in_at_least_one_field_assignee_reporter',
        'verify_user_in_field_creator_should_be_in_at_least_one_field_reporter_assignee'
].each {
    listOfUsers.eachWithIndex{ userToCheck, int idx ->
        def currentUserName = info?.isCloud? info?.userDisplayName : user
        def expected;
        if(userToCheck == testUser) {
            expected = -3
        }
        else {
            expected = 0
        }
        gint.taskHelper.add([
                [action    : 'setFieldValue',
                 sleep     : info?.isCloud ? 5000 : 0,
                 ext       : ":Of field_ Assignee to $testUser _when user in field reporter is $userToCheck _before transition issue with_ $it : ",
                 parameters: [
                         issue: { -> defaultIssue[] },
                         field: "Assignee",
                         value: testUser
                 ],
                ],
                [action    : 'setFieldValue',
                 sleep     : info?.isCloud ? 5000 : 0,
                 ext       : ":Of reporter to $userToCheck _when before transition issue with_ $it : ",
                 parameters: [
                         issue: { -> defaultIssue[] },
                         field: "Reporter",
                         value: userToCheck
                 ],
                ],
                /*[action      : 'getFieldValue',
                 sleep       : info?.isCloud ? 5000 : 0,
                 ext         : ":Of reporter _should be_ $userToCheck _ $it : ",
                 parameters  : [
                         issue: { -> defaultIssue[] },
                         field: "Reporter",
                 ],
                 finalClosure: { Task task ->
                     assert ("$task.outData").contains(userToCheck)
                 }
                ],*/
                [action    : 'transitionIssue',
                 sleep       : info?.isCloud ? 5000 : 0,
                 ext       : ":USER_VALIDATOR_TS_50_TC_01_Case_01_ $it _when current user is_ $currentUserName and user in field_ assignee is $testUser and user in field reporter is $userToCheck: ",
                 expected  : expected,
                 parameters: [
                         issue     : { -> defaultIssue[] },
                         transition: it,
                 ],
                ],
        ])
    }
}

// USER_VALIDATOR_TS_22_TC_04_Verify for the Reverse condition checkbox under the current user validator configuration page
[
        'currentUser_should_not_be_in_fields_assignee_reporter_field_reverse'
].each {
    listOfUsers.eachWithIndex { userToCheck, index ->
        def currentUserName = info?.isCloud? info?.userDisplayName : user
        def expected;
        if(userToCheck == testUser) {
            expected = 0
        }
        else { expected = -3 }
        ["Assignee","Reporter"].eachWithIndex { fieldToCheck, idx ->
            gint.taskHelper.add([
                    [action    : 'setFieldValue',
                     sleep     : info?.isCloud ? 5000 : 0,
                     ext       : ":Of field $fieldToCheck _to_ $userToCheck _to check_ $it : ",
                     parameters: [
                             issue: { -> defaultIssue[] },
                             field: fieldToCheck,
                             value: userToCheck
                     ],
                    ],
                   /* [action      : 'getFieldValue',
                     sleep       : info?.isCloud ? 5000 : 0,
                     ext         : ":Of field $fieldToCheck _to_ $userToCheck _to check_ $it : ",
                     parameters  : [
                             issue: { -> defaultIssue[] },
                             field: fieldToCheck,
                     ],
                     finalClosure: { Task task ->
                         assert ("$task.outData").contains(userToCheck)
                     }
                    ],*/
            ]
            )
        }
        gint.taskHelper.add([
                [action      : 'transitionIssue',
                 sleep : info?.isCloud? 5000 : 0,
                 ext         : ":USER_VALIDATOR_TS_22_TC_01_Case_01_ $it _when current user is_$currentUser _and user in fields_ assignee and reporter is_ $userToCheck: ",
                 expected    : expected,
                 parameters  : [
                         issue     : { -> defaultIssue[] },
                         transition: it,
                 ],
                ],
        ])
    }
}

// USER_VALIDATOR_TS_51_TC_01_Verify the mode: at least one of the criteria configured below with or the field can be empty oprion.
[
        'user_in_field_assignee_should_be_in_field_reporter_or_field_empty'
].each {
    [user,testUser," "].eachWithIndex { userToCheck, idx ->
        def expected;
        if(userToCheck == testUser ){
            expected = -3
        }
        else {
            expected = 0
        }
        if(!isCloud) {
            gint.taskHelper.add([
                    [action    : 'setFieldValue',
                     ext       : ":Of reporter to $user _ and assignee is $userToCheck _before transition issue with_ $it : ",
                     parameters: [
                             issue: { -> defaultIssue[] },
                             field: "Reporter",
                             value: user
                     ],
                    ],
                    [action    : 'setFieldValue',
                     ext       : ":Of field assignee to $userToCheck _before transition issue with $it when reporter is $user and assignee is $userToCheck: ",
                     parameters: [
                             issue: { -> defaultIssue[] },
                             field: "Assignee",
                             value: userToCheck
                     ],
                    ],
                    [action    : 'transitionIssue',
                     ext       : ":USER_VALIDATOR_TS_51_TC_01_Case_01_ $it _when reporter is $user _and assignee is $userToCheck: ",
                     expected  : expected,
                     parameters: [
                             issue     : { -> defaultIssue[] },
                             transition: it,
                     ],
                    ],
            ])
        }
    }
}

[
        'current_user_should_be_assignee_if_condition_true'
].each {
    ["High","Low"].eachWithIndex { priority, idx ->
        def expected;
        if(priority == "High" ){
            expected = -3
        }
        else {
            expected = 0
        }
            gint.taskHelper.add([
                    [action    : 'setFieldValue',
                     sleep: sleep,
                     ext       : ":Of assignee to $testUser _before transition issue with_ $it :when priority is $priority ",
                     parameters: [
                             issue: { -> defaultIssue[] },
                             field: "Assignee",
                             value: testUser
                     ],
                    ],
                    [action    : 'setFieldValue',
                     sleep: sleep,
                     ext       : ":Of priority to $priority _before transition issue with_ $it:",
                     parameters: [
                             issue: { -> defaultIssue[] },
                             field: "Priority",
                             value: priority
                     ],
                    ],
                    [action    : 'transitionIssue',
                     sleep: sleep,
                     ext       : ":USER_VALIDATOR_TS_51_TC_01_Case_01_ $it _when assignee is $testUser and current user is $user:when priority is $priority ",
                     expected  : expected,
                     parameters: [
                             issue     : { -> defaultIssue[] },
                             transition: it,
                     ],
                    ],
            ])
        }
}

/*
1. Current user should be reporter-
        - Change reporter on transition screen with other user- error
2. Current user should be assignee-
        - Change assignee on transition screen with other user- error
3. Current user should be assignee-
        - Change assignee on transition screen with other user- error
4. Current user should be project lead-
        - Change project lead on transition screen with other user- error
5. Current user in field assignee should be reporter-
        - Change reporter on transition screen with other user- error
6. Current user in field reporter  should be assignee-
        - Change assignee on transition screen with other user- error
7. Current user in field creator should be reporter-
        - Change reporter on transition screen with other user- error
8. Current user in field creator should be assignee-
        - Change assignee on transition screen with other user- error
9. The current user should match at least one of the following criteria:when the testprojectrole is empty:
        - The user is a member of one of these project roles: testprojectrole
10. The current user should match at least one of the following criteria: when testgroup is empty
        - The user is a member of one of these groups: testgroup
11. The current user should match at least one of the following criteria:when user jmwe_qa is Inactive
        - The user is one of the following users: jmwe_qa
12. The current user should match at least one of the following criteria: custom field XOXOUSERPICKER
        - The user belongs to one of these user fields: XOXOUSER    - positive
        - Check when the configured custom field is deleted - negative
13. The current user should match at least one of the following criteria:
        - The user is one of the following users: kalwantrao
        - The user belongs to one of these user fields: XOXOUSER : delete the custom field and transition issue
14  The current user should match all the following criteria:
        - The user is one of the following users: kalwantrao
        - The user belongs to one of these user fields: XOXOUSER : delete the custom field and transition issue
15. Mode : all criterias
    - reporter + testprojectrole
    - reporter + testgroup
    - check after deleting roles and groups and transition issue
16. Mode: at least one
    - reporter + testprojectrole
    - reporter + testgroup
    - check after deleting roles and groups and transition issue

 */
