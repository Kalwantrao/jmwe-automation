buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/utils.gradle'

tearDown()
addWorkflow()

def functionKey = info?.isCloud? functionKey.uservalidatorCloud : functionKey.userValidatorServer
def testUser = info?.isCloud? cloudUser : serverUser
def defaultFieldsServer = [
        "fromUserType=currentUser",
        "conditionMode=all-user-condition",
        "fieldEmpty=no",
        "reverse=", // yes
        "errorMessage=",
        "correlationId=",
]
def userCriteria = [
        reporter : "isReporter=yes",
        assignee : "isAssignee=yes",
        checkFields : "userFieldsToCheck=labels",
        checkScript : "usersConditionScript=issue.get('reporter')?.name",
        projectLead : "isProjectLead=yes",
        checkRoles : "rolesToCheck=$jiraAdminRoleId",
        checkGroup : "groupsToCheck=jira-administrators",
        checkUser : "usersToCheck=$user",
        watcher : "isWatcher=yes",
]

// Configuration for conditions

userCriteria.eachWithIndex { criteria, userFields, i ->
    def fieldsCloud = [
            "validator.id=85e260ad-0ccf-433d-bd76-2fcda1e4bb6d",
            "validator.config-85e260ad-0ccf-433d-bd76-2fcda1e4bb6d={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"isReporter\":true},\"expression\":\"let selectedUser = user; ((!!user && (false || (!!issue.reporter && user.accountId == issue.reporter.accountId))))\"}"
    ]
    def fields =  info?.isCloud ? fieldsCloud : defaultFieldsServer + userFields
    addTransitionFunction('currentUser' + criteria, 'validator',fields, functionKey )
}

userCriteria.eachWithIndex { criteria, userFields, i ->
    defaultFieldsServer[0] = "fromUserType=userInField"
    def fieldsCloud = [
            "validator.id=85e260ad-0ccf-433d-bd76-2fcda1e4bb6d",
            "validator.config-85e260ad-0ccf-433d-bd76-2fcda1e4bb6d={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"groupsToCheck\":[\"cc1adc2d-9df8-4858-ba9e-e2bf571b1124\"]},\"expression\":\"let selectedUser = user; ((!!user && (false || ([\\\"cc1adc2d-9df8-4858-ba9e-e2bf571b1124\\\"].some(groupId => (new User(user.accountId)).groupIds.includes(groupId))))))\"}"
    ]
    def fields = info?.isCloud? fieldsCloud : defaultFieldsServer + "userField=assignee" + userFields
    addTransitionFunction('assignee' + criteria, 'validator',fields,  functionKey )
}

userCriteria.eachWithIndex { criteria, userFields, i ->
    defaultFieldsServer[0] = "fromUserType=userInField"
    def fieldsCloud = [
            "validator.id=85e260ad-0ccf-433d-bd76-2fcda1e4bb6d",
            "validator.config-85e260ad-0ccf-433d-bd76-2fcda1e4bb6d={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"groupsToCheck\":[\"cc1adc2d-9df8-4858-ba9e-e2bf571b1124\"]},\"expression\":\"let selectedUser = user; ((!!user && (false || ([\\\"cc1adc2d-9df8-4858-ba9e-e2bf571b1124\\\"].some(groupId => (new User(user.accountId)).groupIds.includes(groupId))))))\"}"
    ]
    def fields = info?.isCloud? fieldsCloud : defaultFieldsServer + "userField=reporter" + userFields
    addTransitionFunction('reporter' + criteria, 'validator',fields,  functionKey )
}

userCriteria.eachWithIndex { criteria, userFields, i ->
    defaultFieldsServer[0] = "fromUserType=userInField"
    def fieldsCloud = [
            "validator.id=85e260ad-0ccf-433d-bd76-2fcda1e4bb6d",
            "validator.config-85e260ad-0ccf-433d-bd76-2fcda1e4bb6d={\"problems\":[],\"fromUserType\":\"currentUser\",\"conditionMode\":\"all-user-condition\",\"userCriteria\":{\"groupsToCheck\":[\"cc1adc2d-9df8-4858-ba9e-e2bf571b1124\"]},\"expression\":\"let selectedUser = user; ((!!user && (false || ([\\\"cc1adc2d-9df8-4858-ba9e-e2bf571b1124\\\"].some(groupId => (new User(user.accountId)).groupIds.includes(groupId))))))\"}"
    ]
    def fields = info?.isCloud? fieldsCloud : defaultFieldsServer + "userField=creator" + userFields
    addTransitionFunction('creator' + criteria, 'validator',fields,  functionKey )
}

['currentUser_assignee_reporter_field'].each {
    defaultFieldsServer[0] = "fromUserType=currentUser"
    def fields =  defaultFieldsServer + userCriteria.assignee + userCriteria.reporter + userCriteria.checkFields
    addTransitionFunction(it, 'validator',fields,  functionKey )
}
['assignee_reporter_field'].each {
    defaultFieldsServer[0] = "fromUserType=userInField"
    def fields =  defaultFieldsServer + "userField=assignee" + userCriteria.reporter + userCriteria.checkFields
    addTransitionFunction(it, 'validator',fields,  functionKey )
}
['atleastOneCriteria_currentUser'].each {
    defaultFieldsServer[0] = "fromUserType=currentUser"
    defaultFieldsServer[1] = "conditionMode=any-user-condition"
    def fields = info?.isCloud ? '' : defaultFieldsServer + userCriteria.assignee +  userCriteria.reporter + userCriteria.checkFields
    addTransitionFunction(it, 'validator', fields, functionKey)
}
['atleastOneCriteria_assigneeField'].each {
    defaultFieldsServer[0] = "fromUserType=userInField"
    defaultFieldsServer[1] = "conditionMode=any-user-condition"
    def fields = info?.isCloud ? '' : defaultFieldsServer + "userField=assignee" + userCriteria.checkRoles + userCriteria.projectLead
    addTransitionFunction(it, 'validator', fields, functionKey)
}
['atleastOneCriteria_reporterField'].each {
    defaultFieldsServer[0] = "fromUserType=userInField"
    defaultFieldsServer[1] = "conditionMode=any-user-condition"
    def fields = info?.isCloud ? '' : defaultFieldsServer + "userField=reporter" + userCriteria.checkRoles + userCriteria.projectLead
    addTransitionFunction(it, 'validator', fields, functionKey)
}
['atleastOneCriteria_creatorField'].each {
    defaultFieldsServer[0] = "fromUserType=userInField"
    defaultFieldsServer[1] = "conditionMode=any-user-condition"
    def fields = info?.isCloud ? '' : defaultFieldsServer + "userField=creator" + userCriteria.checkFields + userCriteria.projectLead
    addTransitionFunction(it, 'validator', fields, functionKey)
}
['currentUser_assignee_reporter_field_reverse'].each {
    defaultFieldsServer[3] = "reverse=yes"
    defaultFieldsServer[0] = "fromUserType=currentUser"
    def fields =  defaultFieldsServer + userCriteria.assignee + userCriteria.reporter + userCriteria.checkFields
    addTransitionFunction(it, 'validator',fields,  functionKey )
}
['atleastOneCriteria_assigneeField_OrEmpty'].each {
    defaultFieldsServer[0] = "fromUserType=userInField"
    defaultFieldsServer[1] = "conditionMode=any-user-condition"
    defaultFieldsServer[2] = "fieldEmpty=yes"
    def fields = info?.isCloud ? '' : defaultFieldsServer + "userField=assignee" + userCriteria.checkRoles + userCriteria.projectLead
    addTransitionFunction(it, 'validator', fields, functionKey)
}

createWorkflowScheme()
createProject()
//addProjectRole()
//addProjectRoleActors()

def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'defaultIssue')

['atleastOneCriteria_assigneeField_OrEmpty'].each {
    gint.taskHelper.add([
            [action    : 'transitionIssue', ext: ": WHEN $it field is empty: ",
             expected  : 0,
             parameters: [
                     issue     : {->defaultIssue[]},
                     transition: it,
             ],
            ],
    ])
}

// update issue so that respective user satisfies all the criteria
gint.taskHelper.add(
        [action: 'assignIssue',ext: ': to current user',sleep: 1000,
         parameters:[issue: {->defaultIssue[]}, userId: user]])

gint.taskHelper.add( action: 'addLabels',ext: 'current user in label', parameters:[ issue : { ->defaultIssue[] }, labels: user])

['currentUser','assignee','reporter','creator'].collect {
    userCriteria.eachWithIndex { criteria, userFields, i ->
        gint.taskHelper.add([
                [action    : 'transitionIssue', ext: ": WHEN $it IS: " + criteria,
                 expected  : 0,
                 parameters: [
                         issue     : {->defaultIssue[]},
                         transition: it + criteria,
                 ],
                ],
        ])
    }
}

// when specific user(current and user in selected field) satisfies all the selected criteria
[
        'currentUser_assignee_reporter_field',
        'assignee_reporter_field',
        'atleastOneCriteria_currentUser',
        'atleastOneCriteria_assigneeField',
        'atleastOneCriteria_reporterField',
        'atleastOneCriteria_creatorField'
].each {
    gint.taskHelper.add(
            [action : 'transitionIssue',ext: ": satisfies all the criteria_ $it : ",
             expected: 0,
             parameters:[
                     issue: {->defaultIssue[]},
                     transition:  it ,
             ]
            ]
    )
}
['currentUser_assignee_reporter_field_reverse','atleastOneCriteria_assigneeField_OrEmpty'].each {
    gint.taskHelper.add(
            [action : 'transitionIssue',ext: ": satisfies all the criteria_ $it : ",
             expected: -3,
             parameters:[
                     issue: {->defaultIssue[]},
                     transition:  it ,
             ]
            ]
    )
}

// change assignee, reporter, projectLead, field value, watcher, user from script to check error

gint.taskHelper.add(
        action: 'updateIssue',
        parameters:[
                issue: {->defaultIssue[]},
                assignee: testUser,
                reporter: testUser,
                labels: testUser
        ]
)

// ToDo this is not working -> removeWatcher
gint.taskHelper.add(action: 'removeWatchers', ext: ': stop current user from watching issue',
        parameters: [
                issue: {-> defaultIssue[]} ]
)

gint.taskHelper.add( action: 'updateProject',parameters: [project: projectName, lead: testUser ] )

['reporter','checkFields','projectLead','assignee'].collect {
    gint.taskHelper.add(
            [action : 'transitionIssue',ext: ": WHEN current user is NOT $it: ",
             expected: -3,
             parameters:[
                     issue: {->defaultIssue[]},
                     transition: 'currentUser' + it,
             ]
            ]
    )
}

gint.taskHelper.add(
        action: 'updateIssue', ext: ': check user in field assignee',
        parameters:[
                issue: {->defaultIssue[]},
                assignee: user,
                reporter: testUser,
                labels: testUser
        ]
)
['reporter','checkFields','projectLead'].each{
    gint.taskHelper.add(
            [action : 'transitionIssue',ext: ": WHEN assignee is NOT $it : ",
             expected: -3,
             parameters:[
                     issue: {->defaultIssue[]},
                     transition: 'assignee'+ it ,
             ]
            ]
    )
}
gint.taskHelper.add(
        action: 'updateIssue', ext: ': check user in field reporter',
        parameters:[
                issue: {->defaultIssue[]},
                assignee: testUser,
                reporter: user,
                labels: testUser
        ]
)
['assignee','checkFields','projectLead'].each{
    gint.taskHelper.add(
            [action : 'transitionIssue',ext: ": WHEN reporter is NOT $it : ",
             expected: -3,
             parameters:[
                     issue: {->defaultIssue[]},
                     transition: 'reporter'+ it ,
             ]
            ]
    )
}
['assignee','checkFields','projectLead'].each{
    gint.taskHelper.add(
            [action : 'transitionIssue',ext: ": WHEN creator is NOT $it : ",
             expected: -3,
             parameters:[
                     issue: {->defaultIssue[]},
                     transition: 'creator'+ it ,
             ]
            ]
    )
}
// when specific user(current and user in selected field) not satisfies all the selected criteria
['currentUser_assignee_reporter_field','assignee_reporter_field'].each {
    gint.taskHelper.add(
            [action : 'transitionIssue',ext: ": not satisfies all the criteria_ $it : ",
             expected: -3,
             parameters:[
                     issue: {->defaultIssue[]},
                     transition:  it ,
             ]
            ]
    )
}
['currentUser_assignee_reporter_field_reverse'].each {
    gint.taskHelper.add(
            [action : 'transitionIssue',ext: ": not satisfies all the criteria_ $it : ",
             expected: 0,
             parameters:[
                     issue: {->defaultIssue[]},
                     transition:  it ,
             ]
            ]
    )
}
[
        'atleastOneCriteria_currentUser',
].each {
    gint.taskHelper.add(
            [action: 'transitionIssue', ext: ": When $it satisfies",
             expected: 0,
             parameters: [
                     issue: {->defaultIssue[]},
                     transition: it
             ]
            ]
    )
}
gint.taskHelper.add(
        [action: 'updateIssue', ext: "least one criteria for current user",
         parameters: [
                 issue: {->defaultIssue[]},
                 assignee: testUser,
                 reporter: testUser,
         ]
        ]
)

[
        'atleastOneCriteria_currentUser',
].each {
    gint.taskHelper.add(
            [action: 'transitionIssue', ext: "When $it not satisfies ",
             expected: -3,
             parameters: [
                     issue: {->defaultIssue[]},
                     transition: it
             ]
            ]
    )
}
