buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/itest-validators/validator.gradle'

def STATUS_ID_TODO = getStatusId("To Do")
def STATUS_ID_INPROGRESS = getStatusId("In Progress")
def STATUS_ID_INREVIEW = getStatusId("In Review")
def STATUS_ID_DONE = getStatusId("Done")

def ToDo = {->STATUS_ID_TODO.getAt(0).trim()}
def InProgress = {->STATUS_ID_INPROGRESS.getAt(0).trim()}
def InReview = {->STATUS_ID_INREVIEW.getAt(0).trim()}
def Done = {->STATUS_ID_DONE.getAt(0).trim()}

def BUG_ISSUE_TYPE_ID = getIssueTypeId("Bug")
def STORY_ISSUE_TYPE_ID = getIssueTypeId("Story")
def TASK_ISSUE_TYPE_ID = getIssueTypeId("Task")
def EPIC_ISSUE_TYPE_ID = getIssueTypeId("Epic")
def INITIATIVE_ISSUE_TYPE_ID = getIssueTypeId("Initiative")
def SUBTASK_ISSUE_TYPE_ID = getIssueTypeId("Sub-task")

def BugIssueType = {->BUG_ISSUE_TYPE_ID.getAt(0).trim()}
def StoryIssueType = {->STORY_ISSUE_TYPE_ID.getAt(0).trim()}
def TaskIssueType = {->TASK_ISSUE_TYPE_ID.getAt(0).trim()}
def EpicIssueType = {->EPIC_ISSUE_TYPE_ID.getAt(0).trim()}
def InitiativeIssueType = {->INITIATIVE_ISSUE_TYPE_ID.getAt(0).trim()}
def SubtaskIssueType = {->SUBTASK_ISSUE_TYPE_ID.getAt(0).trim()}

def issueType = [
        any : [ "selectedIssueType=" ],
        story : [ "selectedIssueType=$StoryIssueType" ],
        task : [ "selectedIssueType=$TaskIssueType" ],
        bug : [ "selectedIssueType=$BugIssueType" ],
        initiative: [ "selectedIssueType=$InitiativeIssueType" ]
]
def linkedIssuesStatusMode = [
        all : [ "conditionMode=all-in-status" ],
        one : ["conditionMode=one-in-status"],
        none : ["conditionMode=none-in-status"],
        oneNot : ["conditionMode=one-not-in-status"]
]

def statuses = [
        inProgress : ["issue_statuses=$InProgress" ],
        toDo : [ "issue_statuses=$ToDo" ],
        inReview : [ "issue_statuses=$InReview" ],
        done : [ "issue_statuses=$Done" ],
        allExceptToDo : ["issue_statuses=$InProgress,$InReview,$Done"]
]

project.ext.allRelatedIssuesStatusValidator = [
        subtask : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"jira_subtask_link\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"allInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.subtasks.every(linkedIssue => config.statusIds.includes(linkedIssue.status.id))\"}",
        parentIssue : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"jira_subtask_link\",\"selectedLinkTypeDirection\":\"inward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"allInStatus\",\"statusIds\":[$InProgress],\"expression\":\"!issue.parent || [issue.parent].every(linkedIssue => config.statusIds.includes(linkedIssue.status.id))\"}",
        issueBelongsToEpic : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"Epic-Story Link\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"allInStatus\",\"statusIds\":[$InProgress],\"expression\":\"!issue.stories || issue.stories.every(linkedIssue => config.statusIds.includes(linkedIssue.status.id))\"}",
        epicOfTheCurrentIssue : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"Epic-Story Link\",\"selectedLinkTypeDirection\":\"inward\",\"selectedIssueTypeId\":null,\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"allInStatus\",\"statusIds\":[$InProgress],\"expression\":\"!issue.epic || [issue.epic].every(linkedIssue => config.statusIds.includes(linkedIssue.status.id))\"}",
        linkByAnyLink : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"*\",\"selectedLinkTypeDirection\":\"*\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"allInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.every(issueLink => config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByBlock : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10000\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"allInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.every(issueLink => issueLink.type.id != 10000 || issueLink.direction != 'outward' && issueLink.type.inward != issueLink.type.outward || config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByisBlockedBy : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10000\",\"selectedLinkTypeDirection\":\"inward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"allInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.every(issueLink => issueLink.type.id != 10000 || issueLink.direction != 'inward' && issueLink.type.inward != issueLink.type.outward || config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByClones : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10001\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"allInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.every(issueLink => issueLink.type.id != 10001 || issueLink.direction != 'outward' && issueLink.type.inward != issueLink.type.outward || config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByIsClonedBy : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10001\",\"selectedLinkTypeDirection\":\"inward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"allInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.every(issueLink => issueLink.type.id != 10001 || issueLink.direction != 'inward' && issueLink.type.inward != issueLink.type.outward || config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByDuplicates : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10002\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"allInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.every(issueLink => issueLink.type.id != 10002 || issueLink.direction != 'outward' && issueLink.type.inward != issueLink.type.outward || config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByIsDuplicatedBy : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10002\",\"selectedLinkTypeDirection\":\"inward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"allInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.every(issueLink => issueLink.type.id != 10002 || issueLink.direction != 'inward' && issueLink.type.inward != issueLink.type.outward || config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByRelatesTo : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10003\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"allInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.every(issueLink => issueLink.type.id != 10003 || issueLink.direction != 'outward' && issueLink.type.inward != issueLink.type.outward || config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
]

project.ext.atLeastOneRelatedIssuesStatusValidator = [
        subtask : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"jira_subtask_link\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"oneInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.subtasks.some(linkedIssue => config.statusIds.includes(linkedIssue.status.id))\"}",
        issueBelongsToEpic : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"Epic-Story Link\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"oneInStatus\",\"statusIds\":[$InProgress],\"expression\":\"!issue.stories || issue.stories.some(linkedIssue => config.statusIds.includes(linkedIssue.status.id))\"}",
        linkByAnyLink : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"*\",\"selectedLinkTypeDirection\":\"*\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"oneInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.some(issueLink => config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByBlock : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10000\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"oneInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.some(issueLink => issueLink.type.id != 10000 || issueLink.direction != 'outward' && issueLink.type.inward != issueLink.type.outward || config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByisBlockedBy : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10000\",\"selectedLinkTypeDirection\":\"inward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"oneInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.some(issueLink => issueLink.type.id != 10000 || issueLink.direction != 'inward' && issueLink.type.inward != issueLink.type.outward || config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByClones : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10001\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"oneInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.some(issueLink => issueLink.type.id != 10001 || issueLink.direction != 'outward' && issueLink.type.inward != issueLink.type.outward || config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByIsClonedBy : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10001\",\"selectedLinkTypeDirection\":\"inward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"oneInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.some(issueLink => issueLink.type.id != 10001 || issueLink.direction != 'inward' && issueLink.type.inward != issueLink.type.outward || config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByDuplicates : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10002\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"oneInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.some(issueLink => issueLink.type.id != 10002 || issueLink.direction != 'outward' && issueLink.type.inward != issueLink.type.outward || config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByIsDuplicatedBy : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10002\",\"selectedLinkTypeDirection\":\"inward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"oneInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.some(issueLink => issueLink.type.id != 10002 || issueLink.direction != 'inward' && issueLink.type.inward != issueLink.type.outward || config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByRelatesTo : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10003\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"oneInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.some(issueLink => issueLink.type.id != 10003 || issueLink.direction != 'outward' && issueLink.type.inward != issueLink.type.outward || config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
]

project.ext.noRelatedIssuesStatusValidator = [
        subtask : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"jira_subtask_link\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"noneInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.subtasks.every(linkedIssue => !config.statusIds.includes(linkedIssue.status.id))\"}",
        parentIssue : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"jira_subtask_link\",\"selectedLinkTypeDirection\":\"inward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"noneInStatus\",\"statusIds\":[$InProgress],\"expression\":\"!issue.parent || [issue.parent].every(linkedIssue => !config.statusIds.includes(linkedIssue.status.id))\"}",
        issueBelongsToEpic : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"Epic-Story Link\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"noneInStatus\",\"statusIds\":[$InProgress],\"expression\":\"!issue.stories || issue.stories.every(linkedIssue => !config.statusIds.includes(linkedIssue.status.id))\"}",
        epicOfTheCurrentIssue : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"Epic-Story Link\",\"selectedLinkTypeDirection\":\"inward\",\"selectedIssueTypeId\":null,\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"noneInStatus\",\"statusIds\":[$InProgress],\"expression\":\"!issue.epic || [issue.epic].every(linkedIssue => !config.statusIds.includes(linkedIssue.status.id))\"}",
        linkByAnyLink : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"*\",\"selectedLinkTypeDirection\":\"*\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"noneInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.every(issueLink => !config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByBlock : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10000\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"noneInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.every(issueLink => issueLink.type.id != 10000 || issueLink.direction != 'outward' && issueLink.type.inward != issueLink.type.outward || !config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByisBlockedBy : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10000\",\"selectedLinkTypeDirection\":\"inward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"noneInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.every(issueLink => issueLink.type.id != 10000 || issueLink.direction != 'inward' && issueLink.type.inward != issueLink.type.outward || !config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByClones : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10001\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"noneInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.every(issueLink => issueLink.type.id != 10001 || issueLink.direction != 'outward' && issueLink.type.inward != issueLink.type.outward || !config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByIsClonedBy : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10001\",\"selectedLinkTypeDirection\":\"inward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"noneInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.every(issueLink => issueLink.type.id != 10001 || issueLink.direction != 'inward' && issueLink.type.inward != issueLink.type.outward || !config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByDuplicates : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10002\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"noneInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.every(issueLink => issueLink.type.id != 10002 || issueLink.direction != 'outward' && issueLink.type.inward != issueLink.type.outward || !config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByIsDuplicatedBy : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10002\",\"selectedLinkTypeDirection\":\"inward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"noneInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.every(issueLink => issueLink.type.id != 10002 || issueLink.direction != 'inward' && issueLink.type.inward != issueLink.type.outward || !config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByRelatesTo : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10003\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"noneInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.every(issueLink => issueLink.type.id != 10003 || issueLink.direction != 'outward' && issueLink.type.inward != issueLink.type.outward || !config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
]

project.ext.atLeastOneNotRelatedIssuesStatusValidator = [
        subtask : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"jira_subtask_link\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"oneNotInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.subtasks.some(linkedIssue => !config.statusIds.includes(linkedIssue.status.id))\"}",
        issueBelongsToEpic : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"Epic-Story Link\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"oneNotInStatus\",\"statusIds\":[$InProgress],\"expression\":\"!issue.stories || issue.stories.some(linkedIssue => !config.statusIds.includes(linkedIssue.status.id))\"}",
        linkByAnyLink : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"*\",\"selectedLinkTypeDirection\":\"*\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"oneNotInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.some(issueLink => !config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByBlock : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10000\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"oneNotInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.some(issueLink => issueLink.type.id != 10000 || issueLink.direction != 'outward' && issueLink.type.inward != issueLink.type.outward || !config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByisBlockedBy : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10000\",\"selectedLinkTypeDirection\":\"inward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"oneNotInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.some(issueLink => issueLink.type.id != 10000 || issueLink.direction != 'inward' && issueLink.type.inward != issueLink.type.outward || !config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByClones : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10001\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"oneNotInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.some(issueLink => issueLink.type.id != 10001 || issueLink.direction != 'outward' && issueLink.type.inward != issueLink.type.outward || !config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByIsClonedBy : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10001\",\"selectedLinkTypeDirection\":\"inward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"oneNotInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.some(issueLink => issueLink.type.id != 10001 || issueLink.direction != 'inward' && issueLink.type.inward != issueLink.type.outward || !config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByDuplicates : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10002\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"oneNotInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.some(issueLink => issueLink.type.id != 10002 || issueLink.direction != 'outward' && issueLink.type.inward != issueLink.type.outward || !config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByIsDuplicatedBy : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10002\",\"selectedLinkTypeDirection\":\"inward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"oneNotInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.some(issueLink => issueLink.type.id != 10002 || issueLink.direction != 'inward' && issueLink.type.inward != issueLink.type.outward || !config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
        linkByRelatesTo : "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"10003\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check linked issues status\",\"validatorMode\":\"oneNotInStatus\",\"statusIds\":[$InProgress],\"expression\":\"issue.links.some(issueLink => issueLink.type.id != 10003 || issueLink.direction != 'outward' && issueLink.type.inward != issueLink.type.outward || !config.statusIds.includes(issueLink.linkedIssue.status.id))\"}",
]


def allRelatedIssuesStatus = info?.isCloud ? allRelatedIssuesStatusValidator : relatedIssue
def atLeastOneRelatedIssuesStatus = info?.isCloud ? atLeastOneRelatedIssuesStatusValidator : relatedIssue
def noRelatedIssuesStatus = info?.isCloud ? noRelatedIssuesStatusValidator : relatedIssue
def atLeastOneNotRelatedIssuesStatus = info?.isCloud ? atLeastOneNotRelatedIssuesStatusValidator : relatedIssue

allRelatedIssuesStatus.remove("currentIssue")
atLeastOneRelatedIssuesStatus.remove("currentIssue")
noRelatedIssuesStatus.remove("currentIssue")
atLeastOneNotRelatedIssuesStatus.remove("currentIssue")

def functionKey = info?.isCloud? "com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.${testCloudBuild}__LinkedIssueStatusValidator" : 'com.innovalog.jmwe.jira-misc-workflow-extensions:linkedissuesstatus-validator'
def errorMessage = "Check linked issues status"

allRelatedIssuesStatus.eachWithIndex { linkedIssue, fieldValues, i ->
    def transition = "verify_status_in_progress_of_all_issues_which_are_" + linkedIssue
    def cloud = fieldValues
    def server = ["errorMessage=$errorMessage" , issueType.any , "selectedLinkType=$fieldValues" , linkedIssuesStatusMode.all , statuses.inProgress]
    addTransitionFunction(transition, 'validator', info?.isCloud? cloud : server, functionKey)
}

atLeastOneRelatedIssuesStatus.eachWithIndex { linkedIssue, fieldValues, i ->
    def transition = 'verify_status_in_progress_of_at_least_one_issues_which_is_' + linkedIssue
    def cloud = fieldValues
    def server = ["errorMessage=$errorMessage" , issueType.any , "selectedLinkType=$fieldValues" , linkedIssuesStatusMode.one , statuses.inProgress]
    addTransitionFunction( transition, 'validator', info?.isCloud? cloud : server, functionKey)
}

noRelatedIssuesStatus.eachWithIndex { linkedIssue, fieldValues, i ->
    def transition = 'verify_status_in_progress_none_of_the_issues_which_are_' + linkedIssue
    def cloud =  fieldValues
    def server = ["errorMessage=$errorMessage" , issueType.any , "selectedLinkType=$fieldValues" , linkedIssuesStatusMode.none , statuses.inProgress]
    addTransitionFunction(transition, 'validator', info?.isCloud? cloud : server, functionKey)
}

atLeastOneNotRelatedIssuesStatus.eachWithIndex { linkedIssue, fieldValues, i ->
    def transition = 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_' + linkedIssue
    def cloud =  fieldValues
    def server = ["errorMessage=$errorMessage" , issueType.any , "selectedLinkType=$fieldValues" , linkedIssuesStatusMode.oneNot , statuses.inProgress]
    addTransitionFunction(transition, 'validator', info?.isCloud? cloud : server, functionKey)
}

['verify_the_issue_type_dropdwn_Task'].each {
    def server = ["errorMessage=$errorMessage" , issueType.task , "selectedLinkType=$relatedIssue.parentIssue" , linkedIssuesStatusMode.all , statuses.inProgress]
    def cloud = "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"jira_subtask_link\",\"selectedLinkTypeDirection\":\"inward\",\"selectedIssueTypeId\":\"$TaskIssueType\",\"validatorMode\":\"allInStatus\",\"statusIds\":[$InProgress],\"expression\":\"!issue.parent || [issue.parent].every(linkedIssue => linkedIssue.issueType.id != $TaskIssueType || config.statusIds.includes(linkedIssue.status.id))\"}"
    addTransitionFunction(it, 'validator', info?.isCloud? cloud : server, functionKey)
}

['verify_the_issue_type_dropdwn_Story'].each {
    def server = ["errorMessage=$errorMessage" , issueType.story , "selectedLinkType=$relatedIssue.parentIssue" , linkedIssuesStatusMode.all , statuses.inProgress]
    def cloud = "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"jira_subtask_link\",\"selectedLinkTypeDirection\":\"inward\",\"selectedIssueTypeId\":\"$StoryIssueType\",\"validatorMode\":\"allInStatus\",\"statusIds\":[$InProgress],\"expression\":\"!issue.parent || [issue.parent].every(linkedIssue => linkedIssue.issueType.id != $StoryIssueType || config.statusIds.includes(linkedIssue.status.id))\"}"
    addTransitionFunction(it, 'validator', info?.isCloud? cloud : server, functionKey)
}

[
        'select_multiple_statuses'
].each {
    def server = ["errorMessage=$errorMessage" , issueType.any , "selectedLinkType=$relatedIssue.subtask" , linkedIssuesStatusMode.all , statuses.allExceptToDo]
    def cloud =  "{\"conditionalValidation\":false,\"selectedLinkTypeId\":\"jira_subtask_link\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"validatorMode\":\"allInStatus\",\"statusIds\":[$InProgress,$InReview,$Done],\"expression\":\"issue.subtasks.every(linkedIssue => config.statusIds.includes(linkedIssue.status.id))\"}"
    addTransitionFunction( it, 'validator', info?.isCloud? cloud : server, functionKey )
}

['verify_the_condition_groovy_expression'].each {
    def server = ["errorMessage=$errorMessage" , issueType.any , "selectedLinkType=$relatedIssue.subtask" , conditionalValidation.yes , linkedIssuesStatusMode.all , statuses.inProgress]
    def cloud =  "{\"conditionalValidation\":true,\"conditionalValidationExpression\":\"!!issue.priority && issue.priority.name == 'High'\",\"selectedLinkTypeId\":\"jira_subtask_link\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"validatorMode\":\"allInStatus\",\"statusIds\":[$InProgress],\"expression\":\"!(!!issue.priority && issue.priority.name == 'High') || (issue.subtasks.every(linkedIssue => config.statusIds.includes(linkedIssue.status.id)))\"}"
    addTransitionFunction(it, 'validator', info?.isCloud? cloud : server, functionKey)
}

createWorkflowScheme()
createProject()

def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { ->parent[] }], 'Sub-task')
def epic = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic')
def issueBelongsToEpic = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {->epic[]}], 'BelongsToEpic')
def initiative = createIssue([type: 'Initiative', summary: 'JMWE_Issue'], 'Initiative')
def epic_initiative = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative')
def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def toIssueLink = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'toIssueLink')
def jqlIssue = createIssue([type: 'Task', summary: 'JQL_ISSUE'], 'jqlIssue')

def defaultParentIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'defaultParentIssue')
def defaultSubtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> defaultParentIssue[] }], 'defaultSubtask')

gint.taskHelper.add(
        action: 'updateIssue', ext: " : parent initiative and child epic: ",
        parameters :[ issue: {->epic_initiative[]}, field: "Parent Link", value: {-> initiative[] } ]
)

[
        'select_multiple_statuses'
].collect {
    gint.taskHelper.add([
            [action      : 'getFieldValue',
             ext         : ": Validate that the status of subtask should not be In Progress _$it:",
             sleep       : info?.isCloud? 3000 : 0,
             parameters  : [
                     issue: { -> defaultSubtask[] },
                     field: "Status",
             ],
             finalClosure: { Task task ->
                 def output = "$task.outData"
                 assert output.contains("To Do")
             }
            ],
            [action    : 'transitionIssue',
             ext       : ": RELATED_ISSUES_STATUS_VALIDATOR_check_ $it _when subtask of the current issue in one of the selected status_TODO:",
             expected  : -3,
             sleep     : info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { -> defaultParentIssue[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext       : ": transition issue to IN_PROGRESS to verify_ $it :",
             expected  : 0,
             sleep     : info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { -> defaultSubtask[] },
                     transition: "In Progress",
             ]
            ],
            [action      : 'getFieldValue',
             ext         : ": Validate that the status of subtask should be In Progress _$it:",
             sleep       : info?.isCloud? 3000 : 0,
             parameters  : [
                     issue: { -> defaultSubtask[] },
                     field: "Status",
             ],
             finalClosure: { Task task ->
                 def output = "$task.outData"
                 assert output.contains("In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext       : ": RELATED_ISSUES_STATUS_VALIDATOR_check_ $it _when subtask of the current issue in one of the selected status_In Progress:",
             expected  : 0,
             sleep     : info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { -> defaultParentIssue[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext       : ": transition issue to IN REVIEW_ $it _:",
             expected  : 0,
             sleep     : info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { -> defaultSubtask[] },
                     transition: "In Review",
             ]
            ],
            [action      : 'getFieldValue',
             ext         : ": Validate that the status of subtask should be In Review _$it:",
             sleep       : info?.isCloud? 3000 : 0,
             parameters  : [
                     issue: { -> defaultSubtask[] },
                     field: "Status",
             ],
             finalClosure: { Task task ->
                 def output = "$task.outData"
                 assert output.contains("In Review")
             }
            ],
            [action    : 'transitionIssue',
             ext       : ": RELATED_ISSUES_STATUS_VALIDATOR_check_ $it _when subtask of the current issue in one of the selected status_In Review:",
             expected  : 0,
             sleep     : info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { -> defaultParentIssue[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext       : ": transition issue to TODO after verifying_ $it _:",
             expected  : 0,
             sleep     : info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { -> defaultSubtask[] },
                     transition: "To Do",
             ]
            ],
    ])
}

// RELATED_ISSUES_STATUS_VALIDATOR_TC_10-Verify Sub_task of the current issue
[
        'verify_status_in_progress_of_all_issues_which_are_subtask',
        'verify_status_in_progress_of_at_least_one_issues_which_is_subtask',
        'verify_status_in_progress_none_of_the_issues_which_are_subtask',
        'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_subtask'
].collect {
    def expectedError;
    def expectedSuccess;
    if(it == 'verify_status_in_progress_of_all_issues_which_are_subtask'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_subtask'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_subtask'){
        expectedError = 0;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_subtask'){
        expectedError = 0;
    }
    if(it == 'verify_status_in_progress_of_all_issues_which_are_subtask'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_subtask'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_subtask'){
        expectedSuccess = -3;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_subtask'){
        expectedSuccess = -3;
    }
    gint.taskHelper.add([
            [action    : 'getFieldValue',
             ext: ": Validate that the status of subtask should not be In Progress _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->subtask[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert !output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TC_10_Case_01- $it _when Sub_task of the current issue not in selected status:",
             expected: expectedError,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->parent[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to IN_PROGRESS to verify_ $it _when Sub_task of the current issue in selected status:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->subtask[] },
                     transition: "In Progress",
             ]
            ],
            [action    : 'getFieldValue',
             ext: ": Validate that the status of subtask should be In Progress _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->subtask[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TC_10_Case_02- $it _when Sub_task of the current issue not in selected status:",
             expected: expectedSuccess,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->parent[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to TO_DO after verifying_ $it _when Sub_task of the current issue in selected status:",
             expected: 0,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->subtask[] },
                     transition: "To Do",
             ]
            ],
    ])
}

// RELATED_ISSUES_STATUS_VALIDATOR_TC_11-Verify Sub_task of the current issue
[
        'verify_status_in_progress_of_all_issues_which_are_parentIssue',
        'verify_status_in_progress_none_of_the_issues_which_are_parentIssue',
].collect {
    def expectedError;
    def expectedSuccess;
    if(it == 'verify_status_in_progress_of_all_issues_which_are_parentIssue'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_parentIssue'){
        expectedError = 0;
    }
    if(it == 'verify_status_in_progress_of_all_issues_which_are_parentIssue'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_parentIssue'){
        expectedSuccess = -3;
    }

    gint.taskHelper.add([
            [action    : 'getFieldValue',
             ext: ": Validate that the status of parent issue of subtask should not be In Progress _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->parent[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert !output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TC_11_Case_01- $it _when parent issue of the current subtask not in selected status:",
             expected: expectedError,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->subtask[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to IN_PROGRESS before_ $it _when parent issue of the current subtask in selected status:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->parent[] },
                     transition: "In Progress",
             ]
            ],
            [action    : 'getFieldValue',
             ext: ": Validate that the status of parent issue of subtask should be In Progress _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->parent[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TC_11_Case_02- $it _when parent issue of the current subtask in selected status:",
             expected: expectedSuccess,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->subtask[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to TO_DO after_ $it _when parent issue of the current subtask in selected status:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->parent[] },
                     transition: "To Do",
             ]
            ],
    ])
}

// RELATED_ISSUES_STATUS_VALIDATOR_TC_13-Verify Issues that belong to the current Epic
[
        'verify_status_in_progress_of_all_issues_which_are_issueBelongsToEpic',
        'verify_status_in_progress_of_at_least_one_issues_which_is_issueBelongsToEpic',
        'verify_status_in_progress_none_of_the_issues_which_are_issueBelongsToEpic',
        'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_issueBelongsToEpic'
].collect {
    def expectedError;
    def expectedSuccess;
    if(it == 'verify_status_in_progress_of_all_issues_which_are_issueBelongsToEpic'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_issueBelongsToEpic'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_issueBelongsToEpic'){
        expectedError = 0;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_issueBelongsToEpic'){
        expectedError = 0;
    }
    if(it == 'verify_status_in_progress_of_all_issues_which_are_issueBelongsToEpic'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_issueBelongsToEpic'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_issueBelongsToEpic'){
        expectedSuccess = -3;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_issueBelongsToEpic'){
        expectedSuccess = -3;
    }
    gint.taskHelper.add([
            [action    : 'getFieldValue',
             ext: ": Validate that the status of issue Belongs To Epic should not be In Progress _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->issueBelongsToEpic[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert !output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TC_13_Case_01- $it _when Issues that belong to the current Epic _not in selected status:",
             expected: expectedError,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->epic[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to IN_PROGRESS before_ $it _when Issues that belong to the current Epic _in selected status:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->issueBelongsToEpic[] },
                     transition: "In Progress",
             ]
            ],
            [action    : 'getFieldValue',
             ext: ": Validate that the status of issue Belongs To Epic should be In Progress _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->issueBelongsToEpic[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TC_13_Case_02- $it _when Issues that belong to the current Epic _in selected status:",
             expected: expectedSuccess,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->epic[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to TO_DO after_ $it _when Issues that belong to the current Epic _in selected status:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->issueBelongsToEpic[] },
                     transition: "To Do",
             ]
            ],
    ])
}

// RELATED_ISSUES_STATUS_VALIDATOR_TC_15-Verify Epic of the current issue
[
        'verify_status_in_progress_of_all_issues_which_are_epicOfTheCurrentIssue',
        'verify_status_in_progress_none_of_the_issues_which_are_epicOfTheCurrentIssue',
].collect {
    def expectedError;
    def expectedSuccess;
    if(it == 'verify_status_in_progress_of_all_issues_which_are_epicOfTheCurrentIssue'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_epicOfTheCurrentIssue'){
        expectedError = 0;
    }
    if(it == 'verify_status_in_progress_of_all_issues_which_are_epicOfTheCurrentIssue'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_epicOfTheCurrentIssue'){
        expectedSuccess = -3;
    }

    gint.taskHelper.add([
            [action    : 'getFieldValue',
             ext: ": Validate that the status of issue epic Of The Current Issue should not be In Progress _$it:",
             sleep: info?.isCloud? 5000 : 0,
             parameters: [
                     issue     : { ->epic[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert !output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TC_15_Case_01- $it _when Epic of the current issue _not in selected status:",
             expected: expectedError,
             sleep: info?.isCloud? 5000 : 0,
             parameters: [
                     issue     : { ->issueBelongsToEpic[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to IN_PROGRESS before_ $it _when Epic of the current issue _in selected status:",
             expected: 0,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->epic[] },
                     transition: "In Progress",
             ]
            ],
            [action    : 'getFieldValue',
             ext: ": Validate that the status of issue epic Of The Current Issue should be In Progress _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->epic[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TC_15_Case_02- $it _when Epic of the current issue _in selected status:",
             expected: expectedSuccess,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->issueBelongsToEpic[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to TO_DO after_ $it _when Epic of the current issue _in selected status:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->epic[] },
                     transition: "To Do",
             ]
            ],
    ])
}

// RELATED_ISSUES_STATUS_VALIDATOR_TC_16-Verify Issue link to the current issue through any link type
[
        'verify_status_in_progress_of_all_issues_which_are_linkByAnyLink',
        'verify_status_in_progress_of_at_least_one_issues_which_is_linkByAnyLink',
        'verify_status_in_progress_none_of_the_issues_which_are_linkByAnyLink',
        'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByAnyLink'
].collect {
    def expectedError;
    def expectedSuccess;
    if(it == 'verify_status_in_progress_of_all_issues_which_are_linkByAnyLink'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_linkByAnyLink'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_linkByAnyLink'){
        expectedError = 0;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByAnyLink'){
        expectedError = 0;
    }
    if(it == 'verify_status_in_progress_of_all_issues_which_are_linkByAnyLink'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_linkByAnyLink'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_linkByAnyLink'){
        expectedSuccess = -3;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByAnyLink'){
        expectedSuccess = -3;
    }
    gint.taskHelper.add([
            [action: 'linkIssue',
             sleep: info?.isCloud? 3000 : 0,
             ext: ": check 1 issue linked by any link type to check _$it:",
             parameters: [
                     issue: {->issueLinks[]},
                     toIssue: {-> toIssueLink[]},
                     link: 'blocks'
             ]
            ],
            [action: 'getLinkList',
             sleep: info?.isCloud? 3000 : 0,
             ext: ": validate the issue has 1 issue linked through any link for _ $it: ",
             parameters: [
                     issue: {->issueLinks[]},
                     outputType: "Text",
                     columns: "Link Description",
                     select: "Link Description:blocks"
             ],
             finalClosure: { Task task ->
                 def output = "$task.outData"
                 assert output.contains("1 links for issue")
             }
            ],
            [action    : 'getFieldValue',
             ext: ": Validate that the status of issue link by any link should not be In Progress _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert !output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TC_16_Case_01- $it _when Issue link to the current issue throgh any link type _not in selected status:",
             expected: expectedError,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->issueLinks[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to IN_PROGRESS before_ $it _when Issue link to the current issue throgh any link type _in selected status:",
             expected: 0,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     transition: "In Progress",
             ]
            ],
            [action    : 'getFieldValue',
             ext: ": Validate that the status of issue link by any link should be In Progress _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TC_16_Case_02- $it _when Issue link to the current issue throgh any link type _in selected status:",
             expected: expectedSuccess,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->issueLinks[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to TO_DO after_ $it _when Issue link to the current issue throgh any link type _in selected status:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     transition: "To Do",
             ]
            ],
            [action: 'deleteLink',
             ext: ": by blocks link type after checking _$it:",
             parameters: [
                     issue: {->issueLinks[]},
                     toIssue: {-> toIssueLink[]},
                     link: 'blocks'
             ]
            ],
    ])
}

// RELATED_ISSUES_STATUS_VALIDATOR_TS_18_TC_01-Verify Issue link to the current issue through any link type
[
        'verify_status_in_progress_of_all_issues_which_are_linkByBlock',
        'verify_status_in_progress_of_at_least_one_issues_which_is_linkByBlock',
        'verify_status_in_progress_none_of_the_issues_which_are_linkByBlock',
        'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByBlock'
].collect {
    def expectedError;
    def expectedSuccess;
    if(it == 'verify_status_in_progress_of_all_issues_which_are_linkByBlock'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_linkByBlock'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_linkByBlock'){
        expectedError = 0;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByBlock'){
        expectedError = 0;
    }
    if(it == 'verify_status_in_progress_of_all_issues_which_are_linkByBlock'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_linkByBlock'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_linkByBlock'){
        expectedSuccess = -3;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByBlock'){
        expectedSuccess = -3;
    }
    gint.taskHelper.add([
            [action: 'linkIssue',
             sleep: info?.isCloud? 3000 : 0,
             ext: ": by blocks link type to check _$it:",
             parameters: [
                     issue: {->issueLinks[]},
                     toIssue: {-> toIssueLink[]},
                     link: 'blocks'
             ]
            ],
            [action: 'getLinkList',
             sleep: info?.isCloud? 3000 : 0,
             ext: ": validate the issue has 1 issue linked through specific link for _ $it: ",
             parameters: [
                     issue: {->issueLinks[]},
                     outputType: "Text",
                     columns: "Link Description",
                     select: "Link Description:blocks"
             ],
             finalClosure: { Task task ->
                 def output = "$task.outData"
                 assert output.contains("1 links for issue")
             }
            ],
            [action    : 'getFieldValue',
             ext: ": Validate that the status of issue link by blocks link should not be In Progress _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert !output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TS_18_TC_01_Case_01- $it _when Issue link to the current issue throgh any link type _not in selected status:",
             expected: expectedError,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->issueLinks[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to IN_PROGRESS before_ $it _when Issue link to the current issue through blocks link type _in selected status:",
             expected: 0,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     transition: "In Progress",
             ]
            ],
            [action    : 'getFieldValue',
             ext: ": Validate that the status of issue link by blocks link should be In Progress _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TS_18_TC_01_Case_02- $it _when Issue link to the current issue through blocks link type _in selected status:",
             expected: expectedSuccess,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->issueLinks[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to TO_DO after_ $it _when Issue link to the current issue through blocks link type _in selected status:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     transition: "To Do",
             ]
            ],
            [action: 'deleteLink',
             ext: ": by blocks link type after checking _$it:",
             parameters: [
                     issue: {->issueLinks[]},
                     toIssue: {-> toIssueLink[]},
                     link: 'blocks'
             ]
            ],
    ])
}

// RELATED_ISSUES_STATUS_VALIDATOR_TS_18_TC_02-Verify Issue link to the current issue through is blocked by link type
[
        'verify_status_in_progress_of_all_issues_which_are_linkByisBlockedBy',
        'verify_status_in_progress_of_at_least_one_issues_which_is_linkByisBlockedBy',
        'verify_status_in_progress_none_of_the_issues_which_are_linkByisBlockedBy',
        'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByisBlockedBy'
].collect {
    def expectedError;
    def expectedSuccess;
    if(it == 'verify_status_in_progress_of_all_issues_which_are_linkByisBlockedBy'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_linkByisBlockedBy'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_linkByisBlockedBy'){
        expectedError = 0;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByisBlockedBy'){
        expectedError = 0;
    }
    if(it == 'verify_status_in_progress_of_all_issues_which_are_linkByisBlockedBy'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_linkByisBlockedBy'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_linkByisBlockedBy'){
        expectedSuccess = -3;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByisBlockedBy'){
        expectedSuccess = -3;
    }
    gint.taskHelper.add([
            [action: 'linkIssue', ext: ": by blocks link type to check _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue: {->toIssueLink[]},
                     toIssue: {-> issueLinks[]},
                     link: 'blocks'
             ]
            ],
            [action: 'getLinkList',
             sleep: info?.isCloud? 3000 : 0,
             ext: ": validate that issue has 1 issue linked to it through is blocked by link type for _ $it: ",
             parameters: [
                     issue: {-> issueLinks[]},
                     outputType: "Text",
                     columns: "Link Description",
                     select: "Link Description:is blocked by"
             ],
             finalClosure: { Task task ->
                 def output = "$task.outData"
                 assert output.contains("1 links for issue")
             }
            ],
            [action    : 'getFieldValue',
             ext: ": Validate that the status of issue link by is blocked by link should not be In Progress _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->issueLinks[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert !output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TS_18_TC_02_Case_01- $it _when Issue link to the current issue throgh is blocked by link type _not in selected status:",
             expected: expectedError,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->issueLinks[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to IN_PROGRESS before_ $it _when Issue link to the current issue through is blocked by link type _in selected status:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     transition: "In Progress",
             ]
            ],
            [action    : 'getFieldValue',
             ext: ": Validate that the status of issue link by is blocked by link should be In Progress _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TS_18_TC_02_Case_02- $it _when Issue link to the current issue through is blocked by link type _in selected status:",
             expected: expectedSuccess,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->issueLinks[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to TO_DO after_ $it _when Issue link to the current issue through is blocked by link type _in selected status:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     transition: "To Do",
             ]
            ],
            [action: 'deleteLink',
             ext: ": by blocks link type after checking _$it:",
             parameters: [
                     issue: {->toIssueLink[]},
                     toIssue: {-> issueLinks[]},
                     link: 'blocks'
             ]
            ],
    ])
}

// RELATED_ISSUES_STATUS_VALIDATOR_TS_18_TC_03-Verify Issue link to the current issue through clones link type
[
        'verify_status_in_progress_of_all_issues_which_are_linkByClones',
        'verify_status_in_progress_of_at_least_one_issues_which_is_linkByClones',
        'verify_status_in_progress_none_of_the_issues_which_are_linkByClones',
        'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByClones'
].collect {
    def expectedError;
    def expectedSuccess;
    if(it == 'verify_status_in_progress_of_all_issues_which_are_linkByClones'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_linkByClones'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_linkByClones'){
        expectedError = 0;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByClones'){
        expectedError = 0;
    }
    if(it == 'verify_status_in_progress_of_all_issues_which_are_linkByClones'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_linkByClones'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_linkByClones'){
        expectedSuccess = -3;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByClones'){
        expectedSuccess = -3;
    }
    def clonesLink = info?.isCloud ? 'clones' : clonesLinkType
    gint.taskHelper.add([
            [action: 'linkIssue', ext: ": by clones link type to check _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue: {->issueLinks[]},
                     toIssue: {-> toIssueLink[]},
                     link: clonesLink
             ]
            ],
            [action: 'getLinkList',
             sleep: info?.isCloud? 3000 : 0,
             ext: ": validate that issue has 1 issue linked to it through clones link type for _ $it: ",
             parameters: [
                     issue: {-> issueLinks[]},
                     outputType: "Text",
                     columns: "Link Description",
                     select: "Link Description:$clonesLink"
             ],
             finalClosure: { Task task ->
                 def output = "$task.outData"
                 assert output.contains("1 links for issue")
             }
            ],
            [action    : 'getFieldValue',
             ext: ": Validate that the status of issue link by clones link should not be In Progress _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert !output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TS_18_TC_03_Case_01- $it _when Issue link to the current issue throgh clones link type _not in selected status:",
             expected: expectedError,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->issueLinks[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to IN_PROGRESS before_ $it _when Issue link to the current issue through clones link type _in selected status:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     transition: "In Progress",
             ]
            ],
            [action    : 'getFieldValue',
             ext: ": Validate that the status of issue link by clones link should be In Progress _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TS_18_TC_03_Case_02- $it _when Issue link to the current issue through clones link type _in selected status:",
             expected: expectedSuccess,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->issueLinks[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to TO_DO after_ $it _when Issue link to the current issue through clones link type _in selected status:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     transition: "To Do",
             ]
            ],
            [action: 'deleteLink',
             ext: ": by clones link type after checking _$it:",
             parameters: [
                     issue: {->issueLinks[]},
                     toIssue: {-> toIssueLink[]},
                     link: clonesLink
             ]
            ],
    ])
}

// RELATED_ISSUES_STATUS_VALIDATOR_TS_18_TC_04-Verify Issue link to the current issue through by is cloned by link type
[
        'verify_status_in_progress_of_all_issues_which_are_linkByIsClonedBy',
        'verify_status_in_progress_of_at_least_one_issues_which_is_linkByIsClonedBy',
        'verify_status_in_progress_none_of_the_issues_which_are_linkByIsClonedBy',
        'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByIsClonedBy'
].collect {
    def expectedError;
    def expectedSuccess;
    if(it == 'verify_status_in_progress_of_all_issues_which_are_linkByIsClonedBy'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_linkByIsClonedBy'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_linkByIsClonedBy'){
        expectedError = 0;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByIsClonedBy'){
        expectedError = 0;
    }
    if(it == 'verify_status_in_progress_of_all_issues_which_are_linkByIsClonedBy'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_linkByIsClonedBy'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_linkByIsClonedBy'){
        expectedSuccess = -3;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByIsClonedBy'){
        expectedSuccess = -3;
    }
    def clonesLink = info?.isCloud ? 'clones' : clonesLinkType
    gint.taskHelper.add([
            [action: 'linkIssue',
             sleep: info?.isCloud? 3000 : 0,
             ext: ": by is cloned by link type to check _$it:",
             parameters: [
                     issue: {-> toIssueLink[]},
                     toIssue: {-> issueLinks[]},
                     link: clonesLink
             ]
            ],
            [action: 'getLinkList',
             sleep: info?.isCloud? 3000 : 0,
             ext: ": validate that issue has 1 issue linked to it through is $clonesLink by link type for _ $it: ",
             parameters: [
                     issue: {-> toIssueLink[]},
                     outputType: "Text",
                     columns: "Link Description",
                     select: "Link Description:$clonesLink"
             ],
             finalClosure: { Task task ->
                 def output = "$task.outData"
                 assert output.contains("1 links for issue")
             }
            ],
            [action    : 'getFieldValue',
             ext: ": Validate that the status of issue link by is cloned by link should not be In Progress _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert !output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TS_18_TC_04_Case_01- $it _when Issue link to the current issue throgh is cloned by link type _not in selected status:",
             expected: expectedError,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->issueLinks[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to IN_PROGRESS before_ $it _when Issue link to the current issue through is cloned by link type _in selected status:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     transition: "In Progress",
             ]
            ],
            [action    : 'getFieldValue',
             ext: ": Validate that the status of issue link by is cloned by link should be In Progress _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TS_18_TC_04_Case_02- $it _when Issue link to the current issue through is cloned by link type _in selected status:",
             expected: expectedSuccess,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->issueLinks[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to TO_DO after_ $it _when Issue link to the current issue through is cloned by link type _in selected status:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     transition: "To Do",
             ]
            ],
            [action: 'deleteLink',
             ext: ": by clones link type after checking _$it:",
             parameters: [
                     issue: {->toIssueLink[]},
                     toIssue: {-> issueLinks[]},
                     link: clonesLink
             ]
            ],
    ])
}

// RELATED_ISSUES_STATUS_VALIDATOR_TS_18_TC_05-Verify Issue link to the current issue through by duplicates link type
[
        'verify_status_in_progress_of_all_issues_which_are_linkByDuplicates',
        'verify_status_in_progress_of_at_least_one_issues_which_is_linkByDuplicates',
        'verify_status_in_progress_none_of_the_issues_which_are_linkByDuplicates',
        'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByDuplicates'
].collect {
    def expectedError;
    def expectedSuccess;
    if(it == 'verify_status_in_progress_of_all_issues_which_are_linkByDuplicates'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_linkByDuplicates'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_linkByDuplicates'){
        expectedError = 0;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByDuplicates'){
        expectedError = 0;
    }
    if(it == 'verify_status_in_progress_of_all_issues_which_are_linkByDuplicates'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_linkByDuplicates'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_linkByDuplicates'){
        expectedSuccess = -3;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByDuplicates'){
        expectedSuccess = -3;
    }
    gint.taskHelper.add([
            [action: 'linkIssue',
             sleep: info?.isCloud? 3000 : 0,
             ext: ": by duplicates link type to check _$it:",
             parameters: [
                     issue: {-> issueLinks[]},
                     toIssue: {-> toIssueLink[]},
                     link: 'duplicates'
             ]
            ],
            [action: 'getLinkList',
             sleep: info?.isCloud? 3000 : 0,
             ext: ": validate that issue has 1 issue linked to it through duplicates link type for _ $it: ",
             parameters: [
                     issue: {->issueLinks[]},
                     outputType: "Text",
                     columns: "Link Description",
                     select: "Link Description:duplicates"
             ],
             finalClosure: { Task task ->
                 def output = "$task.outData"
                 assert output.contains("1 links for issue")
             }
            ],
            [action    : 'getFieldValue',
             ext: ": Validate that the status of issue link by duplicates link should not be In Progress _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert !output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TS_18_TC_05_Case_01- $it _when Issue link to the current issue throgh duplicates link type _not in selected status:",
             expected: expectedError,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->issueLinks[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to IN_PROGRESS before_ $it _when Issue link to the current issue through duplicates link type _in selected status:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     transition: "In Progress",
             ]
            ],
            [action    : 'getFieldValue',
             ext: ": Validate that the status of issue link by duplicates link should be In Progress _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TS_18_TC_05_Case_02- $it _when Issue link to the current issue through duplicates link type _in selected status:",
             expected: expectedSuccess,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->issueLinks[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to TO_DO after_ $it _when Issue link to the current issue through duplicates link type _in selected status:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     transition: "To Do",
             ]
            ],
            [action: 'deleteLink',
             ext: ": by duplicates link type after checking _$it:",
             parameters: [
                     issue: {->issueLinks[]},
                     toIssue: {-> toIssueLink[]},
                     link: 'duplicates'
             ]
            ],

    ])
}

// RELATED_ISSUES_STATUS_VALIDATOR_TS_18_TC_06-Verify Issue link to the current issue through by is duplicated by link type
[
        'verify_status_in_progress_of_all_issues_which_are_linkByIsDuplicatedBy',
        'verify_status_in_progress_of_at_least_one_issues_which_is_linkByIsDuplicatedBy',
        'verify_status_in_progress_none_of_the_issues_which_are_linkByIsDuplicatedBy',
        'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByIsDuplicatedBy'
].collect {
    def expectedError;
    def expectedSuccess;
    if(it == 'verify_status_in_progress_of_all_issues_which_are_linkByIsDuplicatedBy'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_linkByIsDuplicatedBy'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_linkByIsDuplicatedBy'){
        expectedError = 0;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByIsDuplicatedBy'){
        expectedError = 0;
    }
    if(it == 'verify_status_in_progress_of_all_issues_which_are_linkByIsDuplicatedBy'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_linkByIsDuplicatedBy'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_linkByIsDuplicatedBy'){
        expectedSuccess = -3;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByIsDuplicatedBy'){
        expectedSuccess = -3;
    }
    gint.taskHelper.add([
            [action: 'linkIssue',
             sleep: info?.isCloud? 3000 : 0,
             ext: ": by duplicates link type to check _$it:",
             parameters: [
                     issue: {-> toIssueLink[]},
                     toIssue: {-> issueLinks[]},
                     link: 'duplicates'
             ]
            ],
            [action: 'getLinkList',
             sleep: info?.isCloud? 3000 : 0,
             ext: ": validate that issue has 1 issue linked to it through is duplicated by link type for _ $it: ",
             parameters: [
                     issue: {->issueLinks[]},
                     outputType: "Text",
                     columns: "Link Description",
                     select: "Link Description:is duplicated by"
             ],
             finalClosure: { Task task ->
                 def output = "$task.outData"
                 assert output.contains("1 links for issue")
             }
            ],
            [action    : 'getFieldValue',
             ext: ": Validate that the status of issue link by is duplicated by link should not be In Progress _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert !output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TS_18_TC_06_Case_01- $it _when Issue link to the current issue through is duplicated by link type _not in selected status:",
             expected: expectedError,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->issueLinks[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to IN_PROGRESS before_ $it _when Issue link to the current issue through is duplicated by link type _in selected status:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     transition: "In Progress",
             ]
            ],
            [action    : 'getFieldValue',
             ext: ": Validate that the status of issue link by is duplicated by link should be In Progress _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TS_18_TC_06_Case_02- $it _when Issue link to the current issue through is duplicated by link type _in selected status:",
             expected: expectedSuccess,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->issueLinks[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to TO_DO after_ $it _when Issue link to the current issue through is duplicated by link type _in selected status:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     transition: "To Do",
             ]
            ],
            [action: 'deleteLink',
             ext: ": by duplicates link type after checking _$it:",
             parameters: [
                     issue: {->toIssueLink[]},
                     toIssue: {-> issueLinks[]},
                     link: 'duplicates'
             ]
            ],
    ])
}

// RELATED_ISSUES_STATUS_VALIDATOR_TS_18_TC_07-Verify Issue link to the current issue through by relates to link type
[
        'verify_status_in_progress_of_all_issues_which_are_linkByRelatesTo',
        'verify_status_in_progress_of_at_least_one_issues_which_is_linkByRelatesTo',
        'verify_status_in_progress_none_of_the_issues_which_are_linkByRelatesTo',
        'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByRelatesTo'
].collect {
    def expectedError;
    def expectedSuccess;
    if(it == 'verify_status_in_progress_of_all_issues_which_are_linkByRelatesTo'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_linkByRelatesTo'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_linkByRelatesTo'){
        expectedError = 0;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByRelatesTo'){
        expectedError = 0;
    }
    if(it == 'verify_status_in_progress_of_all_issues_which_are_linkByRelatesTo'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_linkByRelatesTo'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_linkByRelatesTo'){
        expectedSuccess = -3;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_linkByRelatesTo'){
        expectedSuccess = -3;
    }
    gint.taskHelper.add([
            [action: 'linkIssue',
             sleep: info?.isCloud? 3000 : 0,
             ext: ": by relates to link type to check _$it:",
             parameters: [
                     issue: {-> issueLinks[]},
                     toIssue: {-> toIssueLink[]},
                     link: 'relates to'
             ]
            ],
            [action: 'getLinkList',
             sleep: info?.isCloud? 3000 : 0,
             ext: ": validate that issue has 1 issue linked to it through relates to link type for _ $it: ",
             parameters: [
                     issue: {->issueLinks[]},
                     outputType: "Text",
                     columns: "Link Description",
                     select: "Link Description:relates to"
             ],
             finalClosure: { Task task ->
                 def output = "$task.outData"
                 assert output.contains("1 links for issue")
             }
            ],
            [action    : 'getFieldValue',
             ext: ": Validate that the status of issue link by relates to link should not be In Progress _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert !output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TS_18_TC_07_Case_01- $it _when Issue link to the current issue through is relates to link type _not in selected status:",
             expected: expectedError,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->issueLinks[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to IN_PROGRESS before_ $it _when Issue link to the current issue through relates to link type _in selected status:",
             expected: 0,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     transition: "In Progress",
             ]
            ],
            [action    : 'getFieldValue',
             ext: ": Validate that the status of issue link by relates to link should be In Progress _$it:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     field: "Status",
             ],
             finalClosure: {Task task ->
                 def output = "$task.outData"
                 assert output.contains("Status  . . . . . . . . . . . : In Progress")
             }
            ],
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TS_18_TC_07_Case_02- $it _when Issue link to the current issue through relates to link type _in selected status:",
             expected: expectedSuccess,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->issueLinks[] },
                     transition: it,
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": transition issue to TO_DO after_ $it _when Issue link to the current issue through relates to link type _in selected status:",
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->toIssueLink[] },
                     transition: "To Do",
             ]
            ],
            [action: 'deleteLink',
             ext: ": by relates To link type after checking _$it:",
             parameters: [
                     issue: {->issueLinks[]},
                     toIssue: {-> toIssueLink[]},
                     link: 'relates to'
             ]
            ],
    ])
}

// RELATED_ISSUES_STATUS_VALIDATOR_TC_19-Verify Child issues of the current issue in the Portfolio hierarchy
[
        'verify_status_in_progress_of_all_issues_which_are_childPortfolio',
        'verify_status_in_progress_of_at_least_one_issues_which_is_childPortfolio',
        'verify_status_in_progress_none_of_the_issues_which_are_childPortfolio',
        'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_childPortfolio'
].collect {
    def expectedError;
    def expectedSuccess;
    if(it == 'verify_status_in_progress_of_all_issues_which_are_childPortfolio'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_childPortfolio'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_childPortfolio'){
        expectedError = 0;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_childPortfolio'){
        expectedError = 0;
    }
    if(it == 'verify_status_in_progress_of_all_issues_which_are_childPortfolio'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_childPortfolio'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_childPortfolio'){
        expectedSuccess = -3;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_childPortfolio'){
        expectedSuccess = -3;
    }
    if(!isCloud) {
        gint.taskHelper.add([
                [action      : 'getFieldValue',
                 ext         : ": Validate that the status of issue which is child issue in portfolio hierarchy should not be In Progress _$it:",
                 sleep       : info?.isCloud? 3000 : 0,
                 parameters  : [
                         issue: { -> epic_initiative[] },
                         field: "Status",
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert !output.contains("Status  . . . . . . . . . . . : In Progress")
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ": RELATED_ISSUES_STATUS_VALIDATOR_TC_19_Case_01- $it _when Child issues of the current issue in the Portfolio hierarchy _not in selected status:",
                 expected  : expectedError,
                 sleep     : info?.isCloud? 3000 : 0,
                 parameters: [
                         issue     : { -> initiative[] },
                         transition: it,
                 ]
                ],
                [action    : 'transitionIssue',
                 ext       : ": transition issue to IN_PROGRESS before_ $it _when Child issues of the current issue in the Portfolio hierarchy _in selected status:",
                 sleep     : info?.isCloud? 3000 : 0,
                 parameters: [
                         issue     : { -> epic_initiative[] },
                         transition: "In Progress",
                 ]
                ],
                [action      : 'getFieldValue',
                 ext         : ": Validate that the status of issue which is child issue in portfolio hierarchy should be In Progress _$it:",
                 sleep       : info?.isCloud? 3000 : 0,
                 parameters  : [
                         issue: { -> epic_initiative[] },
                         field: "Status",
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("Status  . . . . . . . . . . . : In Progress")
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ": RELATED_ISSUES_STATUS_VALIDATOR_TC_19_Case_02- $it _when Child issues of the current issue in the Portfolio hierarchy _in selected status:",
                 expected  : expectedSuccess,
                 sleep     : info?.isCloud? 3000 : 0,
                 parameters: [
                         issue     : { -> initiative[] },
                         transition: it,
                 ]
                ],
                [action    : 'transitionIssue',
                 ext       : ": transition issue to TO_DO after_ $it _when Child issues of the current issue in the Portfolio hierarchy_in selected status:",
                 sleep     : info?.isCloud? 3000 : 0,
                 parameters: [
                         issue     : { -> epic_initiative[] },
                         transition: "To Do",
                 ]
                ],
        ])
    }
}

// RELATED_ISSUES_STATUS_VALIDATOR_TC_20-Verify Parent issues of the current issue in the Portfolio hierarchy
[
        'verify_status_in_progress_of_all_issues_which_are_parentPortfolio',
        'verify_status_in_progress_none_of_the_issues_which_are_parentPortfolio',
].collect {
    def expectedError;
    def expectedSuccess;
    if(it == 'verify_status_in_progress_of_all_issues_which_are_parentPortfolio'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_parentPortfolio'){
        expectedError = 0;
    }
    if(it == 'verify_status_in_progress_of_all_issues_which_are_parentPortfolio'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_parentPortfolio'){
        expectedSuccess = -3;
    }
    if(!isCloud) {
        gint.taskHelper.add([
                [action      : 'getFieldValue',
                 ext         : ": Validate that the status of issue which is parent issue in portfolio hierarchy should not be In Progress _$it:",
                 sleep       : info?.isCloud? 3000 : 0,
                 parameters  : [
                         issue: { -> initiative[] },
                         field: "Status",
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert !output.contains("Status  . . . . . . . . . . . : In Progress")
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ": RELATED_ISSUES_STATUS_VALIDATOR_TC_20_Case_01- $it _when Parent issues of the current issue in the Portfolio hierarchy _not in selected status:",
                 expected  : expectedError,
                 sleep     : info?.isCloud? 3000 : 0,
                 parameters: [
                         issue     : { -> epic_initiative[] },
                         transition: it,
                 ]
                ],
                [action    : 'transitionIssue',
                 ext       : ": transition issue to IN_PROGRESS before_ $it _when Parent issues of the current issue in the Portfolio hierarchy _in selected status:",
                 sleep     : info?.isCloud? 3000 : 0,
                 parameters: [
                         issue     : { -> initiative[] },
                         transition: "In Progress",
                 ]
                ],
                [action      : 'getFieldValue',
                 ext         : ": Validate that the status of issue which is parent issue in portfolio hierarchy should be In Progress _$it:",
                 sleep       : info?.isCloud? 3000 : 0,
                 parameters  : [
                         issue: { -> initiative[] },
                         field: "Status",
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("Status  . . . . . . . . . . . : In Progress")
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ": RELATED_ISSUES_STATUS_VALIDATOR_TC_20_Case_02- $it _when Parent issues of the current issue in the Portfolio hierarchy_in selected status:",
                 expected  : expectedSuccess,
                 sleep     : info?.isCloud? 3000 : 0,
                 parameters: [
                         issue     : { -> epic_initiative[] },
                         transition: it,
                 ]
                ],
                [action    : 'transitionIssue',
                 ext       : ": transition issue to TO_DO after_ $it _when Parent issues of the current issue in the Portfolio hierarchy_in selected status:",
                 sleep     : info?.isCloud? 3000 : 0,
                 parameters: [
                         issue     : { -> initiative[] },
                         transition: "To Do",
                 ]
                ],
        ])
    }
}

// RELATED_ISSUES_STATUS_VALIDATOR_TC_23-Verify Issues returned by a Groovy script
[
        'verify_status_in_progress_of_all_issues_which_are_returnsByGroovyExpression',
        'verify_status_in_progress_of_at_least_one_issues_which_is_returnsByGroovyExpression',
        'verify_status_in_progress_none_of_the_issues_which_are_returnsByGroovyExpression',
        'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_returnsByGroovyExpression'
].collect {
    def expectedError;
    def expectedSuccess;
    if(it == 'verify_status_in_progress_of_all_issues_which_are_returnsByGroovyExpression'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_returnsByGroovyExpression'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_returnsByGroovyExpression'){
        expectedError = 0;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_returnsByGroovyExpression'){
        expectedError = 0;
    }
    if(it == 'verify_status_in_progress_of_all_issues_which_are_returnsByGroovyExpression'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_returnsByGroovyExpression'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_returnsByGroovyExpression'){
        expectedSuccess = -3;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_returnsByGroovyExpression'){
        expectedSuccess = -3;
    }
    if(!isCloud) {
        gint.taskHelper.add([
                [action: 'linkIssue',
                 ext: ": by relates to link type to check _$it:",
                 parameters: [
                         issue: {-> issueLinks[]},
                         toIssue: {-> toIssueLink[]},
                         link: 'relates to'
                 ]
                ],
                [action: 'getLinkList',
                 ext: ": validate that issue has 1 issue linked to it through relates to link type for _ $it: ",
                 parameters: [
                         issue: {->issueLinks[]},
                         outputType: "Text",
                         columns: "Link Description",
                         select: "Link Description:relates to"
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("1 links for issue")
                 }
                ],
                [action      : 'getFieldValue',
                 ext         : ": Validate that the status of issue which is returns By Groovy Expression should not be In Progress _$it:",
                 sleep       : info?.isCloud? 3000 : 0,
                 parameters  : [
                         issue: { -> issueLinks[] },
                         field: "Status",
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert !output.contains("Status  . . . . . . . . . . . : In Progress")
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ": RELATED_ISSUES_STATUS_VALIDATOR_TC_23_Case_01- $it _when Issues returned by a Groovy script _not in selected status:",
                 expected  : expectedError,
                 sleep     : info?.isCloud? 3000 : 0,
                 parameters: [
                         issue     : { -> issueLinks[] },
                         transition: it,
                 ]
                ],
                [action    : 'transitionIssue',
                 ext       : ": transition issue to IN_PROGRESS before_ $it _when Issues returned by a Groovy script _in selected status:",
                 sleep     : info?.isCloud? 3000 : 0,
                 parameters: [
                         issue     : { -> toIssueLink[] },
                         transition: "In Progress",
                 ]
                ],
                [action      : 'getFieldValue',
                 ext         : ": Validate that the status of issue which is returns By Groovy Expression should be In Progress _$it:",
                 sleep       : info?.isCloud? 3000 : 0,
                 parameters  : [
                         issue: { -> toIssueLink[] },
                         field: "Status",
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("Status  . . . . . . . . . . . : In Progress")
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ": RELATED_ISSUES_STATUS_VALIDATOR_TC_23_Case_02- $it _when Issues returned by a Groovy script_in selected status:",
                 expected  : expectedSuccess,
                 sleep     : info?.isCloud? 3000 : 0,
                 parameters: [
                         issue     : { -> issueLinks[] },
                         transition: it,
                 ]
                ],
                [action    : 'transitionIssue',
                 ext       : ": transition issue to TO_DO after_ $it _when Issues returned by a Groovy script_in selected status:",
                 sleep     : info?.isCloud? 3000 : 0,
                 parameters: [
                         issue     : { -> toIssueLink[] },
                         transition: "To Do",
                 ]
                ],
                [action: 'deleteLink',
                 ext: ": by relates To link type after checking _$it:",
                 parameters: [
                         issue: {->issueLinks[]},
                         toIssue: {-> toIssueLink[]},
                         link: 'relates to'
                 ]
                ],
        ])
    }
}

// RELATED_ISSUES_STATUS_VALIDATOR_TC_25-Verify Issues returned by a JQL search
[
        'verify_status_in_progress_of_all_issues_which_are_returnsFromJqlSearch',
        'verify_status_in_progress_of_at_least_one_issues_which_is_returnsFromJqlSearch',
        'verify_status_in_progress_none_of_the_issues_which_are_returnsFromJqlSearch',
        'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_returnsFromJqlSearch'
].collect {
    def expectedError;
    def expectedSuccess;
    if(it == 'verify_status_in_progress_of_all_issues_which_are_returnsFromJqlSearch'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_returnsFromJqlSearch'){
        expectedError = -3;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_returnsFromJqlSearch'){
        expectedError = 0;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_returnsFromJqlSearch'){
        expectedError = 0;
    }
    if(it == 'verify_status_in_progress_of_all_issues_which_are_returnsFromJqlSearch'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_of_at_least_one_issues_which_is_returnsFromJqlSearch'){
        expectedSuccess = 0;
    }
    else if(it == 'verify_status_in_progress_none_of_the_issues_which_are_returnsFromJqlSearch'){
        expectedSuccess = -3;
    }
    else if(it == 'verify_status_in_progress_at_least_one_not_in_status_issues_which_is_returnsFromJqlSearch'){
        expectedSuccess = -3;
    }
    if(!isCloud) {
        gint.taskHelper.add([
                [action      : 'getFieldValue',
                 ext         : ": Validate that the status of issue which is returns From Jql Search should not be In Progress _$it:",
                 sleep       : info?.isCloud? 3000 : 0,
                 parameters  : [
                         issue: { -> jqlIssue[] },
                         field: "Status",
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert !output.contains("Status  . . . . . . . . . . . : In Progress")
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ": RELATED_ISSUES_STATUS_VALIDATOR_TC_23_Case_01- $it _when Issues returned by a JQL search _not in selected status:",
                 expected  : expectedError,
                 sleep     : info?.isCloud? 3000 : 0,
                 parameters: [
                         issue     : { -> issueLinks[] },
                         transition: it,
                 ]
                ],
                [action    : 'transitionIssue',
                 ext       : ": transition issue to IN_PROGRESS before_ $it _when Issues returned by a JQL search _in selected status:",
                 sleep     : info?.isCloud? 3000 : 0,
                 parameters: [
                         issue     : { -> jqlIssue[] },
                         transition: "In Progress",
                 ]
                ],
                [action      : 'getFieldValue',
                 ext         : ": Validate that the status of issue which is returns From Jql Search should be In Progress _$it:",
                 sleep       : info?.isCloud? 3000 : 0,
                 parameters  : [
                         issue: { -> jqlIssue[] },
                         field: "Status",
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("Status  . . . . . . . . . . . : In Progress")
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ": RELATED_ISSUES_STATUS_VALIDATOR_TC_23_Case_02- $it _when Issues returned by a JQL search_in selected status:",
                 expected  : expectedSuccess,
                 sleep     : info?.isCloud? 3000 : 0,
                 parameters: [
                         issue     : { -> issueLinks[] },
                         transition: it,
                 ]
                ],
                [action    : 'transitionIssue',
                 ext       : ": transition issue to TO_DO after_ $it _when Issues returned by a JQL search_in selected status:",
                 sleep     : info?.isCloud? 3000 : 0,
                 parameters: [
                         issue     : { -> jqlIssue[] },
                         transition: "To Do",
                 ]
                ],
        ])
    }
}

// RELATED_ISSUES_STATUS_VALIDATOR_TS_28_TC_01-Verify issue type dropdown_ check only if Task issue type
[
        'verify_the_issue_type_dropdwn_Task',
        'verify_the_issue_type_dropdwn_Story'
].collect {
    def specificIssueType;
    if(it == 'verify_the_issue_type_dropdwn_Task'){
        specificIssueType = "Task"
    }
    else if(it == 'verify_the_issue_type_dropdwn_Story'){
        specificIssueType = "Story"
    }
    if(!isCloud) {
        gint.taskHelper.add([
                [action    : 'updateIssue', ext: ":  change issue type to $specificIssueType _ satisfy the criteria to check: $it",
                 parameters: [
                         issue    : { -> parent[] },
                         issueType: specificIssueType,
                 ]
                ],
                [action      : 'getFieldValue',
                 ext         : ": Validate that parent issue should be of specific issue type _ $specificIssueType  _otherwise condition skipped _$it:",
                 sleep       : info?.isCloud? 3000 : 0,
                 parameters  : [
                         issue: { -> parent[] },
                         field: "Issue Type",
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains(specificIssueType)
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ": RELATED_ISSUES_STATUS_VALIDATOR_TS_28_TC_01_Case_01- $it _when parent issue is of task type of the current subtask not in selected status:",
                 expected  : -3,
                 sleep     : info?.isCloud? 3000 : 0,
                 parameters: [
                         issue     : { -> subtask[] },
                         transition: it,
                 ]
                ],
                [action    : 'updateIssue', ext: ":  change issue type to bug to after checking_ $specificIssueType _ : $it",
                 parameters: [
                         issue    : { -> parent[] },
                         issueType: "Bug",
                 ]
                ],
                [action      : 'getFieldValue',
                 ext         : ": Validate that parent issue should not be of specific issue type _ $specificIssueType  _condition skipped _$it:",
                 sleep       : info?.isCloud? 3000 : 0,
                 parameters  : [
                         issue: { -> parent[] },
                         field: "Issue Type",
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert !output.contains(specificIssueType)
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ": RELATED_ISSUES_STATUS_VALIDATOR_TS_28_TC_01_Case_02- $it _when parent issue is of task type of the current subtask not in selected status:",
                 expected  : 0,
                 sleep     : info?.isCloud? 3000 : 0,
                 parameters: [
                         issue     : { -> subtask[] },
                         transition: it,
                 ]
                ],
        ])
    }
}


def transitionByUserTaskForError =  { transition, userId, issue, expected ->
    if(!isCloud) {
        gint.taskHelper.add(
                [expected    : expected,
                 name        : ":transition issue by non admin user to check error:" + transition,
                 cmd         : /acli $userId -a transitionIssue --issue $issue --transition $transition/,
                ]
        )
    }
}

def transitionByUserTaskForSuccess =  { transition, userId, issue, expected ->
    if(!isCloud) {
        gint.taskHelper.add(
                [expected    : expected,
                 name        : ":transition issue by non admin user to check success:" + transition,
                 cmd         : /acli $userId -a transitionIssue --issue $issue --transition $transition/,
                ]
        )
    }
}


def parentIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'default')
def subtask1 = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { ->parentIssue[] }], 'Sub-task1')
def subtask2 = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { ->parentIssue[] }], 'Sub-task2')
def subtask3 = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { ->parentIssue[] }], 'Sub-task3')
def subtask4 = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { ->parentIssue[] }], 'Sub-task4')
def subtask5 = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { ->parentIssue[] }], 'Sub-task5')

def listOfSubtasks = [ {-> subtask1[]}, {-> subtask2[]}, {-> subtask3[]}, {-> subtask4[]},{-> subtask5[]}]

//transitionByUserTaskForError("verify_status_in_progress_of_all_issues_which_are_subtask", testUser, { ->parentIssue[] }, -3)

[
        'verify_status_in_progress_of_all_issues_which_are_subtask',
].collect {
    listOfSubtasks.eachWithIndex { subtasks, index ->
        gint.taskHelper.add([
                [action    : 'getFieldValue',
                 ext: ": Validate that the status of five out of five subtasks should not be In Progress _$it:"+index,
                 sleep: info?.isCloud? 3000 : 0,
                 parameters: [
                         issue     : subtasks,
                         field: "Status",
                 ],
                 finalClosure: {Task task ->
                     def output = "$task.outData"
                     assert !output.contains("Status  . . . . . . . . . . . : In Progress")
                 }
                ],
        ])}
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_$it _when all five out of five Sub_tasks of the current issue not in selected status:",
             expected: -3,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->parentIssue[] },
                     transition: it,
             ]
            ],
    ])
    listOfSubtasks.take(2).eachWithIndex { subtasks, index ->
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 ext       : ": transition issue to IN_PROGRESS to verify_ $it _when two out of five Sub_tasks of the current issue in selected status:" + index,
                 sleep     : info?.isCloud ? 3000 : 0,
                 parameters: [
                         issue     : subtasks,
                         transition: "In Progress",
                 ]
                ],
                [action      : 'getFieldValue',
                 ext         : ": Validate that the status of two out of five subtasks should be In Progress _$it:" + index,
                 sleep       : info?.isCloud ? 3000 : 0,
                 parameters  : [
                         issue: subtasks,
                         field: "Status",
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("Status  . . . . . . . . . . . : In Progress")
                 }
                ],
        ])
    }
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TC_10_Case_02- $it _when two out of five Sub_tasks of the current issue in selected status:",
             expected: -3,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->parentIssue[] },
                     transition: it,
             ]
            ],
    ])
    listOfSubtasks.eachWithIndex { subtasks, index ->
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 ext       : ": transition issue to IN_PROGRESS to verify_ $it _when five out of five Sub_tasks of the current issue in selected status:" + index,
                 sleep     : info?.isCloud ? 3000 : 0,
                 parameters: [
                         issue     : subtasks,
                         transition: "In Progress",
                 ]
                ],
                [action      : 'getFieldValue',
                 ext         : ": Validate that the status of five out of five subtasks should be In Progress _$it:" + index,
                 sleep       : info?.isCloud ? 3000 : 0,
                 parameters  : [
                         issue: subtasks,
                         field: "Status",
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("Status  . . . . . . . . . . . : In Progress")
                 }
                ],
        ])
    }
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             ext: ": RELATED_ISSUES_STATUS_VALIDATOR_TC_10_Case_02- $it _when five out of five Sub_tasks of the current issue in selected status:",
             expected: 0,
             sleep: info?.isCloud? 3000 : 0,
             parameters: [
                     issue     : { ->parentIssue[] },
                     transition: it,
             ]
            ],
    ])
}

//transitionByUserTaskForSuccess("verify_status_in_progress_of_all_issues_which_are_subtask", testUser, { ->parentIssue[] }, 0)


// Check when issue has linked issues through different link types

def linkedIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'linkedIssue')
def linkedIssue1 = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'linkedIssue1')
def linkedIssue2 = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'linkedIssue2')

//transitionByUserTaskForError("verify_status_in_progress_of_at_least_one_issues_which_is_linkByBlock", testUser, { ->linkedIssue[] }, -3)

[
        'verify_status_in_progress_of_at_least_one_issues_which_is_linkByBlock',
].collect {
    if(!isCloud) {
        gint.taskHelper.add([
                [action    : "linkIssue",
                 ext       : ": by blocks link type to check : $it",
                 parameters: [
                         issue  : { -> linkedIssue[] },
                         toIssue: { -> linkedIssue1[] },
                         link   : "blocks"
                 ]
                ],
                [action      : 'getFieldValue',
                 ext         : ": Validate that the status of the issue linked to current issue by blocks link type not in In Progress _$it:",
                 sleep       : info?.isCloud ? 3000 : 0,
                 parameters  : [
                         issue: { -> linkedIssue1[] },
                         field: "Status",
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert !output.contains("Status  . . . . . . . . . . . : In Progress")
                 }
                ],
                [action      : 'transitionIssue',
                 ext         : ": RELATED_ISSUES_STATUS_VALIDATOR_$it _when status of the issue linked to current issue by blocks link type not in In Progress:",
                 expected    : -3,
                 sleep       : info?.isCloud ? 3000 : 0,
                 parameters  : [
                         issue     : { -> linkedIssue[] },
                         transition: it,
                 ],
                 finalClosure: { Task task ->
                     assert task.result == -3
                 }
                ],
                [action    : "linkIssue",
                 ext       : ": by clones link type to check: $it:",
                 parameters: [
                         issue  : { -> linkedIssue[] },
                         toIssue: { -> linkedIssue2[] },
                         link   : clonesLinkType
                 ]
                ],
                [action      : 'getFieldValue',
                 ext         : ": Validate that the status of the issue linked to current issue by clones link type not in In Progress _$it:",
                 sleep       : info?.isCloud ? 3000 : 0,
                 parameters  : [
                         issue: { -> linkedIssue2[] },
                         field: "Status",
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert !output.contains("Status  . . . . . . . . . . . : In Progress")
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ": transition issue to IN_PROGRESS_ which is linked by clones link type to verify_ $it :",
                 sleep     : info?.isCloud ? 3000 : 0,
                 parameters: [
                         issue     : { -> linkedIssue2[] },
                         transition: "In Progress",
                 ]
                ],
                [action      : 'getFieldValue',
                 ext         : ": Validate that the status of issue linked to current issue by clones link type in In Progress _$it:",
                 sleep       : info?.isCloud ? 3000 : 0,
                 parameters  : [
                         issue: { -> linkedIssue2[] },
                         field: "Status",
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("Status  . . . . . . . . . . . : In Progress")
                 }
                ],
                [action      : 'transitionIssue',
                 ext         : ": RELATED_ISSUES_STATUS_VALIDATOR_TC_10_Case_02- $it _when issue linked to the current issue by clones link type is in slected status:",
                 expected    : -3,
                 sleep       : info?.isCloud ? 3000 : 0,
                 parameters  : [
                         issue     : { -> linkedIssue[] },
                         transition: it,
                 ],
                 finalClosure: { Task task ->
                     assert task.result == -3
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ": transition issue to IN_PROGRESS_ which is linked by blocks link type to verify_ $it :",
                 sleep     : info?.isCloud ? 3000 : 0,
                 parameters: [
                         issue     : { -> linkedIssue1[] },
                         transition: "In Progress",
                 ]
                ],
                [action      : 'getFieldValue',
                 ext         : ": Validate that the status of issue linked to current issue by blocks link type is In Progress _$it:",
                 sleep       : info?.isCloud ? 3000 : 0,
                 parameters  : [
                         issue: { -> linkedIssue1[] },
                         field: "Status",
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("Status  . . . . . . . . . . . : In Progress")
                 }
                ],
                [action      : 'transitionIssue',
                 ext         : ": RELATED_ISSUES_STATUS_VALIDATOR_TC_10_Case_02- $it _when issue linke to the current issue by blocks link type is IN PROGRESS:",
                 expected    : 0,
                 sleep       : info?.isCloud ? 3000 : 0,
                 parameters  : [
                         issue     : { -> linkedIssue[] },
                         transition: it,
                 ],
                 finalClosure: { Task task ->
                     assert task.result == 0
                 }
                ],
        ])
    }
}

//transitionByUserTaskForSuccess("verify_status_in_progress_of_at_least_one_issues_which_is_linkByBlock", testUser, { ->linkedIssue[] }, 0)

// RELATED_ISSUES_STATUS_VALIDATOR_TC_34-Verify the Condition groovy expression
['verify_the_condition_groovy_expression'].each {
    ["High","Low"].eachWithIndex { key, i ->
        def expected ;
        if(key == "High"){
            expected = -3
        }
        else {
            expected = 0
        }
        gint.taskHelper.add([
                [action    : 'updateIssue',
                 ext       : ":  change issue priority to $key to check transition: $it",
                 parameters: [
                         issue   : { -> parent[] },
                         priority: key,
                 ]
                ],
                [action    : 'transitionIssue',
                 ext       : ": RELATED_ISSUES_STATUS_VALIDATOR_TS_34_Case_01- $it _when current issues priority is $key:",
                 expected  : expected,
                 parameters: [
                         issue     : { -> parent[] },
                         transition: it,
                 ],
                ],
        ])
    }
}

/*
Reviewed by Niharika: 13.03.2024
1. Select multiple statuses  = DONE
2. Select status which is not in current workflow = PENDING due to ACLI limitations
3. Non admin user = DONE
4. Add custom status from the statuses page(type - gg, search ,status - in jira instance ) = PENDING due to ACLI limitations
5. Check all modes option for the given use case :
    Create multiple subtasks -for example- 5 subtasks
    - Check when all subtask are not in selected
    - Check when 2 subtask are in selected
    - Check when all subtask are in selected status = DONE
6. Select target issue: parent issue of the current subtask
 and from issueType dropdown: subtask = TODO
7.Add the multiple condition in the same transition with different statuses and check = TODO
  For example : 1st configuration- select status: IN PROGRESS
                2nd configuration- select status: IN REVIEW
 */