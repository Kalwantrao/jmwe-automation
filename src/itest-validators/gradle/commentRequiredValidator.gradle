buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/itest-validators/validator.gradle'

def customErrorMessage = "custom error message"
def systemErrorMessage = "You must provide a Comment"


//createGroup("customgroup")
//addUserToGroup("customgroup", testUser)

def defaultFieldsServer = [
        verify_the_error_message: ["errorMessage=$customErrorMessage","groups=","showAsterisk=no"],
        verify_the_system_error_message: ["errorMessage=","groups=","showAsterisk=no"],
        verify_the_condition_groovy_expression : ["conditionalValidation=yes","conditionalValidationScript=$groovyExpression.getIssuetype","errorMessage=","groups=","showAsterisk=no"],
        comment_required_if_not_from_selectedGroup : ["errorMessage=","groups=jira-administrators","showAsterisk=no"],
        comment_required_if_user_is_not_belongs_to_testGroup : ["errorMessage=","groups=$testGroup","showAsterisk=no"],
        //comment_required_if_user_is_not_belongs_to_customGroup : ["errorMessage=","groups=customgroup","showAsterisk=no"]
]

def defaultFieldsCloud = [
        verify_the_error_message : "{\"problems\":[],\"errorMessage\":\"$customErrorMessage\",\"expression\": \"!!issue.comments && issue.comments.length > 0 && issue.comments.some(comment => comment.id == null)\"}",
        verify_the_system_error_message : "{\"problems\":[],\"expression\":\"!!issue.comments && issue.comments.length > 0 && issue.comments.some(comment => comment.id == null)\"}",
        verify_the_condition_groovy_expression : "{\"problems\":[],\"conditionalValidation\":true,\"conditionalValidationExpression\":\"!!issue.issueType && issue.issueType.name == 'Task'\",\"expression\":\"!(!!issue.issueType && issue.issueType.name == 'Task') || !!issue.comments && issue.comments.length > 0 && issue.comments.some(comment => comment.id == null)\"}"
]

def functionKey = info?.isCloud ? "com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.${testCloudBuild}__CommentRequiredValidator" : 'com.innovalog.jmwe.jira-misc-workflow-extensions:commentrequired-validator'
def fields = info?.isCloud ? defaultFieldsCloud : defaultFieldsServer

fields.eachWithIndex { key, value, i ->
    addTransitionFunction(key, 'validator', value, functionKey)
}

def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue', comment: "test"], 'defaultIssue')

[
        'verify_the_error_message',
        'verify_the_system_error_message'
].eachWithIndex { transition, i ->
    def errorMessage;
    if(transition == 'verify_the_error_message'){
        errorMessage = customErrorMessage
    }else if(transition == 'verify_the_system_error_message'){
        errorMessage = systemErrorMessage
    }
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             sleep: sleep,
             ext: ":COMMENT_REQUIRED_VALIDATOR_TC_9_Case_01:By $transition:when comment not provided on transition screen:",
             expected  : -3,
             parameters: [
                     transition: transition,
                     issue: { -> defaultIssue[] },
             ],
             data: [ errorMessage ]
            ],
            [action    : 'transitionIssue',
             sleep: sleep,
             ext: ":COMMENT_REQUIRED_VALIDATOR_TC_9_Case_02:By $transition:when comment provided on transition screen:",
             expected  : 0,
             parameters: [
                     transition: transition,
                     issue: { -> defaultIssue[] },
                     comment: 'test_Comment'
             ],
             failData: [ errorMessage ]
            ]
    ]
    )
}

// COMMENT_REQUIRED_VALIDATOR_TC_09_Verify the Condition groovy expression
[
        'verify_the_condition_groovy_expression',
].each {
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             sleep: sleep,
             ext: ":COMMENT_REQUIRED_VALIDATOR_TC_13_Case_01-Verify the Condition groovy expression_when condition returns true and comment not provided:",
             expected  : -3,
             parameters: [
                     transition: it,
                     issue: { -> defaultIssue[] },
             ],
             data: [ /$systemErrorMessage/ ]
            ],
            [action    : 'transitionIssue',
             sleep: sleep,
             ext: ":COMMENT_REQUIRED_VALIDATOR_TC_13_Case_02-Verify the Condition groovy expression_when condition returns true and comment provided:",
             expected  : 0,
             parameters: [
                     transition: it,
                     issue: { -> defaultIssue[] },
                     comment: 'test_Comment'
             ],
             failData: [ /$systemErrorMessage/ ]
            ],
            [action: 'updateIssue',
             sleep: sleep,
             ext: ': change issue type',
             parameters: [
                     issue: {->defaultIssue[]},
                     issueType: 'Story'
             ]
            ],
            [action    : 'transitionIssue',
             sleep: sleep,
             ext: ":COMMENT_REQUIRED_VALIDATOR_TC_13_Case_03-Verify the Condition groovy expression_when condition returns false and comment not provided:",
             expected  : 0,
             parameters: [
                     transition: it,
                     issue: { -> defaultIssue[] },
             ],
             failData: [ /$systemErrorMessage/ ]
            ]

    ]
    )
}

// COMMENT_REQUIRED_VALIDATOR_TC_10_Verify the Groups allowed to omit the comment dropdown_On selecting the group from the drop-down_that group will be omitted from the validator
['comment_required_if_not_from_selectedGroup'].each {
    if(!isCloud) {
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 sleep     : sleep,
                 ext       : ":COMMENT_REQUIRED_VALIDATOR_TC_10_Verify the Groups allowed to omit the comment dropdown_On selecting the group from the drop-down_that group will be omitted from the validator:$it",
                 expected  : 0,
                 parameters: [
                         issue     : { defaultIssue[] },
                         transition: it
                 ],
                 failData  : [/$systemErrorMessage/]
                ],
        ])
    }
}

[
//'comment_required_if_user_is_not_belongs_to_customGroup'
].each {
    if(!isCloud) {
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 sleep     : sleep,
                 ext       : ":COMMENT_REQUIRED_VALIDATOR_TC_10_Verify the Groups allowed to omit the comment dropdown_On selecting the group from the drop-down_that group will be omitted from the validator:$it",
                 expected  : -3,
                 parameters: [
                         issue     : { defaultIssue[] },
                         transition: it
                 ],
                 data  : [/$systemErrorMessage/]
                ],
                [action: "removeGroup",
                 ext: ":before transition issue by_ $it _to check when the configured group is not exists:",
                parameters: [
                        group: "customgroup"
                ]
                ],
                [action    : 'transitionIssue',
                 sleep     : sleep,
                 ext       : ":COMMENT_REQUIRED_VALIDATOR_TC_10_when the configured group has removed:transition issue with:$it",
                 expected  : -3,
                 parameters: [
                         issue     : { defaultIssue[] },
                         transition: it
                 ],
                 data  : [/$systemErrorMessage/]
                ],
        ])
    }
}

def transitionByUserTask =  { transition, userId, issue, data, expected ->
    if(!isCloud) {
        gint.taskHelper.add(
                [expected    : expected,
                 name        : 'check transition trigger by other user' + transition,
                 cmd         : /acli $userId -a transitionIssue --issue $issue --transition $transition/,
                 data        : (data == null ? data : [:]),
                 finalClosure: { Task task ->
                     assert task.result == expected
                 }
                ]
        )
    }
}
transitionByUserTask('comment_required_if_not_from_selectedGroup', testUser, {->defaultIssue[]}, "You must provide a Comment", -3)

/*
DONE : 1. If a Comment is not provided, report the following error: You must provide a Comment. - positive and negatives = "Done"
DONE:  2. If a Comment is not provided, report the following error: customError msg. - positive and negatives = "Done"
DONE:  3. If a Comment is not provided, report the following error: You must provide a Comment.
          Users in any of following groups will not need to provide a comment:validate one group = "Done"
DONE:  4. If a Comment is not provided, report the following error: You must provide a Comment.
          This validation only applies if the following condition is true:!!issue.get("assignee")     -positive and negatives = "Done"
 */

/*

Reviewd by CHIRAG:16.02.2024
1. Configure the custom groups allowed to omit comment :
    step1: select custom group and check on issue
    step2: delete the group and check on issue
2. Configure the custom groups allowed to omit comment :
    step1: select custom group and check on issue
    step2: rename the group and check on issue
3. Configure two groups allowed to omit comment : admin and testGroup
    step1: check on the issue by admin and testgroup member
    step2: check on the issue by other group member than admin and testgroup
 */

