import groovy.json.JsonSlurper
import java.nio.file.Paths

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}
apply plugin: 'org.gint.atlassian'
apply from: 'common/setUp.gradle'

def info = gint.getJiraHelper().getServerInfoWithVerify() // Verify access to Jira instance otherwise end test if server not available
def project = gint.getJiraHelper().getProjectKey()	//get project key using jira helper functions
def transition = 'commentRequiredValidator'
def workflow = project
def screen = project

gint.xmlReport =	true	//xml report generates in projects root directory
gint.verbose =	true
def userId = 'jmwe_qa'
def jsonSlurper = new JsonSlurper();
def path = Paths.get(gint.directories.resource + "/resources/validatorsData/CommentRequiredValidatorFunctions${info?.isCloud ? "Cloud" : ""}.json")
def transitionFunctions = jsonSlurper.parse(path)
def functionKey = info?.isCloud ? 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__CommentRequiredValidator' : 'com.innovalog.jmwe.jira-misc-workflow-extensions:commentrequired-validator'	//function key for HideTransitionCondition
def startStep = info?.isCloud ? '1':'11' // depends on workflow. '1' for cloud and '11' (To Do)for server works for custom jira workflow

createTransitionsWithFunctions(transitionFunctions, transition, functionKey, 'validator', startStep, workflow, screen, 0)


// check when comment not provided
def currentIssue = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'createCurrentIssue')
transitionIssue(transition+0, {-> currentIssue[0]}, [-3], 'commentNotProvided-Custom error msg', null, ['Remote error: comment: CommentRequired'])
transitionIssue(transition+0, {-> currentIssue[0]}, 0, 'commentProvided', [comment: 'test'], null)

// check when comment provided
def parent = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'createParentIssue')
transitionIssue(transition+1, {-> parent[0]}, [-3], 'commentNotProvidedSystemErrorMsg', null, ['Remote error: comment: You must provide a Comment'])
transitionIssue(transition+1, {-> parent[0]}, 0, 'commentProvided-SystemErrorMsg', [comment: 'test'], null)

// check conditional validation
def condExecFalse = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'condExecFalse')
def condExecTrue = createIssue(project,{[ type: 'Story', summary: 'JMWE_Issue']}, 'condExecTrue')
transitionIssue(transition+2, {-> condExecFalse[0]}, [0], 'conditionalValidationFalseCommentNotProvided', null, null)
transitionIssue(transition+2, {-> condExecTrue[0]}, [-3], 'conditionalValidationTrueCommentNotProvided', null, ['Remote error: comment: You must provide a Comment'])
transitionIssue(transition+2, {-> condExecTrue[0]}, [0], 'conditionalValidationTrueCommentProvided', [comment: 'test'], null)

//check comment omitted to only jira administrators users
transitionIssue(transition+3, {-> currentIssue[0]}, 0, 'commentOmittedToJiraAdminUsers', null, null)

// check other user comment required
transitionByUserTask(transition+3, userId, {-> currentIssue[0]}, ['Remote error: comment: You must provide a Comment'], [-3])

