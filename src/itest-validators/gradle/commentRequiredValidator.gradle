buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/utils.gradle'

tearDown()
addWorkflow()

def customErrorMessage = "custom error message"
def systemErrorMessage = "You must provide a Comment"
def defaultFieldsServer = [
        commentRequired_customError: ["errorMessage=$customErrorMessage","groups=","showAsterisk=no","correlationId="],
        commentRequired_systemError: ["errorMessage=","groups=","showAsterisk=no","correlationId="],
        commentRequired_conditionalValidation : ["conditionalValidation=yes","conditionalValidationScript=$groovyExpression.getIssuetype","errorMessage=","groups=","showAsterisk=no","correlationId="],
        commentRequired_ommitGroups : ["errorMessage=","groups=jira-administrators","showAsterisk=no","correlationId="]
]
def defaultFieldsCloud = [
        commentRequired_customError : [
                "validator.id=ba2aae99-13c1-422b-933c-1c16e0739d3a",
                "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a={\"problems\":[],\"errorMessage\":\"$customErrorMessage\",\"expression\": \"!!issue.comments && issue.comments.length > 0 && issue.comments.some(comment => comment.id == null)\"}"
        ],
        commentRequired_systemError : [
                "validator.id=ba2aae99-13c1-422b-933c-1c16e0739d3a",
                "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a={\"problems\":[],\"expression\":\"!!issue.comments && issue.comments.length > 0 && issue.comments.some(comment => comment.id == null)\"}"
        ],
        commentRequired_conditionalValidation : [
                "validator.id=ba2aae99-13c1-422b-933c-1c16e0739d3a",
                "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a={\"problems\":[],\"conditionalValidation\":true,\"conditionalValidationExpression\":\"!!issue.issueType && issue.issueType.name == 'Task'\",\"expression\":\"!(!!issue.issueType && issue.issueType.name == 'Task') || !!issue.comments && issue.comments.length > 0 && issue.comments.some(comment => comment.id == null)\"}"
        ]
]

def functionKey = info?.isCloud ? functionKey.commentRequiredValidatorCloud : functionKey.commentRequiredValidatorServer
def testUser =  info?.isCloud ? cloudUser : serverUser
def fields = info?.isCloud ? defaultFieldsCloud : defaultFieldsServer

// Configuration for validator
fields.eachWithIndex { key, value, i ->
    addTransitionFunction(key, 'validator', value, functionKey)
}

createWorkflowScheme()
createProject()

def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'defaultIssue')

// checking the current status To Do and previous status In Progress
[
        'commentRequired_customError',
].each {
    gint.taskHelper.add([
            [action    : 'transitionIssue', ext: ' : custom error when comment not provided ' + it,
             expected  : -3,
             parameters: [
                     transition: it,
                     issue: { -> defaultIssue[] },
             ],
             data: [ /$customErrorMessage/ ]
            ],
            [action    : 'transitionIssue', ext: ' : when comment provided ' + it,
             expected  : 0,
             parameters: [
                     transition: it,
                     issue: { -> defaultIssue[] },
                     comment: 'test_Comment'
             ],
             failData: [ /$customErrorMessage/ ]
            ]
    ]
    )
}
[
        'commentRequired_systemError',
        'commentRequired_conditionalValidation',
].each {
    gint.taskHelper.add([
            [action    : 'transitionIssue', ext: ' : custom error when comment not provided ' + it,
             expected  : -3,
             parameters: [
                     transition: it,
                     issue: { -> defaultIssue[] },
             ],
             data: [ /$systemErrorMessage/ ]
            ],
            [action    : 'transitionIssue', ext: ' : when comment provided ' + it,
             expected  : 0,
             parameters: [
                     transition: it,
                     issue: { -> defaultIssue[] },
                     comment: 'test_Comment'
             ],
             failData: [ /$systemErrorMessage/ ]
            ]
    ]
    )
}
[
        'commentRequired_conditionalValidation',
].each {
    gint.taskHelper.add([
            [action    : 'transitionIssue', ext: ' :  error when conditional validation true ' + it,
             expected  : -3,
             parameters: [
                     transition: it,
                     issue: { -> defaultIssue[] },
             ],
             data: [ /$systemErrorMessage/ ]
            ],
            [action: 'updateIssue', ext: ': change issue type',
             parameters: [
                     issue: {->defaultIssue[]},
                     issueType: 'Story'
             ]
            ],
            [action    : 'transitionIssue', ext: ' : should not throw error when conditional validation false ' + it,
             expected  : 0,
             parameters: [
                     transition: it,
                     issue: { -> defaultIssue[] },
                     comment: 'test_Comment'
             ],
             failData: [ /$systemErrorMessage/ ]
            ]
    ]
    )
}

['commentRequired_ommitGroups'].each {
    gint.taskHelper.add([
            [action: 'transitionIssue',
             onlyIf: info?.isServer?
             ext: ': trigger transition by user which is in selected group',
             expected: 0,
             parameters:[
                     issue:  {defaultIssue[]},
                     transition: it
             ],
             failData: [/$systemErrorMessage/]
            ],
    ])
}
def transitionByUserTask =  { transition, userId, issue, data, expected ->
    gint.taskHelper.add(
            [expected: expected,
             name: 'check transition trigger by other user'+ transition,
             onlyIf: info?.isServer?
             cmd : /acli $userId -a transitionIssue --issue $issue --transition $transition/,
             data: ( data == null ? data : [:]),
             finalClosure: {Task task ->
                 assert task.result == expected
             }
            ]
    )
}
transitionByUserTask('commentRequired_ommitGroups', testUser, {->defaultIssue[]}, null, -3)
/*
DONE : 1. If a Comment is not provided, report the following error: You must provide a Comment. - positive and negatives = "Done"
DONE:  2. If a Comment is not provided, report the following error: customError msg. - positive and negatives = "Done"
DONE:  3. If a Comment is not provided, report the following error: You must provide a Comment.
          Users in any of following groups will not need to provide a comment:validate one group = "Done"
DONE:  4. If a Comment is not provided, report the following error: You must provide a Comment.
          This validation only applies if the following condition is true:!!issue.get("assignee")     -positive and negatives = "Done"
 */