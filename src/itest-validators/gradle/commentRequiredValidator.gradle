import groovy.json.JsonSlurper
import java.nio.file.Paths

buildscript {
    def gintVersion = findProperty('gintVersion') ?: System.getenv('GINT_VERSION') ?: '+'
    dependencies {
        classpath 'org.gint:gint-atlassian:' + gintVersion
    }
    repositories {
        flatDir { dirs 'libs' } // for testing SNAPSHOT versions
        mavenLocal()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
}
apply plugin: 'org.gint.atlassian'
apply from: 'common/setUp.gradle'

def info = gint.getJiraHelper().getServerInfoWithVerify() // Verify access to Jira instance otherwise end test if server not available
def project = gint.getJiraHelper().getProjectKey()	//get project key using jira helper functions
def transition = 'commentRequiredValidator'
def workflow = project
def screen = project

gint.xmlReport =	true	//xml report generates in projects root directory
gint.verbose =	true

def jsonSlurper = new JsonSlurper();
def path = Paths.get(gint.directories.resource + "/resources/validatorsData/CommentRequiredValidatorFunctions${info?.isCloud ? "Cloud" : ""}.json")
def transitionFunctions = jsonSlurper.parse(path)
def functionKey = info?.isCloud ? 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__CommentRequiredValidator' : 'com.innovalog.jmwe.jira-misc-workflow-extensions:commentrequired-validator'	//function key for HideTransitionCondition
def startStep = info?.isCloud ? '1':'11' // depends on workflow. '1' for cloud and '11' (To Do)for server works for custom jira workflow

createTransitionsWithFunctions(transitionFunctions, transition, functionKey, 'validator', startStep, workflow, screen, 0)

// Create issues
def summaries = [
		'checkErrorMsgByUser',
		'checkErrorMsgByUserWhenConditionIsTrue',
		'checkErrorMsgByDefault',
		'checkErrorMsgByDefaultWhenConditionIsTrue',
]
def bug = createIssue(project, summaries.collect{[ type: 'Bug', summary: it]} )
def Task = createIssue(project, summaries.collect{[ type: 'Task', summary: it]} )
[
		'Remote error: comment: CommentRequired',
		'Remote error: comment: You must provide a Comment',
		'Remote error: comment: You must provide a Comment',
].eachWithIndex {  data, number ->
	def transitionIssue = gint.taskHelper.add([
        	[action: 'transitionIssue', ext: 'transitionWhenCommentNotProvided'+number,
            	dependsOn: true,
            	retry: true,
            	expected: [ -3 ],
            	parameters: [
                	issue: {-> bug[number]  },
                	transition: transition + number,
                	resolution: "Done",
					],
           	data:[  ],
        	],
        	[action: 'transitionIssue', ext: 'transitionWhenCommentProvided'+number,
            	dependsOn: true,
            	expected: [ 0 ],
            	parameters: [
                	issue: {-> Task[number]  },
                	transition: transition + number,
                	resolution: "Done",
                	comment: "testCommentRequiredValidator"
					],
           	data:[ ~/Successfully transitioned issue ${project}-\d+ with transition '${transition + number}'./ ],
        	],
])
}

