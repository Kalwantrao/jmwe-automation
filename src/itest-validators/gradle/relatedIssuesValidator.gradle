import groovy.json.JsonSlurper
import java.nio.file.Paths

buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.gint:gint-atlassian:3.8.4"
	}
}

apply plugin: 'org.gint.atlassian'
//apply from: 'common/setUp.gradle'
apply from: gint.resourceDirectory +'/src/common/testValidators.gradle'

def info = gint.getJiraHelper().getServerInfoWithVerify() // Verify access to Jira instance otherwise end test if server not available
def project = 'AUTOMATION'//gint.getJiraHelper().getProjectKey()	//get project key using jira helper functions
def transition = 'relatedIssuesValidator'
def workflow = project
def screen = project
def user = info.user
gint.xmlReport =	true	//xml report generates in projects root directory
gint.verbose =	true

def jsonSlurper = new JsonSlurper();
def path = Paths.get(gint.directories.resource + "/resources/validatorsData/RelatedIssuesValidatorFunctions${info?.isCloud ? "Cloud" : ""}.json")
def transitionFunctions = jsonSlurper.parse(path)
def functionKey = info?.isCloud ? 'com.innovalog.jmwe.jira-misc-workflow-extensions:issue-linking-validator' : 'com.innovalog.jmwe.jira-misc-workflow-extensions:issue-linking-validator'	//function key for HideTransitionCondition
def startStep = info?.isCloud ? '1':'11' // depends on workflow. '1' for cloud and '11' (To Do)for server works for custom jira workflow

createTransitionsWithFunctions(transitionFunctions, transition, functionKey, 'validator', startStep, workflow, screen, 0)

// TC_16-Mode :Require certain related issues
//  Case1: When parent issue not having subtask
def parent = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue', priority: 'Low']}, 'parent')
transitionIssue(transition+0, {-> parent[0]}, -3, 'TC_16-when parent issue not having subtask', null, null)

// Case2: When parent issue having subtask
def parent1 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'parent1')
def subTask1 = createIssue(project,{[ type: 'Sub-task', summary: 'JMWE_Issue', parent: {-> parent1[0]} ]}, 'subtask1')
transitionIssue(transition+0, {-> parent1[0]}, 0, 'TC_16-When parent issue having subtask', null, null)

// Case3: When subtask not having parent issue respecting given condition
transitionIssue(transition+1, {-> subTask1[0]}, -3, 'TC_16-When subtask not having parent issue respecting given condition', null, null)

// Case4: When subtask having parent issue respecting given condition
def parent2 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue',]}, 'parent2')
def subTask2 = createIssue(project,{[ type: 'Sub-task', summary: 'JMWE_Issue', parent: {-> parent2[0]}, priority: 'High' ]}, 'subtask2')
transitionIssue(transition+1, {-> subTask2[0]}, 0, 'TC_16-When subtask having parent issue respecting given condition', null, null)

// Case5: When epic not having issues
def epic = createIssue(project,{[ type: 'epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Epic"]}, 'epic')
transitionIssue(transition+2, {-> epic[0]}, -3, 'TC_16-When epic not having issues', null, null)

// Case6: When epic having issue
def epic1 = createIssue(project,{[ type: 'epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Epic", priority: 'Low']}, 'epic1')
def story1 = createIssue(project,{[ type: 'story', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic1[0]} ]}, 'story1')
transitionIssue(transition+2, {-> epic1[0]}, 0, 'TC_16-When epic having issue', null, null)

// Case7: When epic of the current issue not respecting the given condition
transitionIssue(transition+3, {-> story1[0]}, -3, 'TC_16-When epic of the current issue not respecting the given condition', null, null)

// Case8: When epic of the current issue respecting the given condition
def epic2 = createIssue(project,{[ type: 'epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Epic"]}, 'epic2')
def story2 = createIssue(project,{[ type: 'story', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic2[0]}, priority: 'High' ]}, 'story2')
transitionIssue(transition+3, {-> story2[0]}, 0, 'TC_16-When epic of the current issue respecting the given condition', null, null)

// Case9: When current issue not having issues link by any linkType
transitionIssue(transition+4, {-> parent[0]}, -3, 'TC_16-When current issue not having issues link by any linkType', null, null)

// Case10: When current issue having issues link by any linkType
def linkIssueAnyLink1 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'linkIssue1')
def linkIssueAnyLink2 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'linkIssue2')
linkIssues([issue: { -> linkIssueAnyLink1[0] }, toIssue: { -> linkIssueAnyLink2[0] }, link: 'duplicates'], 'linkByAnyLinkType1' )
transitionIssue(transition+4, {-> linkIssueAnyLink2[0]}, 0, 'TC_16-When current issue having issues link by any linkType', null, null)

// Case11: When current issue not having issues link by any specificLink
transitionIssue(transition+5, {-> linkIssueAnyLink1[0]}, -3, 'TC_16-When current issue not having issues link by any specificLink', null, null)

// Case12: When current issue having issues link by blocksLinkType
def blocks1 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'linkIssue5')
def blocks2 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'linkIssue6')
linkIssues([issue: { -> blocks1[0] }, toIssue: { -> blocks2[0] }, link: 'blocks'], 'linkByBlocksLinkType1' )
transitionIssue(transition+5, {-> blocks1[0]}, 0, 'TC_16-When current issue having issues link by specificLink', null, null)

// Case13: When current issue not having issues return by groovy script
transitionIssue(transition+6, {-> parent1[0]}, -3, 'TC_16-When current issue not having issues return by groovy script', null, null)

// Case14: When current issue having issues return by groovy script
transitionIssue(transition+6, {-> blocks1[0]}, 0, 'TC_16-When current issue having issues return by groovy script', null, null)

// Case15: When jql search not returns at least 1 issue
def IssueReturnByJqlSearch = createIssue(project, {[type: 'Task', summary: 'jmwe_Task_jqlIssue']}, 'jqlSearch' )
transitionIssue(transition+7, {-> IssueReturnByJqlSearch[0]}, -3, 'TC_16-When jql search not returns at least 1 issue', null, null)

// Case16: When jql search returns at least 1 issue
transitionIssue(transition+8, {-> IssueReturnByJqlSearch[0]}, 0, 'TC_16-When jql search returns at least 1 issue', null, null)

/*
// TC_17-Mode : Check related issues
//  Case1: When parent issue not having subtask respecting constraints
def parent3 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'parent3')
def subTask3 = createIssue(project,{[ type: 'Sub-task', summary: 'JMWE_Issue', parent: {-> parent3[0]}, priority: 'Low' ]}, 'subtask3')
transitionIssue(transition+9, {-> parent3[0]}, -3, 'TC_17-When parent issue not having subtask respecting constraints', null, null)

// Case2: When parent issue having subtask respecting constraints
def parent4 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'parent4')
def subTask4 = createIssue(project,{[ type: 'Sub-task', summary: 'JMWE_Issue', parent: {-> parent4[0]}, priority: 'High' ]}, 'subtask4')
transitionIssue(transition+9, {-> parent4[0]}, 0, 'TC_17-When parent issue having subtask respecting constraints', null, null)

// Case3: When subtask not having parent issue respecting constraints
transitionIssue(transition+10, {-> subTask4[0]}, -3, 'TC_17-When subtask not having parent issue respecting constraints', null, null)

// Case4: When subtask having parent issue respecting constraints
def parent5 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue',, priority: 'High']}, 'parent2')
def subTask5 = createIssue(project,{[ type: 'Sub-task', summary: 'JMWE_Issue', parent: {-> parent2[0]} ]}, 'subtask2')
transitionIssue(transition+10, {-> subTask2[0]}, 0, 'TC_17-When subtask having parent issue respecting given condition', null, null)

// Case5: When epic not having issues
def epic = createIssue(project,{[ type: 'epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Epic"]}, 'epic')
transitionIssue(transition+2, {-> epic[0]}, -3, 'TC_16-When epic not having issues', null, null)

// Case6: When epic having issue
def epic1 = createIssue(project,{[ type: 'epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Epic", priority: 'Low']}, 'epic1')
def story1 = createIssue(project,{[ type: 'story', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic1[0]} ]}, 'story1')
transitionIssue(transition+2, {-> epic1[0]}, 0, 'TC_16-When epic having issue', null, null)

// Case6: When epic of the current issue not respecting the given condition
transitionIssue(transition+3, {-> story1[0]}, -3, 'TC_16-When epic of the current issue not respecting the given condition', null, null)

// Case7: When epic of the current issue respecting the given condition
def epic2 = createIssue(project,{[ type: 'epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Epic"]}, 'epic2')
def story2 = createIssue(project,{[ type: 'story', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic2[0]}, priority: 'High' ]}, 'story2')
transitionIssue(transition+3, {-> story2[0]}, 0, 'TC_16-When epic of the current issue respecting the given condition', null, null)

// Case8: When current issue not having issues link by any linkType
transitionIssue(transition+4, {-> parent[0]}, -3, 'TC_16-When current issue not having issues link by any linkType', null, null)

// Case9: When current issue having issues link by any linkType
def linkIssue1 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'linkIssue1')
def linkIssue2 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'linkIssue2')
linkIssues([issue: { -> linkIssue1[0] }, toIssue: { -> linkIssue2[0] }, link: 'duplicates'], 'linkByAnyLinkType1' )
transitionIssue(transition+4, {-> linkIssue2[0]}, 0, 'TC_16-When current issue having issues link by any linkType', null, null)

// Case10: When current issue not having issues link by any specificLink
transitionIssue(transition+5, {-> linkIssue1[0]}, -3, 'TC_16-When current issue not having issues link by any specificLink', null, null)

// Case11: When current issue having issues link by specificLink
def linkIssue3 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'linkIssue5')
def linkIssue4 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'linkIssue6')
linkIssues([issue: { -> linkIssue3[0] }, toIssue: { -> linkIssue4[0] }, link: 'blocks'], 'linkByBlocksLinkType1' )
transitionIssue(transition+5, {-> linkIssue3[0]}, 0, 'TC_16-When current issue having issues link by specificLink', null, null)

// Case12: When current issue not having issues return by groovy script
transitionIssue(transition+6, {-> parent1[0]}, -3, 'TC_16-When current issue not having issues return by groovy script', null, null)

// Case13: When current issue having issues return by groovy script
transitionIssue(transition+6, {-> linkIssue3[0]}, 0, 'TC_16-When current issue having issues return by groovy script', null, null)

// Case14: When jql search not returns at least 1 issue
def IssueReturnByJqlSearch = createIssue(project, {[type: 'Task', summary: 'jmwe_Task_jqlIssue']}, 'jqlSearch' )
transitionIssue(transition+7, {-> IssueReturnByJqlSearch[0]}, -3, 'TC_16-When jql search not returns at least 1 issue', null, null)

// Case15: When jql search returns at least 1 issue
transitionIssue(transition+8, {-> IssueReturnByJqlSearch[0]}, 0, 'TC_16-When jql search returns at least 1 issue', null, null)




*/