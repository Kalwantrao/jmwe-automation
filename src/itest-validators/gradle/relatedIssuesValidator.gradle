buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.gint:gint-atlassian:3.8.4"
	}
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/utils.gradle'

def functionKey = info?.isCloud? 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__LinkedIssuesValidator' : 'com.innovalog.jmwe.jira-misc-workflow-extensions:issue-linking-validator'
def errorMessage = "Check link issues"

def defaultFieldsCloud= [
		"validator.id=ba2aae99-13c1-422b-933c-1c16e0739d3a",
]

def defaultFieldsServer = [
		"errorMessage=$errorMessage",
		"correlationId="
]

def issueConstraints = [
		atLeastOne : [  "minLinkedIssues=1","maxLinkedIssues=" ],
		minTwo : [ "minLinkedIssues=2", "maxLinkedIssues=" ],
		maxTwo : [ "minLinkedIssues=", "maxLinkedIssues=2" ],
		minTwoMaxTwo : [ "minLinkedIssues=2", "maxLinkedIssues=2" ],
		atLeastThreeAndAtMostSix : [ "minLinkedIssues=3", "maxLinkedIssues=6" ]
]

def verifyAllLinkedIssues = [
		yes : [	"checkAllLinkedIssues=yes" ],
		no : [ "checkAllLinkedIssues=no" ]
]

def requireRelatedIssue = info?.isCloud ? requireRelatedIssuesValidatorCloud : relatedIssueServer
def checkRelatedIssue = info?.isCloud ? checkRelatedIssuesValidatorCloud : relatedIssueServer
def forbidRelatedIssue = info?.isCloud ? forbidRelatedIssuesValidatorCloud : relatedIssueServer

def fieldsToRemove = ["currentIssue", "parentIssue", "epicOfTheCurrentIssue","parentPortfolio"]

fieldsToRemove.each { key ->
	relatedIssue.remove(key)
}

def linkedIssuesMode = [
		requireLinks : [ "validatorMode=requireLinks"],
		requireSpecificLinkedIssues : [ "validatorMode=requireLinks", /groovyExpression=issue.get('assignee')?.name == "$testUser"/ ],
		checkLinks : [ "validatorMode=checkLinks", "groovyExpression=$groovyExpression.checkPriorityHigh" ],
		forbidLinks : [	"validatorMode=forbidLinks", "groovyExpression=$groovyExpression.checkPriorityHigh" ]
]

requireRelatedIssue.eachWithIndex { key, value, i ->
	def transition = 'verify_require_certain_related_issues_' + key
	def cloud = defaultFieldsCloud + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a=$value"
	def server = defaultFieldsServer + "selectedLinkType=$value" + linkedIssuesMode.requireLinks + issueConstraints.atLeastOne + verifyAllLinkedIssues.yes
	addTransitionFunction(transition, 'validator', info?.isCloud? cloud : server, functionKey)
}

['Verify_Issue_constraints_min_two_linkByRelatesTo'].each {
	def server = defaultFieldsServer + "selectedLinkType=$linkByRelatesTo" + linkedIssuesMode.requireLinks + issueConstraints.minTwo + verifyAllLinkedIssues.yes
	if(!isCloud) {
		addTransitionFunction(it, 'validator', server, functionKey)
	}
}

['Verify_Issue_constraints_max_two_linkByRelatesTo'].each {
	def server = defaultFieldsServer + "selectedLinkType=$linkByRelatesTo" + linkedIssuesMode.requireLinks + issueConstraints.maxTwo + verifyAllLinkedIssues.yes
	if(!isCloud) {
		addTransitionFunction(it, 'validator', server, functionKey)
	}
}

['Verify_Issue_constraints_min_three_max_six_linkByRelatesTo'].each {
	def server = defaultFieldsServer + "selectedLinkType=$linkByRelatesTo" + linkedIssuesMode.requireLinks + issueConstraints.atLeastThreeAndAtMostSix + verifyAllLinkedIssues.yes
	if(!isCloud) {
		addTransitionFunction(it, 'validator', server, functionKey)
	}
}

['verify_condition_on_related_issues_checkAssignee'].each {
	def server = defaultFieldsServer + "selectedLinkType=$linkByRelatesTo" + linkedIssuesMode.requireSpecificLinkedIssues + issueConstraints.atLeastOne + verifyAllLinkedIssues.yes
	if(!isCloud) {
		addTransitionFunction(it, 'validator', server, functionKey)
	}
}

checkRelatedIssue.eachWithIndex { key, value, i ->
	def transition = 'verify_check_related_issues_' + key
	def cloud = defaultFieldsCloud + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a=$value"
	def server = defaultFieldsServer + "selectedLinkType=$value" + linkedIssuesMode.checkLinks + issueConstraints.atLeastOne + verifyAllLinkedIssues.yes
	addTransitionFunction( transition, 'validator', info?.isCloud? cloud : server, functionKey)
}

forbidRelatedIssue.eachWithIndex { key, value, i ->
	def transition = 'forbid_certain_related_issues_' + key
	def cloud = defaultFieldsCloud + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a=$value"
	def server = defaultFieldsServer + "selectedLinkType=$value" + linkedIssuesMode.forbidLinks + issueConstraints.atLeastOne + verifyAllLinkedIssues.yes
	addTransitionFunction( transition, 'validator', info?.isCloud? cloud : server, functionKey)
}

['verify_validator_scope_conditional_validation'].each {
	def cloud = defaultFieldsCloud + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a={\"conditionalValidation\":true,\"conditionalValidationExpression\":\"!!issue.priority && issue.priority.name == 'High'\",\"selectedLinkTypeId\":\"jira_subtask_link\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"Check link issues\",\"anyOrEvery\":\"noCond\",\"condition\":\"true\",\"validatorMode\":\"requireLinks\",\"expression\":\"!(!!issue.priority && issue.priority.name == 'High') || (issue.subtasks.some(linkedIssue => (true)))\"}"
	def server = defaultFieldsServer + "selectedLinkType=$subtask" + conditionalValidation.yes + linkedIssuesMode.requireLinks + issueConstraints.atLeastOne + verifyAllLinkedIssues.yes
	addTransitionFunction(it , 'validator', info?.isCloud? cloud : server, functionKey)
}

createWorkflowScheme()
createProject()

def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'default')
def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { ->parent[] }], 'Sub-task')
def epicNoChildIssue = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'EpicNoChildIssue')
def epic = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic')
def issueBelongsToEpic = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {->epic[]}], 'BelongsToEpic')
def initiativeNoChildIssue = createIssue([type: 'Initiative', summary: 'JMWE_Issue'], 'InitiativeNoChildIssue')
def initiative = createIssue([type: 'Initiative', summary: 'JMWE_Issue'], 'Initiative')
def epic_initiative = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative')
def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def blocks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'blocks')
def clones = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'clones')
def duplicates = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'duplicates')
def relatesTo = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'relatesTo')
def relatesToIssue2 = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'relatesToIssue2')
def jqlIssue = createIssue([type: 'Task', summary: 'JQL_ISSUE'], 'jqlIssue')
def relatesToIssue3 = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'relatesToIssue3')
def relatesToIssue4 = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'relatesToIssue4')
def relatesToIssue5 = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'relatesToIssue5')
def relatesToIssue6 = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'relatesToIssue6')
def relatesToIssue7 = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'relatesToIssue7')

updateIssue([issue: {->epic_initiative[]}, field: "Parent Link", value: {->initiative[]}], "parent initiative child epic")

def linkIssuesMapServer = [
		blocks : {->blocks[]},
		"$clonesLinkType" : {->clones[]},
		duplicates : {->duplicates[]},
		'relates to': {->relatesTo[]}
]

def linkIssuesMapCloud = [
		blocks : {->blocks[]},
		clones : {->clones[]},
		duplicates : {->duplicates[]},
		'relates to': {->relatesTo[]}
]

def linkIssuesMap = info?.isCloud? linkIssuesMapCloud : linkIssuesMapServer


linkIssuesMap.eachWithIndex { key, value, i ->
	linkIssue([issue: {->issueLinks[]}, toIssue: value, link: "$key"], key)
}


/*   -----------------------------------------------------------------------------------------------------------------------------------
     -----------------------------------------------------------------------------------------------------------------------------------
                                      RELATED_ISSUES_VALIDATOR => REQUIRE CERTAIN RELATED ISSUES
     -----------------------------------------------------------------------------------------------------------------------------------
     -----------------------------------------------------------------------------------------------------------------------------------   */

// RELATED_ISSUES_VALIDATOR_TS_16_TC_01-verify require certain related issues and subtask of the current issue
[
		'verify_require_certain_related_issues_subtask',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_01_Case_01 -$it _when issue having one subtask:",
			 expected  : 0,
			 parameters: [
					 issue     : {->parent[]},
					 transition: it ,
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_01_Case_02 -$it _when issue not having subtask:",
			 expected  : -3,
			 parameters: [
					 issue     : {->defaultIssue[]},
					 transition: it ,
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_16_TC_02-verify require certain related issues_issueBelongsToEpic
[
		'verify_require_certain_related_issues_issueBelongsToEpic',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 expected  : 0,
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_02_Case_01 -$it _when epic having one issueBelongsToEpic:",
			 parameters: [
					 issue     : {->epic[]},
					 transition: it
			 ]
			],

			[action    : 'transitionIssue',
			 expected  : -3,
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_02_Case_02 -$it _when epic not having issueBelongsToEpic:",
			 parameters: [
					 issue     : {->epicNoChildIssue[]},
					 transition: it ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_16_TC_03-verify require certain related issues_child issue in the Portfolio hierarchy
[
		'verify_require_certain_related_issues_childPortfolio',
].collect {
	if(!isCloud) {
		gint.taskHelper.add([
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_03_Case_01 -$it _current issue must have one child issue in the Portfolio hierarchy:",
				 expected  : 0,
				 parameters: [
						 issue     : { -> initiative[] },
						 transition: it,
				 ]
				],
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_03_Case_02 -$it _when current issue not having child issues in the Portfolio hierarchy:",
				 expected  : -3,
				 parameters: [
						 issue     : { -> initiativeNoChildIssue[] },
						 transition: it,
				 ]
				],
		])
	}
}

// RELATED_ISSUES_VALIDATOR_TS_16_TC_04-verify require certain related issues_current issue must have at least 1 issues linked to it through any link type
[
		'verify_require_certain_related_issues_linkByAnyLink',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_04_Case_01 -$it _current issue having one issue linked to it through any link type:",
			 expected  : 0,
			 parameters: [
					 issue     : {->issueLinks[]},
					 transition: it ,
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_04_Case_02 -$it _current issue not having issues linked to it through any link type:",
			 expected  : -3,
			 parameters: [
					 issue     : {->defaultIssue[]},
					 transition: it ,
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_16_TC_05-verify require certain related issues_current issue must have at least 1 issues linked to it through the blocks link type
[
		'verify_require_certain_related_issues_linkByBlock',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_05_Case_01 -$it _when current issue have at least 1 issue linked to it through the blocks link type:",
			 expected  : 0,
			 parameters: [
					 issue     : {->issueLinks[]},
					 transition: it ,
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_05_Case_02 -$it _The current issue not having issues linked to it through the blocks link type:",
			 expected  : -3,
			 parameters: [
					 issue     : {->defaultIssue[]},
					 transition: it ,
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_16_TC_06-verify require certain related issues_current issue must have at least 1 issues linked to it through the is blocked by link type
[
		'verify_require_certain_related_issues_linkByisBlockedBy',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_06_Case_01 -$it _when current issue have 1 issue linked to it through the is blocked by link type:",
			 expected  : 0,
			 parameters: [
					 issue     : {->blocks[]},
					 transition: it ,
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_06_Case_02 -$it _when current issue not having issues linked to it through the is blocked by link type:",
			 expected  : -3,
			 parameters: [
					 issue     : {->defaultIssue[]},
					 transition: it ,
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_16_TC_07-verify require certain related issues_current issue must have at least 1 issues linked to it through the clones link type
[
		'verify_require_certain_related_issues_linkByClones',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_07_Case_01 -$it _when current issue have issue linked to it through the clones link type:",
			 expected  : 0,
			 parameters: [
					 issue     : {->issueLinks[]},
					 transition: it ,
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_07_Case_02 -$it _when current issue not have issues linked to it through the clones link type:",
			 expected  : -3,
			 parameters: [
					 issue     : {->defaultIssue[]},
					 transition: it ,
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_16_TC_08-verify require certain related issues_current issue must have at least 1 issues linked to it through the is cloned by link type
[
		'verify_require_certain_related_issues_linkByIsClonedBy',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_08_Case_01 -$it _when current issue have issue linked to it through the is cloned by link type:",
			 expected  : 0,
			 parameters: [
					 issue     : {->clones[]},
					 transition: it ,
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_08_Case_02 -$it _when current issue not having issues linked to it through the is cloned by link type:",
			 expected  : -3,
			 parameters: [
					 issue     : {->defaultIssue[]},
					 transition: it ,
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_16_TC_09-verify require certain related issues_current issue must have at least 1 issues linked to it through the duplicates link type
[
		'verify_require_certain_related_issues_linkByDuplicates',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_09_Case_01 -$it _when current issue have issue linked to it through the duplicates link type:",
			 expected  : 0,
			 parameters: [
					 issue     : {->issueLinks[]},
					 transition: it ,
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_09_Case_02 -$it _when current issue not having issues linked to it through the duplicates link type:",
			 expected  : -3,
			 parameters: [
					 issue     : {->defaultIssue[]},
					 transition: it ,
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_16_TC_10-verify require certain related issues_current issue must have at least 1 issues linked to it through the is duplicated by link type
[
		'verify_require_certain_related_issues_linkByIsDuplicatedBy',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_10_Case_01 -$it _when current issue have issue linked to it through the is duplicated by link type:",
			 expected  : 0,
			 parameters: [
					 issue     : {->duplicates[]},
					 transition: it ,
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_10_Case_02 -$it _when current issue not having issues linked to it through the is duplicated by link type:",
			 expected  : -3,
			 parameters: [
					 issue     : {->defaultIssue[]},
					 transition: it ,
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_16_TC_11-verify require certain related issues_current issue must have at least 1 issues linked to it through the relates to link type
[
		'verify_require_certain_related_issues_linkByRelatesTo',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_11_Case_01 -$it _when current issue have issue linked to it through the relates to link type:",
			 expected  : 0,
			 parameters: [
					 issue     : {->issueLinks[]},
					 transition: it ,
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_11_Case_02 -$it _when current issue not having issues linked to it through the relates to link type:",
			 expected  : -3,
			 parameters: [
					 issue     : {->defaultIssue[]},
					 transition: it ,
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_16_TC_12-verify require certain related issues_The following Groovy expression:issue.getLinkedIssues() must return at least 1 issues
[
		'verify_require_certain_related_issues_returnsByGroovyExpression',
].collect {
	if(!isCloud) {
		gint.taskHelper.add([
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_12_Case_01 -$it _when the following Groovy expression:$returnsLinkedIssues return at least 1 issue:",
				 expected  : 0,
				 parameters: [
						 issue     : { -> issueLinks[] },
						 transition: it,
				 ]
				],
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_12_Case_02 -$it _The following Groovy expression:$returnsLinkedIssues not returns issues:",
				 expected  : -3,
				 parameters: [
						 issue     : { -> defaultIssue[] },
						 transition: it,
				 ]
				],
		])
	}
}

// RELATED_ISSUES_VALIDATOR_TS_16_TC_13-verify require certain related issues_The following JQL search:issuetype = Task and summary~JQL_ISSUE must return at least 1 issues
[
		'verify_require_certain_related_issues_returnsFromJqlSearch',
].collect {
	if(!isCloud) {
		gint.taskHelper.add([
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_13_Case_01 -$it _when the following JQL search:$jqlSearchExpression return 1 issue:",
				 expected  : 0,
				 parameters: [
						 issue     : { -> defaultIssue[] },
						 transition: it,
				 ]
				],
				[action    : 'updateIssue',
				 ext       : ":change the issue type to check when jql search not returns any issues for:" + it,
				 sleepAfter: 3000,
				 parameters: [
						 issue    : { -> jqlIssue[] },
						 issueType: "Bug",
				 ]
				],
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_13_Case_02 -$it _The following JQL search:$jqlSearchExpression must return at least 1 issues:",
				 expected  : -3,
				 parameters: [
						 issue     : { -> defaultIssue[] },
						 transition: it,
				 ]
				],
				[action    : 'updateIssue',
				 ext       : ":change the issue type after checking when jql search not returns any issues for:" + it,
				 sleepAfter: 3000,
				 parameters: [
						 issue    : { -> jqlIssue[] },
						 issueType: "Task",
				 ]
				],
		])
	}
}

// RELATED_ISSUES_VALIDATOR_TS_16_TC_14-verify require certain related issues_The current issue must have at least 2 issues linked to it through the relates to link type
[
		'Verify_Issue_constraints_min_two_linkByRelatesTo'
].collect {
	if(!isCloud) {
		gint.taskHelper.add([
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_14_Case_01 _$it _when current issue not having at least 2 issues linked to it through the relates to link type:",
				 expected  : -3,
				 parameters: [
						 issue     : { -> issueLinks[] },
						 transition: it,
				 ]
				],
				[action    : 'linkIssue', ext: ": by relates to link type to check min issue constraints option:",
				 parameters: [
						 issue  : { -> issueLinks[] },
						 toIssue: { -> relatesToIssue2[] },
						 link   : 'relates to'
				 ]
				],
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_14_Case_02 _$it _when current issue having at least 2 issues linked to it through the relates to link type:",
				 expected  : 0,
				 parameters: [
						 issue     : { -> issueLinks[] },
						 transition: it,
				 ]
				],
		])
	}
}

// RELATED_ISSUES_VALIDATOR_TS_16_TC_15-verify require certain related issues_The current issue must not have more than 2 issues linked to it through the relates to link type
[
		'Verify_Issue_constraints_max_two_linkByRelatesTo'
].collect {
	if(!isCloud) {
		gint.taskHelper.add([
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_15_Case_01 _$it _when current issue not having more than 2 issues linked to it through the relates to link type:",
				 expected  : 0,
				 parameters: [
						 issue     : { -> issueLinks[] },
						 transition: it,
				 ]
				],
				[action    : 'linkIssue', ext: ": by relates to link type to check max issue constraints option:",
				 parameters: [
						 issue  : { -> issueLinks[] },
						 toIssue: { -> relatesToIssue3[] },
						 link   : 'relates to'
				 ]
				],
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_15_Case_02 _$it _when current issue having more than 3 issues linked to it through the relates to link type:",
				 expected  : -3,
				 parameters: [
						 issue     : { -> issueLinks[] },
						 transition: it,
				 ]
				],
				[action    : 'deleteLink', ext: ': issues linked to check min_issue constraints:',
				 parameters: [
						 issue  : { -> issueLinks[] },
						 toIssue: { -> relatesToIssue2[] },
						 link   : 'relates to'
				 ]
				],
				[action    : 'deleteLink', ext: ': issues linked to check max_issue constraints:',
				 parameters: [
						 issue  : { -> issueLinks[] },
						 toIssue: { -> relatesToIssue3[] },
						 link   : 'relates to'
				 ]
				],
		])
	}
}

// RELATED_ISSUES_VALIDATOR_TS_16_TC_16- The current issue must have at least 3 and at most 6 issues linked to it through the relates to link type
[
		'Verify_Issue_constraints_min_three_max_six_linkByRelatesTo'
].collect {
	if(!isCloud) {
		gint.taskHelper.add([
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_16_Case_01 _$it _when current issue not have at least 3 and at most 6 issues linked to it through the relates to link type:",
				 expected  : -3,
				 parameters: [
						 issue     : { -> issueLinks[] },
						 transition: it,
				 ]
				],
				[action    : 'linkIssue', ext: ": by relates to link type to check min and max issue constraints option:" + it,
				 parameters: [
						 issue  : { -> issueLinks[] },
						 toIssue: { -> relatesToIssue2[] },
						 link   : 'relates to'
				 ]
				],
				[action    : 'linkIssue', ext: ": by relates to link type to check min and max issue constraints option2:" + it,
				 parameters: [
						 issue  : { -> issueLinks[] },
						 toIssue: { -> relatesToIssue3[] },
						 link   : 'relates to'
				 ]
				],
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_16_Case_02 _$it _when current issue having at least 3 issues linked to it through the relates to link type:",
				 expected  : 0,
				 parameters: [
						 issue     : { -> issueLinks[] },
						 transition: it,
				 ]
				],
		])
	}
}

// link the issues to check the issue constraint options for max 6 issues by relates to link type
def relatesToIssuesList = [
		issue2 : {->relatesToIssue2[]},
		issue3 : {->relatesToIssue3[]},
		issue4 : {->relatesToIssue4[]},
		issue5 : {->relatesToIssue5[]},
		issue6 : {->relatesToIssue6[]},
		issue7 : {->relatesToIssue7[]}
]

relatesToIssuesList.eachWithIndex { key, value, i ->
	gint.taskHelper.add(
			[action    : 'linkIssue', ext: ": by relates to link type to check max issue constraints option:" + key,
			 parameters: [
					 issue  : { -> issueLinks[] },
					 toIssue: value,
					 link   : 'relates to'
			 ],
			])
}

[
		'Verify_Issue_constraints_min_three_max_six_linkByRelatesTo'
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_16_Case_03 _$it _when current issue have at least 3 and but more than 6 ie 7 issues linked to it through the relates to link type:",
			 expected  : -3,
			 parameters: [
					 issue     : { -> issueLinks[] },
					 transition: it,
			 ]
			],
	])
}

// delete link between issues to while check the issue constraint options for max 6 issues by relates to link type
relatesToIssuesList.eachWithIndex { key, value, i ->
	gint.taskHelper.add(
			[action    : 'deleteLink', ext: ": by relates to link type to check max issue constraints option:" + key,
			 parameters: [
					 issue  : { -> issueLinks[] },
					 toIssue: value,
					 link   : 'relates to'
			 ],
			])
}

// RELATED_ISSUES_VALIDATOR_TS_16_TC_17 -current issue must have at least 1 and at most 0 issues linked to it through the relates to link type, and at least one of them must respect the following condition
[
		'verify_condition_on_related_issues_checkAssignee'
].each {
	if(!isCloud) {
		gint.taskHelper.add([
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_17_Case_01 -$it _when current issue not having at least 1 issues linked to it through the relates to link type which respect the following condition_issue must have assignee $testUser:",
				 expected  : -3,
				 parameters: [
						 issue     : { -> issueLinks[] },
						 transition: it,
				 ]
				],
				[action    : 'assignIssue',
				 ext: ": current issue to _ $testUser to_ $it :",
				 sleep: 5000,
				 parameters: [
						 issue   : { -> relatesTo[] },
						 assignee: testUser,
				 ],
				],
				[action    : 'assignIssue',
				 ext: ": target issue to _ $testUser to_ $it :",
				 sleep: 5000,
				 parameters: [
						 issue   : { -> issueLinks[] },
						 assignee: testUser,
				 ],
				],
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_16_TC_17_Case_02 -$it _when current issue having at least 1 issues linked to it through the relates to link type which respect the following condition_issue must have assignee $testUser:",
				 expected  : 0,
				 sleep: 5000,
				 parameters: [
						 issue     : { -> issueLinks[] },
						 transition: it,
				 ]
				],
				[action    : 'assignIssue',
				 ext: ": current issue _ UNASSIGNED issue- after_ $it :",
				 parameters: [
						 issue   : { -> relatesTo[] },
						 assignee: " ",
				 ],
				],
				[action    : 'assignIssue',
				 ext: ": target issue _ UNASSIGNED issue- after_ $it :",
				 parameters: [
						 issue   : { -> issueLinks[] },
						 assignee: " ",
				 ],
				],
		])
	}
}



/* -----------------------------------------------------------------------------------------------------------------------------------
   -----------------------------------------------------------------------------------------------------------------------------------
                                          RELATED_ISSUES_VALIDATOR => CHECK RELATED ISSUES TESTS
   ------------------------------------------------------------------------------------------------------------------------------------
   ----------------------------------------------------------------------------------------------------------------------------------- */

// RELATED_ISSUES_VALIDATOR_TS_17_TC_01 -verify Check related issues and verify with different - Target issues
[
		'verify_check_related_issues_subtask',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_01_Case_01 -$it _when issue having subtask not respecting given condition :",
			 expected  : -3,
			 parameters: [
					 issue     : {->parent[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ":  change issue priority to high satisfy the criteria to check: $it",
			 parameters: [
					 issue: {->parent[]},
					 priority: "High",
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_01_Case_02 -$it _when issue having subtask respecting given condition:",
			 expected  : 0,
			 parameters: [
					 issue     : {->parent[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to low satisfy the criteria after checking: $it",
			 parameters: [
					 issue: {->parent[]},
					 priority: "Low",
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_17_TC_02-verify Check related issues and verify with different - Target issues
[
		'verify_check_related_issues_issueBelongsToEpic',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 expected  : -3,
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_02_Case_01 -$it _when epic having issueBelongsToEpic not respecting condition:",
			 parameters: [
					 issue     : {->epic[]},
					 transition: it
			 ]
			],
			[action: 'updateIssue', ext: ":  change issue priority to high satisfy the criteria to check: $it",
			 parameters: [
					 issue: {->epic[]},
					 priority: "High",
			 ]
			],
			[action    : 'transitionIssue',
			 expected  : 0,
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_02_Case_02 -$it _when epic having issueBelongsToEpic respecting condition:",
			 parameters: [
					 issue     : {->epic[]},
					 transition: it ]
			],
			[action: 'updateIssue', ext: ": change issue priority to low satisfy the criteria after checking: $it",
			 parameters: [
					 issue: {->epic[]},
					 priority: "Low",
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_17_TC_03-verify Check related issues and verify with different - Target issues
[
		'verify_check_related_issues_childPortfolio',
].collect {
	if(!isCloud) {
		gint.taskHelper.add([
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_03_Case_01 -$it _when parent issue not having issues child issues in portfolio hierarchy respecting given condition:",
				 expected  : -3,
				 parameters: [
						 issue     : { -> initiative[] },
						 transition: it,
				 ]
				],
				[action    : 'updateIssue', ext: ": change issue priority to high satisfy the criteria to check: $it",
				 parameters: [
						 issue   : { -> initiative[] },
						 priority: "High",
				 ]
				],
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_03_Case_02 -$it _when parent issue having issues child issues in portfolio hierarchy respecting given condition:",
				 expected  : 0,
				 parameters: [
						 issue     : { -> initiative[] },
						 transition: it,
				 ]
				],
				[action    : 'updateIssue', ext: ": change issue priority to low satisfy the criteria after checking: $it",
				 parameters: [
						 issue   : { -> initiative[] },
						 priority: "Low",
				 ]
				],
		])
	}
}

// RELATED_ISSUES_VALIDATOR_TS_51_TC_04-verify Check related issues and verify with different - Target issues
[
		'verify_check_related_issues_linkByAnyLink',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_04_Case_01 -$it _current issue not having issue linked to it through any link type which respect given condition:",
			 expected  : -3,
			 parameters: [
					 issue     : {->blocks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to high satisfy the criteria to check: $it",
			 parameters: [
					 issue: {->issueLinks[]},
					 priority: "High",
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_04_Case_02 -$it _current issue having issue linked to it through any link type which respect given condition:",
			 expected  : 0,
			 parameters: [
					 issue     : {->issueLinks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to low satisfy the criteria after checking: $it",
			 parameters: [
					 issue: {->issueLinks[]},
					 priority: "Low",
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_17_TC_05-verify Check related issues and verify with different - Target issues
[
		'verify_check_related_issues_linkByBlock',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_05_Case_01 -$it _when current issue not having at least 1 issue linked to it through the blocks link type_respect given condition:",
			 expected  : -3,
			 parameters: [
					 issue     : {->issueLinks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to high satisfy the criteria to check: $it",
			 parameters: [
					 issue: {->issueLinks[]},
					 priority: "High",
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_05_Case_02 -$it _when current issue having at least 1 issue linked to it through the blocks link type_respect given condition:",
			 expected  : 0,
			 parameters: [
					 issue     : {->issueLinks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to Low after checking: $it",
			 parameters: [
					 issue: {->issueLinks[]},
					 priority: "Low",
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_17_TC_06-verify Check related issues and verify with different - Target issues
[
		'verify_check_related_issues_linkByisBlockedBy',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_06_Case_01 -$it _when current issue have 1 issue linked to it through the is blocked by link type:",
			 expected  : -3,
			 parameters: [
					 issue     : {->blocks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to high satisfy the criteria to check: $it",
			 parameters: [
					 issue: {->blocks[]},
					 priority: "High",
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_06_Case_02 -$it _when current issue not having issues linked to it through the is blocked by link type:",
			 expected  : 0,
			 parameters: [
					 issue     : {->blocks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to Low after checking: $it",
			 parameters: [
					 issue: {->blocks[]},
					 priority: "Low",
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_17_TC_07-verify Check related issues and verify with different - Target issues
[
		'verify_check_related_issues_linkByClones',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_07_Case_01 -$it _when current issue have issue linked to it through the clones link type_not respecting given condition:",
			 expected  : -3,
			 parameters: [
					 issue     : {->issueLinks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to high satisfy the criteria to check: $it",
			 parameters: [
					 issue: {->issueLinks[]},
					 priority: "High",
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_07_Case_02 -$it _when current issue not have issues linked to it through the clones link type_respecting given condition:",
			 expected  : 0,
			 parameters: [
					 issue     : {->issueLinks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to Low after checking: $it",
			 parameters: [
					 issue: {->issueLinks[]},
					 priority: "Low",
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_17_TC_08-verify Check related issues and verify with different - Target issues
[
		'verify_check_related_issues_linkByIsClonedBy',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_08_Case_01 -$it _when current issue have issue linked to it through the is cloned by link type:",
			 expected  : -3,
			 parameters: [
					 issue     : {->clones[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to High for checking: $it",
			 parameters: [
					 issue: {->clones[]},
					 priority: "High",
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_08_Case_02 -$it _when current issue not having issues linked to it through the is cloned by link type:",
			 expected  : 0,
			 parameters: [
					 issue     : {->clones[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to Low after checking: $it",
			 parameters: [
					 issue: {->clones[]},
					 priority: "Low",
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_17_TC_09-verify Check related issues and verify with different - Target issues
[
		'verify_check_related_issues_linkByDuplicates',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_09_Case_01 -$it _when current issue have issue linked to it through the duplicates link type_not respecting condition:",
			 expected  : -3,
			 parameters: [
					 issue     : {->issueLinks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to High for checking: $it",
			 parameters: [
					 issue: {->issueLinks[]},
					 priority: "High",
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_09_Case_02 -$it _when current issue not having issues linked to it through the duplicates link type_respecting condition:",
			 expected  : 0,
			 parameters: [
					 issue     : {->issueLinks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to Low after checking: $it",
			 parameters: [
					 issue: {->issueLinks[]},
					 priority: "Low",
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_17_TC_10-verify Check related issues and verify with different - Target issues
[
		'verify_check_related_issues_linkByIsDuplicatedBy',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_10_Case_01 -$it _when current issue have issue linked to it through the is duplicated by link type:",
			 expected  : -3,
			 parameters: [
					 issue     : {->duplicates[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to High for checking: $it",
			 parameters: [
					 issue: {->duplicates[]},
					 priority: "High",
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_10_Case_02 -$it _when current issue not having issues linked to it through the is duplicated by link type:",
			 expected  : 0,
			 parameters: [
					 issue     : {->duplicates[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to Low after checking: $it",
			 parameters: [
					 issue: {->duplicates[]},
					 priority: "Low",
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_17_TC_11-verify Check related issues and verify with different - Target issues
[
		'verify_check_related_issues_linkByRelatesTo',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_11_Case_01 -$it _when current issue have issue linked to it through the relates to link type:",
			 expected  : -3,
			 parameters: [
					 issue     : {->issueLinks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to High for checking: $it",
			 parameters: [
					 issue: {->issueLinks[]},
					 priority: "High",
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_11_Case_02 -$it _when current issue not having issues linked to it through the relates to link type:",
			 expected  : 0,
			 parameters: [
					 issue     : {->issueLinks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to Low after checking: $it",
			 parameters: [
					 issue: {->issueLinks[]},
					 priority: "Low",
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_17_TC_12-verify check certain related issues_The following Groovy expression:issue.getLinkedIssues() must return at least 1 issues
[
		'verify_check_related_issues_returnsByGroovyExpression',
].collect {
	if(!isCloud) {
		gint.taskHelper.add([
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_12_Case_01 -$it _when the following Groovy expression:$returnsLinkedIssues return at least 1 issue:",
				 expected  : -3,
				 parameters: [
						 issue     : { -> issueLinks[] },
						 transition: it,
				 ]
				],
				[action    : 'updateIssue', ext: ": change issue priority to High for checking: $it",
				 parameters: [
						 issue   : { -> issueLinks[] },
						 priority: "High",
				 ]
				],
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_12_Case_02 -$it _The following Groovy expression:$returnsLinkedIssues not returns issues:",
				 expected  : 0,
				 parameters: [
						 issue     : { -> issueLinks[] },
						 transition: it,
				 ]
				],
				[action    : 'updateIssue', ext: ": change issue priority to Low after checking: $it",
				 parameters: [
						 issue   : { -> issueLinks[] },
						 priority: "Low",
				 ]
				],
		])
	}
}

// RELATED_ISSUES_VALIDATOR_TS_17_TC_13-verify check certain related issues_The following Groovy expression:issue.getLinkedIssues() must return at least 1 issues
[
		'verify_check_related_issues_returnsFromJqlSearch',
].collect {
	if(!isCloud) {
		gint.taskHelper.add([
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_13_case_01 -$it _when the following JQL search:$jqlSearchExpression return 1 issue:",
				 expected  : -3,
				 parameters: [
						 issue     : { -> defaultIssue[] },
						 transition: it,
				 ]
				],
				[action    : 'updateIssue', ext: ": change issue priority to High for checking: $it",
				 parameters: [
						 issue   : { -> defaultIssue[] },
						 priority: "High",
				 ]
				],
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_17_TC_13_Case_02 -$it _The following JQL search:$jqlSearchExpression must return at least 1 issues:",
				 expected  : 0,
				 parameters: [
						 issue     : { -> defaultIssue[] },
						 transition: it,
				 ]
				],
				[action    : 'updateIssue', ext: ": change issue priority to Low after checking: $it",
				 parameters: [
						 issue   : { -> defaultIssue[] },
						 priority: "Low",
				 ]
				],
		])
	}
}



/* -----------------------------------------------------------------------------------------------------------------------------------
   -----------------------------------------------------------------------------------------------------------------------------------
                                     RELATED_ISSUES_VALIDATOR => FORBID CERTAIN RELATED ISSUES
   -----------------------------------------------------------------------------------------------------------------------------------
   ----------------------------------------------------------------------------------------------------------------------------------- */

// RELATED_ISSUES_VALIDATOR_TS_18_TC_01-verify Forbid certain related issues and verify with different - Target issues
[
		'forbid_certain_related_issues_subtask',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_01_Case_01 -$it _when issue having subtask not respecting given condition :",
			 expected  : 0,
			 parameters: [
					 issue     : {->parent[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ":  change issue priority to high satisfy the criteria to check: $it",
			 parameters: [
					 issue: {->parent[]},
					 priority: "High",
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_01_Case_02 -$it _when issue having subtask respecting given condition:",
			 expected  : -3,
			 parameters: [
					 issue     : {->parent[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to low satisfy the criteria after checking: $it",
			 parameters: [
					 issue: {->parent[]},
					 priority: "Low",
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_18_TC_02-verify Forbid certain related issues and verify with different - Target issues
[
		'forbid_certain_related_issues_issueBelongsToEpic',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 expected  : 0,
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_02_Case_01 -$it _when epic having issueBelongsToEpic not respecting condition:",
			 parameters: [
					 issue     : {->epic[]},
					 transition: it
			 ]
			],
			[action: 'updateIssue', ext: ":  change issue priority to high satisfy the criteria to check: $it",
			 parameters: [
					 issue: {->epic[]},
					 priority: "High",
			 ]
			],
			[action    : 'transitionIssue',
			 expected  : -3,
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_02_Case_02 -$it _when epic having issueBelongsToEpic respecting condition:",
			 parameters: [
					 issue     : {->epic[]},
					 transition: it ]
			],
			[action: 'updateIssue', ext: ": change issue priority to low satisfy the criteria after checking: $it",
			 parameters: [
					 issue: {->epic[]},
					 priority: "Low",
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_18_TC_03-verify Forbid certain related issues and verify with different - Target issues
[
		'forbid_certain_related_issues_childPortfolio',
].collect {
	if(!isCloud) {
		gint.taskHelper.add([
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_03_Case_01 -$it _when parent issue not having issues child issues in portfolio hierarchy respecting given condition:",
				 expected  : 0,
				 parameters: [
						 issue     : { -> initiative[] },
						 transition: it,
				 ]
				],
				[action    : 'updateIssue', ext: ": change issue priority to high satisfy the criteria to check: $it",
				 parameters: [
						 issue   : { -> initiative[] },
						 priority: "High",
				 ]
				],
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_03_Case_02 -$it _when parent issue having issues child issues in portfolio hierarchy respecting given condition:",
				 expected  : -3,
				 parameters: [
						 issue     : { -> initiative[] },
						 transition: it,
				 ]
				],
				[action    : 'updateIssue', ext: ": change issue priority to low satisfy the criteria after checking: $it",
				 parameters: [
						 issue   : { -> initiative[] },
						 priority: "Low",
				 ]
				],
		])
	}
}

// RELATED_ISSUES_VALIDATOR_TS_18_TC_04-verify Forbid certain related issues and verify with different - Target issues
[
		'forbid_certain_related_issues_linkByAnyLink',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_04_Case_01 -$it _current issue not having issue linked to it through any link type which respect given condition:",
			 expected  : 0,
			 parameters: [
					 issue     : {->blocks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to high satisfy the criteria to check: $it",
			 parameters: [
					 issue: {->issueLinks[]},
					 priority: "High",
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_04_Case_02 -$it _current issue having issue linked to it through any link type which respect given condition:",
			 expected  : -3,
			 parameters: [
					 issue     : {->issueLinks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to low satisfy the criteria after checking: $it",
			 parameters: [
					 issue: {->issueLinks[]},
					 priority: "Low",
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_18_TC_05-verify Forbid certain related issues and verify with different - Target issues
[
		'forbid_certain_related_issues_linkByBlock',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_05_Case_01 -$it _when current issue not having at least 1 issue linked to it through the blocks link type_respect given condition:",
			 expected  : 0,
			 parameters: [
					 issue     : {->issueLinks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to high satisfy the criteria to check: $it",
			 parameters: [
					 issue: {->issueLinks[]},
					 priority: "High",
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_05_Case_02 -$it _when current issue having at least 1 issue linked to it through the blocks link type_respect given condition:",
			 expected  : -3,
			 parameters: [
					 issue     : {->issueLinks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to Low after checking: $it",
			 parameters: [
					 issue: {->issueLinks[]},
					 priority: "Low",
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_18_TC_06-verify Forbid certain related issues and verify with different - Target issues
[
		'forbid_certain_related_issues_linkByisBlockedBy',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_06_Case_01 -$it _when current issue have 1 issue linked to it through the is blocked by link type:",
			 expected  : 0,
			 parameters: [
					 issue     : {->blocks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to high satisfy the criteria to check: $it",
			 parameters: [
					 issue: {->blocks[]},
					 priority: "High",
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_06_Case_02 -$it _when current issue not having issues linked to it through the is blocked by link type:",
			 expected  : -3,
			 parameters: [
					 issue     : {->blocks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to Low after checking: $it",
			 parameters: [
					 issue: {->blocks[]},
					 priority: "Low",
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_18_TC_07-verify Forbid certain related issues and verify with different - Target issues
[
		'forbid_certain_related_issues_linkByClones',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_07_Case_01 -$it _when current issue have issue linked to it through the clones link type_not respecting given condition:",
			 expected  : 0,
			 parameters: [
					 issue     : {->issueLinks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to high satisfy the criteria to check: $it",
			 parameters: [
					 issue: {->issueLinks[]},
					 priority: "High",
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_07_Case_02 -$it _when current issue not have issues linked to it through the clones link type_respecting given condition:",
			 expected  : -3,
			 parameters: [
					 issue     : {->issueLinks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to Low after checking: $it",
			 parameters: [
					 issue: {->issueLinks[]},
					 priority: "Low",
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_18_TC_08-verify Forbid certain related issues and verify with different - Target issues
[
		'forbid_certain_related_issues_linkByIsClonedBy',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_08_Case_01 -$it _when current issue have issue linked to it through the is cloned by link type:",
			 expected  : 0,
			 parameters: [
					 issue     : {->clones[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to High for checking: $it",
			 parameters: [
					 issue: {->clones[]},
					 priority: "High",
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_08_Case_02 -$it _when current issue not having issues linked to it through the is cloned by link type:",
			 expected  : -3,
			 parameters: [
					 issue     : {->clones[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to Low after checking: $it",
			 parameters: [
					 issue: {->clones[]},
					 priority: "Low",
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_18_TC_09-verify Forbid certain related issues and verify with different - Target issues
[
		'forbid_certain_related_issues_linkByDuplicates',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_09_Case_01 -$it _when current issue have issue linked to it through the duplicates link type_not respecting condition:",
			 expected  : 0,
			 parameters: [
					 issue     : {->issueLinks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to High for checking: $it",
			 parameters: [
					 issue: {->issueLinks[]},
					 priority: "High",
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_09_Case_02 -$it _when current issue not having issues linked to it through the duplicates link type_respecting condition:",
			 expected  : -3,
			 parameters: [
					 issue     : {->issueLinks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to Low after checking: $it",
			 parameters: [
					 issue: {->issueLinks[]},
					 priority: "Low",
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_18_TC_10-verify Forbid certain related issues and verify with different - Target issues
[
		'forbid_certain_related_issues_linkByIsDuplicatedBy',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_10_Case_01 -$it _when current issue have issue linked to it through the is duplicated by link type:",
			 expected  : 0,
			 parameters: [
					 issue     : {->duplicates[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to High for checking: $it",
			 parameters: [
					 issue: {->duplicates[]},
					 priority: "High",
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_10_Case_02 -$it _when current issue not having issues linked to it through the is duplicated by link type:",
			 expected  : -3,
			 parameters: [
					 issue     : {->duplicates[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to Low after checking: $it",
			 parameters: [
					 issue: {->duplicates[]},
					 priority: "Low",
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_18_TC_11-verify Forbid certain related issues and verify with different - Target issues
[
		'forbid_certain_related_issues_linkByRelatesTo',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_11_Case_01 -$it _when current issue have issue linked to it through the relates to link type:",
			 expected  : 0,
			 parameters: [
					 issue     : {->issueLinks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to High for checking: $it",
			 parameters: [
					 issue: {->issueLinks[]},
					 priority: "High",
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_11_Case_02 -$it _when current issue not having issues linked to it through the relates to link type:",
			 expected  : -3,
			 parameters: [
					 issue     : {->issueLinks[]},
					 transition: it ,
			 ]
			],
			[action: 'updateIssue', ext: ": change issue priority to Low after checking: $it",
			 parameters: [
					 issue: {->issueLinks[]},
					 priority: "Low",
			 ]
			],
	])
}

// RELATED_ISSUES_VALIDATOR_TS_18_TC_12-verify Forbid certain related issues_The following Groovy expression:issue.getLinkedIssues() must return at least 1 issues
[
		'forbid_certain_related_issues_returnsByGroovyExpression',
].collect {
	if(!isCloud) {
		gint.taskHelper.add([
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_12_Case_01 -$it _when the following Groovy expression:$returnsLinkedIssues return at least 1 issue:",
				 expected  : 0,
				 parameters: [
						 issue     : { -> issueLinks[] },
						 transition: it,
				 ]
				],
				[action    : 'updateIssue', ext: ": change issue priority to High for checking: $it",
				 parameters: [
						 issue   : { -> issueLinks[] },
						 priority: "High",
				 ]
				],
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_12_Case_02 -$it _The following Groovy expression:$returnsLinkedIssues not returns issues:",
				 expected  : -3,
				 parameters: [
						 issue     : { -> issueLinks[] },
						 transition: it,
				 ]
				],
				[action    : 'updateIssue', ext: ": change issue priority to Low after checking: $it",
				 parameters: [
						 issue   : { -> issueLinks[] },
						 priority: "Low",
				 ]
				],
		])
	}
}

// RELATED_ISSUES_VALIDATOR_TS_18_TC_13-verify forbid certain related issues_The following Groovy expression:issue.getLinkedIssues() must return at least 1 issues
[
		'forbid_certain_related_issues_returnsFromJqlSearch',
].collect {
	if(!isCloud) {
		gint.taskHelper.add([
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_13_case_01 -$it _when the following JQL search:$jqlSearchExpression return 1 issue:",
				 expected  : 0,
				 parameters: [
						 issue     : { -> defaultIssue[] },
						 transition: it,
				 ]
				],
				[action    : 'updateIssue', ext: ": change issue priority to High for checking: $it",
				 parameters: [
						 issue   : { -> defaultIssue[] },
						 priority: "High",
				 ]
				],
				[action    : 'transitionIssue',
				 ext       : ":RELATED_ISSUES_VALIDATOR_TS_18_TC_13_Case_02 -$it _The following JQL search:$jqlSearchExpression must return at least 1 issues:",
				 expected  : -3,
				 parameters: [
						 issue     : { -> defaultIssue[] },
						 transition: it,
				 ]
				],
				[action    : 'updateIssue', ext: ": change issue priority to Low after checking: $it",
				 parameters: [
						 issue   : { -> defaultIssue[] },
						 priority: "Low",
				 ]
				],
		])
	}
}

// RELATED_ISSUES_VALIDATOR_TS_42_-Verify Validator scope -Conditional validation
['verify_validator_scope_conditional_validation'].collect {
	gint.taskHelper.add([
			[action: 'updateIssue',
			 ext: ": change issue priority to Low for checking: $it",
			 parameters: [
					 issue: {->defaultIssue[]},
					 priority: "Low",
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TC_42_case_01 -$it _when issue not satisfies the condition_skip the validator:",
			 expected  : 0,
			 parameters: [
					 issue     : {->defaultIssue[]},
					 transition: it ,
			 ],
			 failData : ["$errorMessage"],
			],
			[action: 'updateIssue',
			 ext: ": change issue priority to High for checking: $it",
			 parameters: [
					 issue: {->defaultIssue[]},
					 priority: "High",
			 ]
			],
			[action    : 'transitionIssue',
			 ext       : ":RELATED_ISSUES_VALIDATOR_TC_42_Case_02 -$it _when issue satisfies the condition_not skipping the validator:",
			 expected  : -3,
			 parameters: [
					 issue     : {->defaultIssue[]},
					 transition: it ,
			 ],
			 data : ["$errorMessage"],
			],
			[action: 'updateIssue', ext: ": change issue priority to Low after checking: $it",
			 parameters: [
					 issue: {->defaultIssue[]},
					 priority: "Low",
			 ]
			],
	])
}
