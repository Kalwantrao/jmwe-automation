buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.gint:gint-atlassian:3.8.4"
	}
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/utils.gradle'

tearDown()
addWorkflow()

def relatedIssueFields_default_server = [
		"maxLinkedIssues=",
		"minLinkedIssues=1",
		"validatorMode=requireLinks",
		"groovyExpression=",
		"checkAllLinkedIssues=yes",
		"errorMessage=",
		"correlationId="
]
def functionKey = info?.isCloud? functionKey.relatedIssuesValidatorCloud : functionKey.relatedIssuesValidatorServer

def targetIssueFieldsCloud_linkedIssues = [
		linkByAnyLink: "*:*",

]
def relatedIssue = info?.isCloud ? targetIssueFieldsCloud_linkedIssues : relatedIssueServer

def fieldsToRemove = ["currentIssue", "parentIssue", "epicOfTheCurrentIssue","parentPortfolio"]

fieldsToRemove.each { key ->
	relatedIssue.remove(key)
}

relatedIssue.eachWithIndex { key, value, i ->
	def defaultFieldsCloud = ["condition.id=9def4812-c8d0-45eb-9903-21dcbe2a70be"]
	def targetIssueFieldsMap = [
			validatorMode:"requireLinks",
			selectedLinkTypeId:"*",
			selectedLinkTypeDirection:"*",
			selectedIssueTypeId:"",
			anyOrEvery:"noCond",
			condition:"true",
			expression:"(issue.links.some(issueLink => (true)))"
	]
	def targetIssueString = new groovy.json.JsonBuilder(targetIssueFieldsMap).toString()
	def targetIssue = "condition.config-9def4812-c8d0-45eb-9903-21dcbe2a70be=${targetIssueString}"

	defaultFieldsCloud.add(targetIssue)

	def transition = 'relatedIssueValidator_requireLinks'
	def fields = info?.isCloud? defaultFieldsCloud.each{element -> element } : relatedIssueFields_default_server + "selectedLinkType=$value"
	addTransitionFunction(transition + i, 'validator', fields, functionKey)
}

relatedIssue.eachWithIndex { key, value, i ->
	def defaultFieldsCloud = ["validator.id=9def4812-c8d0-45eb-9903-21dcbe2a70be"]
	def targetIssueFieldsMap = [
			"validatorMode":"checkLinks",
			selectedLinkTypeId:"*",
			selectedLinkTypeDirection:"*",
			selectedIssueTypeId:"",
			anyOrEvery:"any",
			validator:"!!issue.priority && issue.priority.name == 'High'",
			expression:"(!issue.links || issue.links.length == 0 || issue.links.some(issueLink => (!!issue.priority && issue.priority.name == 'High')))"
	]
	def targetIssueString = new groovy.json.JsonBuilder(targetIssueFieldsMap).toString()
	def targetIssue = "validator.config-9def4812-c8d0-45eb-9903-21dcbe2a70be=${targetIssueString}"

	defaultFieldsCloud.add(targetIssue)

	relatedIssueFields_default_server[3] = "groovyExpression=$groovyExpression.checkPriorityHigh"
	relatedIssueFields_default_server[2] = "validatorMode=checkLinks"
	def transition = 'relatedIssuevalidator_checkLinks'
	def fields = info?.isCloud? defaultFieldsCloud.each{element -> element } : relatedIssueFields_default_server + "selectedLinkType=$value"
	addTransitionFunction( transition + i, 'validator', fields, functionKey)
}

relatedIssue.eachWithIndex { key, value, i ->
	def defaultFieldsCloud = ["validator.id=9def4812-c8d0-45eb-9903-21dcbe2a70be"]
	def targetIssueFieldsMap = [
			validatorMode:"forbidLinks",
			selectedLinkTypeId:"*",
			selectedLinkTypeDirection:"*",
			selectedIssueTypeId:"",
			anyOrEvery:"any",
			condition:"!!issue.priority && issue.priority.name == 'High'",
			expression:"(!(issue.links.some(issueLink => (!!issue.priority && issue.priority.name == 'High'))))"
	]
	def targetIssueString = new groovy.json.JsonBuilder(targetIssueFieldsMap).toString()
	def targetIssue = "validator.config-9def4812-c8d0-45eb-9903-21dcbe2a70be=${targetIssueString}"

	defaultFieldsCloud.add(targetIssue)

	relatedIssueFields_default_server[2] = "validatorMode=forbidLinks"
	relatedIssueFields_default_server[3] = "groovyExpression=$groovyExpression.checkPriorityHigh"
	def transition = 'relatedIssuevalidator_forbidLinks'
	def fields = info?.isCloud? defaultFieldsCloud.each{element -> element } : relatedIssueFields_default_server + "selectedLinkType=$value"
	addTransitionFunction(transition + i, 'validator', fields, functionKey)
}

relatedIssue.take(2).eachWithIndex { key, value, i ->
	def transition = 'relatedIssuevalidator_issueConstraintsFalse'
	relatedIssueFields_default_server[2] = "validatorMode=requireLinks"
	relatedIssueFields_default_server[0] = "maxLinkedIssues=2"
	relatedIssueFields_default_server[1] = "minLinkedIssues=2"
	def fields = info?.isCloud? "" : relatedIssueFields_default_server + "selectedLinkType=$value"
	addTransitionFunction(transition + i, 'validator', fields, functionKey)
}

relatedIssue.take(2).eachWithIndex { key, value, i ->
	def transition = 'relatedIssuevalidator_issueConstraintsTrue'
	relatedIssueFields_default_server[2] = "validatorMode=requireLinks"
	relatedIssueFields_default_server[0] = "maxLinkedIssues=5"
	relatedIssueFields_default_server[1] = "minLinkedIssues=2"
	def fields = info?.isCloud? "" : relatedIssueFields_default_server + "selectedLinkType=$value"
	addTransitionFunction(transition + i, 'validator', fields, functionKey)
}

['issueReturnFromJqlSearch_require'].each {
	def transition = 'relatedIssuevalidator_issueConstraintsTrue'
	relatedIssueFields_default_server[2] = "validatorMode=requireLinks"
	relatedIssueFields_default_server[0] = "maxLinkedIssues="
	relatedIssueFields_default_server[1] = "minLinkedIssues=1"
	relatedIssueFields_default_server[3] = "groovyExpression="
	def fields = info?.isCloud? "" : relatedIssueFields_default_server + "selectedLinkType=jql:project = $projectName AND summary ~ JQL_ISSUE"
	addTransitionFunction(it, 'validator', fields, functionKey)
}

['issueReturnFromJqlSearch_check'].each {
	def transition = 'relatedIssuevalidator_issueConstraintsTrue'
	relatedIssueFields_default_server[0] = "maxLinkedIssues="
	relatedIssueFields_default_server[1] = "minLinkedIssues=1"
	relatedIssueFields_default_server[2] = "validatorMode=checkLinks"
	relatedIssueFields_default_server[3] = "groovyExpression=$groovyExpression.checkPriorityHigh"
	def fields = info?.isCloud? "" : relatedIssueFields_default_server + "selectedLinkType=jql:project = $projectName AND summary ~ JQL_ISSUE"
	addTransitionFunction( it, 'validator', fields, functionKey)
}
['issueReturnFromJqlSearch_forbid'].each {
	def transition = 'relatedIssuevalidator_issueConstraintsTrue'
	relatedIssueFields_default_server[0] = "maxLinkedIssues="
	relatedIssueFields_default_server[1] = "minLinkedIssues=1"
	relatedIssueFields_default_server[2] = "validatorMode=forbidLinks"
	relatedIssueFields_default_server[3] = "groovyExpression=$groovyExpression.checkPriorityHigh"
	def fields = info?.isCloud? "" : relatedIssueFields_default_server + "selectedLinkType=jql:project = $projectName AND summary ~ JQL_ISSUE"
	addTransitionFunction(it, 'validator', fields, functionKey)
}
createWorkflowScheme()
createProject()

def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'current')
def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[] }], 'Sub-task')
def subtask2 = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[] }, priority: 'High'], 'Sub-task2')
def subtask3 = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[] },priority: 'High'], 'Sub-task3')
def epic = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic')
def issueBelongsToEpic = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {->epic[]}], 'BelongsToEpic')
def issueBelongsToEpic2 = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {->epic[]}, priority: 'High'], 'BelongsToEpic2')
def issueBelongsToEpic3 = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {->epic[]}, priority: 'High'], 'BelongsToEpic3')
def initiative = createIssue([type: 'Initiative', summary: 'JMWE_Issue'], 'Initiative')
def epic_initiative = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative')
def epic_initiative2 = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue", priority: 'High'], 'Epic_initiative2')
def epic_initiative3 = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue", priority: 'High'], 'Epic_initiative3')
def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def blocks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'blocks')
def clones = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'clones')
def duplicates = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'duplicates')
def relatesTo = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'relatesTo')
def jqlIssue = createIssue([type: 'Task', summary: 'JQL_ISSUE'], 'jqlIssue')

updateIssue([issue: {->epic_initiative[]}, field: "Parent Link", value: {->initiative[]}], "parent initiative child epic")

def linkIssuesMap = [
		blocks : {->blocks[]},
		clones : {->clones[]},
		duplicates : {->duplicates[]},
		'relates to': {->relatesTo[]}
]
linkIssuesMap.eachWithIndex { key, value, i ->
	linkIssue([issue: {->issueLinks[]}, toIssue: value, link: "$key"], key)
}

def relatedIssuesMap = [
		{->parent[]}: {->subtask[]},
		{->epic[]}: {->issueBelongsToEpic[]},
		{-> initiative[]} : {->epic_initiative[]},
		{->issueLinks[]} : {->blocks[]},
		{->issueLinks[]} : {->blocks[]},
		{->blocks[]} : {->issueLinks[]},
		{->issueLinks[]} : {->clones[]},
		{->clones[]} : {->issueLinks[]},
		{->issueLinks[]} : {->duplicates[]},
		{->duplicates[]} : {->issueLinks[]},
		{->issueLinks[]} : {->relatesTo[]},
		{->issueLinks[]} : {->relatesTo[]},
		{->issueLinks[]} : {->relatesTo[]},
]

relatedIssue.remove("returnsFromJqlSearch")

[
		'relatedIssuevalidator_requireLinks',
		'relatedIssuevalidator_forbidLinks',
].collect {
	relatedIssuesMap.eachWithIndex { key, value, i ->
		gint.taskHelper.add([
				[action    : 'transitionIssue', ext: ': issue has linked issues :'+ it + i,
				 expected: 0,
				 parameters: [
						 issue     : key,
						 transition: it + i,
				 ]
				],
		])
	}
}

// When issue not having related issues or issues linked to it through specific link types

[
		'relatedIssuevalidator_requireLinks',
].collect {
	relatedIssue.eachWithIndex { key, value, i ->
		gint.taskHelper.add([
				[action    : 'transitionIssue', ext: ': issue not has linked issues_checkRequireLinks :' + it +i,
				 expected  : -3,
				 parameters: [
						 issue     : { -> defaultIssue[] },
						 transition: it + i,
				 ]
				],
		])
	}
}
[
		'relatedIssuevalidator_checkLinks',
].collect {
	relatedIssue.eachWithIndex { key, value, i ->
		gint.taskHelper.add([
				[action    : 'transitionIssue', ext: ': issue not has linked issues_checkLinks :' + it +i,
				 expected  : 0,
				 parameters: [
						 issue     : { -> defaultIssue[] },
						 transition: it + i,
				 ]
				],
		])
	}
}

[
		'relatedIssuevalidator_checkLinks',
].collect {
	relatedIssuesMap.eachWithIndex { currentIssue, targetIssue, i ->
		gint.taskHelper.add([
				[action    : 'transitionIssue', ext: ': issue not has linked issues following given constraints_checkLinks :'+ it + i,
				 expected: -3,
				 parameters: [
						 issue     : currentIssue,
						 transition: it + i,
				 ]
				],
		])
	}
}

[
		'relatedIssuevalidator_checkLinks',
].collect {
	relatedIssuesMap.eachWithIndex { currentIssue, targetIssue, i ->
		gint.taskHelper.add([
				[action: 'updateIssue', ext: ': set priority to High_targetIssue:' + it + i,
				 parameters:[
						 issue: targetIssue,
						 priority: 'High'
				 ]
				],
				[action: 'updateIssue', ext: ': set priority to High_currentIssue:' + it + i,
				 parameters:[
						 issue: currentIssue,
						 priority: 'High'
				 ]
				],
				[action    : 'transitionIssue', ext: ': issue has linked issues following given constraints_requireLinks :'+ it + i,
				 expected: 0,
				 parameters: [
						 issue     : currentIssue,
						 transition: it + i,
				 ]
				],
		])
	}
}
[
		'relatedIssuevalidator_forbidLinks'
].collect {
	relatedIssuesMap.eachWithIndex { currentIssue, targetIssue, i ->
		gint.taskHelper.add([
				[action: 'updateIssue', ext: ': set priority to High_currentIssue:' + it + i,
				 parameters:[
						 issue: currentIssue,
						 priority: 'High'
				 ]
				],
				[action    : 'transitionIssue', ext: ': issue has linked issues following given constraints_forbid :'+ it + i,
				 expected: -3,
				 parameters: [
						 issue     : currentIssue,
						 transition: it + i,
				 ]
				],
		])
	}
}
[
		'relatedIssuevalidator_issueConstraintsFalse'
].collect {
	relatedIssuesMap.take(2).eachWithIndex { currentIssue, targetIssue, i ->
		gint.taskHelper.add([
				[action    : 'transitionIssue', ext: ': issue not has linked issues following given constraints_no of Issues :' + it + i,
				 expected  : -3,
				 parameters: [
						 issue     : currentIssue,
						 transition: it + i,
				 ]
				],
		])
	}
}
[
		'relatedIssuevalidator_issueConstraintsTrue'
].collect {
	relatedIssuesMap.take(2).eachWithIndex { currentIssue, targetIssue, i ->
		gint.taskHelper.add([
				[action    : 'transitionIssue', ext: ': issue has linked issues following given constraints_no of Issues :' + it + i,
				 expected  : 0,
				 parameters: [
						 issue     : currentIssue,
						 transition: it + i,
				 ],
				],
		])
	}
}

[
		'issueReturnFromJqlSearch_require',
].collect {
	gint.taskHelper.add([
			[action    : 'transitionIssue', ext: ': atleast one issue found by jql search summary_JQL_ISSUE_requireLinks:'+ it,
			 expected: 0,
			 parameters: [
					 issue     : { ->jqlIssue[] },
					 transition: it,
			 ]
			],
			[action: 'updateIssue', ext: ': change summary_requireLinks:' + it,
			 sleepAfter: 2000,
			 parameters:[
					 issue: { ->jqlIssue[] },
					 summary: 'Invalid',
					 priority: 'High',
			 ]
			],
			[action    : 'transitionIssue', ext: ': when jql search does not return atleast one issue_requireLinks :'+ it,
			 expected: -3,
			 parameters: [
					 issue     : { ->jqlIssue[] },
					 transition: it,
			 ]
			],
	])
}
[		'issueReturnFromJqlSearch_check',
].each {
	gint.taskHelper.add([
			[action: 'updateIssue', ext: ': change summary for check issues_CheckLinks:' + it,
			 parameters:[
					 issue: { ->jqlIssue[] },
					 summary: 'JQL_ISSUE',
					 priority: 'High',
			 ]
			],
			[action    : 'transitionIssue', ext: ': when jql search issues respecting constraints_CheckLinks:'+ it,
			 expected: 0,
			 parameters: [
					 issue     : { ->jqlIssue[] },
					 transition: it,
			 ]
			],
			[action: 'updateIssue', ext: ': change priority to check issues_CheckLinks:' + it,
			 parameters:[
					 issue: { ->jqlIssue[] },
					 priority: 'Low',
			 ]
			],
			[action    : 'transitionIssue', ext: ': when jql search issues not respecting constraints_CheckLinks:'+ it,
			 expected: -3,
			 parameters: [
					 issue     : { ->jqlIssue[] },
					 transition: it,
			 ]
			],
	])

}
[		'issueReturnFromJqlSearch_forbid',
].each {
	gint.taskHelper.add([
			[action: 'updateIssue', ext: ': change summary for check issues_forbid:' + it,
			 parameters:[
					 issue: { ->jqlIssue[] },
					 summary: 'JQL_ISSUE',
					 priority: 'High',
			 ]
			],
			[action    : 'transitionIssue', ext: ': when jql search issues respecting constraints:'+ it,
			 expected: -3,
			 parameters: [
					 issue     : { ->jqlIssue[] },
					 transition: it,
			 ]
			],
			[action: 'updateIssue', ext: ': change priority to check issues-forbid:' + it,
			 parameters:[
					 issue: { ->jqlIssue[] },
					 priority: 'Low',
			 ]
			],
			[action    : 'transitionIssue', ext: ': when jql search issues not respecting constraints_forbid:'+ it,
			 expected: 0,
			 parameters: [
					 issue     : { ->jqlIssue[] },
					 transition: it,
			 ]
			],
	])

}


/*
import groovy.json.JsonSlurper
import java.nio.file.Paths

buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.gint:gint-atlassian:3.8.4"
	}
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/testValidators.gradle'

def info = gint.getJiraHelper().getServerInfoWithVerify() // Verify access to Jira instance otherwise end test if server not available
def project = 'AUTOMATION'//gint.getJiraHelper().getProjectKey()	//get project key using jira helper functions
def transition = 'relatedIssuesValidator'
def workflow = project
def screen = project
def user = info.user
gint.xmlReport =	true	//xml report generates in projects root directory
gint.verbose =	true

def jsonSlurper = new JsonSlurper();
def path = Paths.get(gint.directories.resource + "/resources/validatorsData/RelatedIssuesValidatorFunctions${info?.isCloud ? "Cloud" : ""}.json")
def transitionFunctions = jsonSlurper.parse(path)
def functionKey = info?.isCloud ? 'com.innovalog.jmwe.jira-misc-workflow-extensions:issue-linking-validator' : 'com.innovalog.jmwe.jira-misc-workflow-extensions:issue-linking-validator'	//function key for HideTransitionCondition
def startStep = info?.isCloud ? '1':'11' // depends on workflow. '1' for cloud and '11' (To Do)for server works for custom jira workflow

createTransitionsWithFunctions(transitionFunctions, transition, functionKey, 'validator', startStep, workflow, screen, 0)

// TC_16-Mode :Require certain related issues
//  Case1: When parent issue not having subtask
def parent = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue', priority: 'Low']}, 'parent')
transitionIssue(transition+0, {-> parent[0]}, -3, 'TC_16-when parent issue not having subtask', null, null)

// Case2: When parent issue having subtask
def parent1 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'parent1')
def subTask1 = createIssue(project,{[ type: 'Sub-task', summary: 'JMWE_Issue', parent: {-> parent1[0]} ]}, 'subtask1')
transitionIssue(transition+0, {-> parent1[0]}, 0, 'TC_16-When parent issue having subtask', null, null)

// Case3: When subtask not having parent issue respecting given condition
transitionIssue(transition+1, {-> subTask1[0]}, -3, 'TC_16-When subtask not having parent issue respecting given condition', null, null)

// Case4: When subtask having parent issue respecting given condition
def parent2 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue',]}, 'parent2')
def subTask2 = createIssue(project,{[ type: 'Sub-task', summary: 'JMWE_Issue', parent: {-> parent2[0]}, priority: 'High' ]}, 'subtask2')
transitionIssue(transition+1, {-> subTask2[0]}, 0, 'TC_16-When subtask having parent issue respecting given condition', null, null)

// Case5: When epic not having issues
def epic = createIssue(project,{[ type: 'epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Epic"]}, 'epic')
transitionIssue(transition+2, {-> epic[0]}, -3, 'TC_16-When epic not having issues', null, null)

// Case6: When epic having issue
def epic1 = createIssue(project,{[ type: 'epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Epic", priority: 'Low']}, 'epic1')
def story1 = createIssue(project,{[ type: 'story', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic1[0]} ]}, 'story1')
transitionIssue(transition+2, {-> epic1[0]}, 0, 'TC_16-When epic having issue', null, null)

// Case7: When epic of the current issue not respecting the given condition
transitionIssue(transition+3, {-> story1[0]}, -3, 'TC_16-When epic of the current issue not respecting the given condition', null, null)

// Case8: When epic of the current issue respecting the given condition
def epic2 = createIssue(project,{[ type: 'epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Epic"]}, 'epic2')
def story2 = createIssue(project,{[ type: 'story', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic2[0]}, priority: 'High' ]}, 'story2')
transitionIssue(transition+3, {-> story2[0]}, 0, 'TC_16-When epic of the current issue respecting the given condition', null, null)

// Case9: When current issue not having issues link by any linkType
transitionIssue(transition+4, {-> parent[0]}, -3, 'TC_16-When current issue not having issues link by any linkType', null, null)

// Case10: When current issue having issues link by any linkType
def linkIssueAnyLink1 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'linkIssue1')
def linkIssueAnyLink2 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'linkIssue2')
linkIssues([issue: { -> linkIssueAnyLink1[0] }, toIssue: { -> linkIssueAnyLink2[0] }, link: 'duplicates'], 'linkByAnyLinkType1' )
transitionIssue(transition+4, {-> linkIssueAnyLink2[0]}, 0, 'TC_16-When current issue having issues link by any linkType', null, null)

// Case11: When current issue not having issues link by any specificLink
transitionIssue(transition+5, {-> linkIssueAnyLink1[0]}, -3, 'TC_16-When current issue not having issues link by any specificLink', null, null)

// Case12: When current issue having issues link by blocksLinkType
def blocks1 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'linkIssue5')
def blocks2 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'linkIssue6')
linkIssues([issue: { -> blocks1[0] }, toIssue: { -> blocks2[0] }, link: 'blocks'], 'linkByBlocksLinkType1' )
transitionIssue(transition+5, {-> blocks1[0]}, 0, 'TC_16-When current issue having issues link by specificLink', null, null)

// Case13: When current issue not having issues return by groovy script
transitionIssue(transition+6, {-> parent1[0]}, -3, 'TC_16-When current issue not having issues return by groovy script', null, null)

// Case14: When current issue having issues return by groovy script
transitionIssue(transition+6, {-> blocks1[0]}, 0, 'TC_16-When current issue having issues return by groovy script', null, null)

// Case15: When jql search not returns at least 1 issue
def IssueReturnByJqlSearch = createIssue(project, {[type: 'Task', summary: 'jmwe_Task_jqlIssue']}, 'jqlSearch' )
transitionIssue(transition+7, {-> IssueReturnByJqlSearch[0]}, -3, 'TC_16-When jql search not returns at least 1 issue', null, null)

// Case16: When jql search returns at least 1 issue
transitionIssue(transition+8, {-> IssueReturnByJqlSearch[0]}, 0, 'TC_16-When jql search returns at least 1 issue', null, null)


// TC_17-Mode : Check related issues
//  Case1: When parent issue not having subtask respecting constraints
def parent3 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'parent3')
def subTask3 = createIssue(project,{[ type: 'Sub-task', summary: 'JMWE_Issue', parent: {-> parent3[0]}, priority: 'Low' ]}, 'subtask3')
transitionIssue(transition+9, {-> parent3[0]}, -3, 'TC_17-When parent issue not having subtask respecting constraints', null, null)

// Case2: When parent issue having subtask respecting constraints
def parent4 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'parent4')
def subTask4 = createIssue(project,{[ type: 'Sub-task', summary: 'JMWE_Issue', parent: {-> parent4[0]}, priority: 'High' ]}, 'subtask4')
transitionIssue(transition+9, {-> parent4[0]}, 0, 'TC_17-When parent issue having subtask respecting constraints', null, null)

// Case3: When subtask not having parent issue respecting constraints
transitionIssue(transition+10, {-> subTask4[0]}, -3, 'TC_17-When subtask not having parent issue respecting constraints', null, null)

// Case4: When subtask having parent issue respecting constraints
def parent5 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue',, priority: 'High']}, 'parent2')
def subTask5 = createIssue(project,{[ type: 'Sub-task', summary: 'JMWE_Issue', parent: {-> parent2[0]} ]}, 'subtask2')
transitionIssue(transition+10, {-> subTask2[0]}, 0, 'TC_17-When subtask having parent issue respecting given condition', null, null)

// Case5: When epic not having issues
def epic = createIssue(project,{[ type: 'epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Epic"]}, 'epic')
transitionIssue(transition+2, {-> epic[0]}, -3, 'TC_16-When epic not having issues', null, null)

// Case6: When epic having issue
def epic1 = createIssue(project,{[ type: 'epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Epic", priority: 'Low']}, 'epic1')
def story1 = createIssue(project,{[ type: 'story', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic1[0]} ]}, 'story1')
transitionIssue(transition+2, {-> epic1[0]}, 0, 'TC_16-When epic having issue', null, null)

// Case6: When epic of the current issue not respecting the given condition
transitionIssue(transition+3, {-> story1[0]}, -3, 'TC_16-When epic of the current issue not respecting the given condition', null, null)

// Case7: When epic of the current issue respecting the given condition
def epic2 = createIssue(project,{[ type: 'epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Epic"]}, 'epic2')
def story2 = createIssue(project,{[ type: 'story', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic2[0]}, priority: 'High' ]}, 'story2')
transitionIssue(transition+3, {-> story2[0]}, 0, 'TC_16-When epic of the current issue respecting the given condition', null, null)

// Case8: When current issue not having issues link by any linkType
transitionIssue(transition+4, {-> parent[0]}, -3, 'TC_16-When current issue not having issues link by any linkType', null, null)

// Case9: When current issue having issues link by any linkType
def linkIssue1 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'linkIssue1')
def linkIssue2 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'linkIssue2')
linkIssues([issue: { -> linkIssue1[0] }, toIssue: { -> linkIssue2[0] }, link: 'duplicates'], 'linkByAnyLinkType1' )
transitionIssue(transition+4, {-> linkIssue2[0]}, 0, 'TC_16-When current issue having issues link by any linkType', null, null)

// Case10: When current issue not having issues link by any specificLink
transitionIssue(transition+5, {-> linkIssue1[0]}, -3, 'TC_16-When current issue not having issues link by any specificLink', null, null)

// Case11: When current issue having issues link by specificLink
def linkIssue3 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'linkIssue5')
def linkIssue4 = createIssue(project,{[ type: 'Bug', summary: 'JMWE_Issue']}, 'linkIssue6')
linkIssues([issue: { -> linkIssue3[0] }, toIssue: { -> linkIssue4[0] }, link: 'blocks'], 'linkByBlocksLinkType1' )
transitionIssue(transition+5, {-> linkIssue3[0]}, 0, 'TC_16-When current issue having issues link by specificLink', null, null)

// Case12: When current issue not having issues return by groovy script
transitionIssue(transition+6, {-> parent1[0]}, -3, 'TC_16-When current issue not having issues return by groovy script', null, null)

// Case13: When current issue having issues return by groovy script
transitionIssue(transition+6, {-> linkIssue3[0]}, 0, 'TC_16-When current issue having issues return by groovy script', null, null)

// Case14: When jql search not returns at least 1 issue
def IssueReturnByJqlSearch = createIssue(project, {[type: 'Task', summary: 'jmwe_Task_jqlIssue']}, 'jqlSearch' )
transitionIssue(transition+7, {-> IssueReturnByJqlSearch[0]}, -3, 'TC_16-When jql search not returns at least 1 issue', null, null)

// Case15: When jql search returns at least 1 issue
transitionIssue(transition+8, {-> IssueReturnByJqlSearch[0]}, 0, 'TC_16-When jql search returns at least 1 issue', null, null)

*/