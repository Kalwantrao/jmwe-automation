buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/itest-conditions/condition.gradle'

def functionKey = info?.isCloud? "com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.${testCloudBuild}__LinkedIssuesValidator" : 'com.innovalog.jmwe.jira-misc-workflow-extensions:linked-issues-condition'

def commonElements = [
        targetIssues: [
                subtask : /"selectedLinkTypeId": "jira_subtask_link","selectedLinkTypeDirection":"outward"/,
                issueBelongsToEpic : /"selectedLinkTypeId": "Epic-Story Link","selectedLinkTypeDirection":"outward"/,
                linkByAnyLink : /"selectedLinkTypeId":"*","selectedLinkTypeDirection":"*"/,
                linkByBlock : /"selectedLinkTypeId": "10000","selectedLinkTypeDirection":"outward"/,
                linkByisBlockedBy : /"selectedLinkTypeId": "10000","selectedLinkTypeDirection":"inward"/,
                linkByClones : /"selectedLinkTypeId": "10001","selectedLinkTypeDirection":"outward"/,
                linkByIsClonedBy : /"selectedLinkTypeId": "10001","selectedLinkTypeDirection":"inward"/,
                linkByDuplicates : /"selectedLinkTypeId": "10002","selectedLinkTypeDirection":"outward"/,
                linkByIsDuplicatedBy : /"selectedLinkTypeId": "10002","selectedLinkTypeDirection":"inward"/,
                linkByRelatesTo : /"selectedLinkTypeId": "10003","selectedLinkTypeDirection":"outward"/
        ],
]

def errorMessage = "Error from JMWE validator, check linked issues"

def validatorMode= [
        requireLinks: /"validatorMode":"requireLinks"/,
        checkLinks:   /"validatorMode":"checkLinks","condition":"!!linkedIssue.priority && linkedIssue.priority.name == 'High'"/,
        forbidLinks:  /"validatorMode":"forbidLinks","condition":"!!linkedIssue.priority && linkedIssue.priority.name == 'High'"/
]

def selectIssueType = [
        anyIssueType: /"selectedIssueTypeId":"","errorMessage":"$errorMessage"/,
]

def additionalCondition = [
        none: /"anyOrEvery":"noCond"/,
        atLeastOne: /"anyOrEvery":"any"/,
        every: /"anyOrEvery":"every"/
]

def configureLinkedIssuesCondition = [
        requireLinkedIssues: [
                subtask : "{${commonElements.targetIssues.subtask},${selectIssueType.anyIssueType},${additionalCondition.none},${validatorMode.requireLinks},\"condition\":\"\",\"expression\":\"(issue.subtasks.some(linkedIssue => (true)))\"}",
                issueBelongsToEpic : "{$commonElements.targetIssues.issueBelongsToEpic,$selectIssueType.anyIssueType,$additionalCondition.none,$validatorMode.requireLinks,\"condition\":\"\",\"expression\":\"(!!issue.stories && issue.stories.some(linkedIssue => (true)))\"}",
                linkByAnyLink : "{$commonElements.targetIssues.linkByAnyLink,$selectIssueType.anyIssueType,$additionalCondition.none,$validatorMode.requireLinks,\"condition\":\"\",\"expression\":\"(issue.links.some(issueLink => (true)))\"}",
                linkByBlock : "{$commonElements.targetIssues.linkByBlock,$selectIssueType.anyIssueType,$additionalCondition.none,$validatorMode.requireLinks,\"condition\":\"\",\"expression\":\"(issue.links.some(issueLink => issueLink.type.id == 10000 && (issueLink.direction == 'outward' || issueLink.type.inward == issueLink.type.outward) && (true)))\"}",
                linkByisBlockedBy : "{$commonElements.targetIssues.linkByisBlockedBy,$selectIssueType.anyIssueType,$additionalCondition.none,$validatorMode.requireLinks,\"condition\":\"\",\"expression\":\"(issue.links.some(issueLink => issueLink.type.id == 10000 && (issueLink.direction == 'inward' || issueLink.type.inward == issueLink.type.outward) && (true)))\"}",
                linkByClones : "{$commonElements.targetIssues.linkByClones,$selectIssueType.anyIssueType,$additionalCondition.none,$validatorMode.requireLinks,\"condition\":\"\",\"expression\":\"(issue.links.some(issueLink => issueLink.type.id == 10001 && (issueLink.direction == 'outward' || issueLink.type.inward == issueLink.type.outward) && (true)))\"}",
                linkByIsClonedBy : "{$commonElements.targetIssues.linkByIsClonedBy,$selectIssueType.anyIssueType,$additionalCondition.none,$validatorMode.requireLinks,\"condition\":\"\",\"expression\":\"(issue.links.some(issueLink => issueLink.type.id == 10001 && (issueLink.direction == 'inward' || issueLink.type.inward == issueLink.type.outward) && (true)))\"}",
                linkByDuplicates : "{$commonElements.targetIssues.linkByDuplicates,$selectIssueType.anyIssueType,$additionalCondition.none,$validatorMode.requireLinks,\"condition\":\"\",\"expression\":\"(issue.links.some(issueLink => issueLink.type.id == 10002 && (issueLink.direction == 'outward' || issueLink.type.inward == issueLink.type.outward) && (true)))\"}",
                linkByIsDuplicatedBy : "{$commonElements.targetIssues.linkByIsDuplicatedBy,$selectIssueType.anyIssueType,$additionalCondition.none,$validatorMode.requireLinks,\"condition\":\"\",\"expression\":\"(issue.links.some(issueLink => issueLink.type.id == 10002 && (issueLink.direction == 'inward' || issueLink.type.inward == issueLink.type.outward) && (true)))\"}",
                linkByRelatesTo : "{$commonElements.targetIssues.linkByRelatesTo,$selectIssueType.anyIssueType,$additionalCondition.none,$validatorMode.requireLinks,\"condition\":\"\",\"expression\":\"(issue.links.some(issueLink => issueLink.type.id == 10003 && (issueLink.direction == 'outward' || issueLink.type.inward == issueLink.type.outward) && (true)))\"}",
        ],
        checkLinkedIssues:[
                subtask : "{$commonElements.targetIssues.subtask,$selectIssueType.anyIssueType,$additionalCondition.atLeastOne,$validatorMode.checkLinks,\"condition\":\"\",\"expression\":\"(!issue.subtasks || issue.subtasks.every(linkedIssue => (!!linkedIssue.priority && linkedIssue.priority.name == 'High')))\"}",
                issueBelongsToEpic : "{$commonElements.targetIssues.issueBelongsToEpic,$selectIssueType.anyIssueType,$additionalCondition.atLeastOne,$validatorMode.checkLinks,\"condition\":\"\",\"expression\":\"(!issue.stories || issue.stories.every(linkedIssue => (!!linkedIssue.priority && linkedIssue.priority.name == 'High')))\"}",
                linkByAnyLink : "{$commonElements.targetIssues.linkByAnyLink,$selectIssueType.anyIssueType,$additionalCondition.atLeastOne,$validatorMode.checkLinks,\"condition\":\"\",\"expression\":\"(issue.links.length == 0 || issue.links.every(issueLink => (!!issueLink.linkedIssue.priority && issueLink.linkedIssue.priority.name == 'High')))\"}",
                linkByBlock : "{$commonElements.targetIssues.linkByBlock,$selectIssueType.anyIssueType,$additionalCondition.atLeastOne,$validatorMode.checkLinks,\"condition\":\"\",\"expression\":\"(issue.links.length == 0 || !issue.links.some(issueLink => issueLink.type.id == 10000 && (issueLink.direction == 'outward' || issueLink.type.inward == issueLink.type.outward)) || issue.links.filter(issueLink => issueLink.type.id == 10000 && (issueLink.direction == 'outward' || issueLink.type.inward == issueLink.type.outward)).every(issueLink => (!!issueLink.linkedIssue.priority && issueLink.linkedIssue.priority.name == 'High')))\"}",
                linkByisBlockedBy : "{$commonElements.targetIssues.linkByisBlockedBy,$selectIssueType.anyIssueType,$additionalCondition.atLeastOne,$validatorMode.checkLinks,\"condition\":\"\",\"expression\":\"(issue.links.length == 0 || !issue.links.some(issueLink => issueLink.type.id == 10000 && (issueLink.direction == 'inward' || issueLink.type.inward == issueLink.type.outward)) || issue.links.filter(issueLink => issueLink.type.id == 10000 && (issueLink.direction == 'inward' || issueLink.type.inward == issueLink.type.outward)).every(issueLink => (!!issueLink.linkedIssue.priority && issueLink.linkedIssue.priority.name == 'High')))\"}",
                linkByClones : "{$commonElements.targetIssues.linkByClones,$selectIssueType.anyIssueType,$additionalCondition.atLeastOne,$validatorMode.checkLinks,\"condition\":\"\",\"expression\":\"(issue.links.length == 0 || !issue.links.some(issueLink => issueLink.type.id == 10001 && (issueLink.direction == 'outward' || issueLink.type.inward == issueLink.type.outward)) || issue.links.filter(issueLink => issueLink.type.id == 10001 && (issueLink.direction == 'outward' || issueLink.type.inward == issueLink.type.outward)).every(issueLink => (!!issueLink.linkedIssue.priority && issueLink.linkedIssue.priority.name == 'High')))\"}",
                linkByIsClonedBy : "{$commonElements.targetIssues.linkByIsClonedBy,$selectIssueType.anyIssueType,$additionalCondition.atLeastOne,$validatorMode.checkLinks,\"condition\":\"\",\"expression\":\"(issue.links.length == 0 || !issue.links.some(issueLink => issueLink.type.id == 10001 && (issueLink.direction == 'inward' || issueLink.type.inward == issueLink.type.outward)) || issue.links.filter(issueLink => issueLink.type.id == 10001 && (issueLink.direction == 'inward' || issueLink.type.inward == issueLink.type.outward)).every(issueLink => (!!issueLink.linkedIssue.priority && issueLink.linkedIssue.priority.name == 'High')))\"}",
                linkByDuplicates : "{$commonElements.targetIssues.linkByDuplicates,$selectIssueType.anyIssueType,$additionalCondition.atLeastOne,$validatorMode.checkLinks,\"condition\":\"\",\"expression\":\"(issue.links.length == 0 || !issue.links.some(issueLink => issueLink.type.id == 10002 && (issueLink.direction == 'outward' || issueLink.type.inward == issueLink.type.outward)) || issue.links.filter(issueLink => issueLink.type.id == 10002 && (issueLink.direction == 'outward' || issueLink.type.inward == issueLink.type.outward)).every(issueLink => (!!issueLink.linkedIssue.priority && issueLink.linkedIssue.priority.name == 'High')))\"}",
                linkByIsDuplicatedBy : "{$commonElements.targetIssues.linkByIsDuplicatedBy,$selectIssueType.anyIssueType,$additionalCondition.atLeastOne,$validatorMode.checkLinks,\"condition\":\"\",\"expression\":\"(issue.links.length == 0 || !issue.links.some(issueLink => issueLink.type.id == 10002 && (issueLink.direction == 'inward' || issueLink.type.inward == issueLink.type.outward)) || issue.links.filter(issueLink => issueLink.type.id == 10002 && (issueLink.direction == 'inward' || issueLink.type.inward == issueLink.type.outward)).every(issueLink => (!!issueLink.linkedIssue.priority && issueLink.linkedIssue.priority.name == 'High')))\"}",
                linkByRelatesTo : "{$commonElements.targetIssues.linkByRelatesTo,$selectIssueType.anyIssueType,$additionalCondition.atLeastOne,$validatorMode.checkLinks,\"condition\":\"\",\"expression\":\"(issue.links.length == 0 || !issue.links.some(issueLink => issueLink.type.id == 10003 && (issueLink.direction == 'outward' || issueLink.type.inward == issueLink.type.outward)) || issue.links.filter(issueLink => issueLink.type.id == 10003 && (issueLink.direction == 'outward' || issueLink.type.inward == issueLink.type.outward)).every(issueLink => (!!issueLink.linkedIssue.priority && issueLink.linkedIssue.priority.name == 'High')))\"}",
        ],
        forbidLinkedIssues:[
                subtask : "{$commonElements.targetIssues.subtask,$selectIssueType.anyIssueType,$additionalCondition.every,$validatorMode.forbidLinks,$selectIssueType.anyIssueType,\"expression\":\"(!(!!issue.subtasks && issue.subtasks.length > 0 && issue.subtasks.every(linkedIssue => (!!linkedIssue.priority && linkedIssue.priority.name == 'High'))))\"}",
                issueBelongsToEpic : "{$commonElements.targetIssues.issueBelongsToEpic,$selectIssueType.anyIssueType,$additionalCondition.every,$validatorMode.forbidLinks,\"condition\":\"\",\"expression\":\"(!(!!issue.stories && issue.stories.length > 0 && issue.stories.every(linkedIssue => (!!linkedIssue.priority && linkedIssue.priority.name == 'High'))))\"}",
                linkByAnyLink : "{$commonElements.targetIssues.linkByAnyLink,$selectIssueType.anyIssueType,$additionalCondition.every,$validatorMode.forbidLinks,\"condition\":\"\",\"expression\":\"(!(issue.links.length > 0 && issue.links.every(issueLink => (!!issueLink.linkedIssue.priority && issueLink.linkedIssue.priority.name == 'High'))))\"}",
                linkByBlock : "{$commonElements.targetIssues.linkByBlock,$selectIssueType.anyIssueType,$additionalCondition.every,$validatorMode.forbidLinks,\"condition\":\"\",\"expression\":\"(!(issue.links.length > 0 && issue.links.some(issueLink => issueLink.type.id == 10000 && (issueLink.direction == 'outward' || issueLink.type.inward == issueLink.type.outward)) && issue.links.filter(issueLink => issueLink.type.id == 10000 && (issueLink.direction == 'outward' || issueLink.type.inward == issueLink.type.outward)).every(issueLink => (!!issueLink.linkedIssue.priority && issueLink.linkedIssue.priority.name == 'High'))))\"}",
                linkByisBlockedBy : "{$commonElements.targetIssues.linkByisBlockedBy,$selectIssueType.anyIssueType,$additionalCondition.every,$validatorMode.forbidLinks,\"condition\":\"\",\"expression\":\"(!(issue.links.length > 0 && issue.links.some(issueLink => issueLink.type.id == 10000 && (issueLink.direction == 'inward' || issueLink.type.inward == issueLink.type.outward)) && issue.links.filter(issueLink => issueLink.type.id == 10000 && (issueLink.direction == 'inward' || issueLink.type.inward == issueLink.type.outward)).every(issueLink => (!!issueLink.linkedIssue.priority && issueLink.linkedIssue.priority.name == 'High'))))\"}",
                linkByClones : "{$commonElements.targetIssues.linkByClones,$selectIssueType.anyIssueType,$additionalCondition.every,$validatorMode.forbidLinks,\"condition\":\"\",\"expression\":\"(!(issue.links.length > 0 && issue.links.some(issueLink => issueLink.type.id == 10001 && (issueLink.direction == 'outward' || issueLink.type.inward == issueLink.type.outward)) && issue.links.filter(issueLink => issueLink.type.id == 10001 && (issueLink.direction == 'outward' || issueLink.type.inward == issueLink.type.outward)).every(issueLink => (!!issueLink.linkedIssue.priority && issueLink.linkedIssue.priority.name == 'High'))))\"}",
                linkByIsClonedBy : "{$commonElements.targetIssues.linkByIsClonedBy,$selectIssueType.anyIssueType,$additionalCondition.every,$validatorMode.forbidLinks,\"condition\":\"\",\"expression\":\"(!(issue.links.length > 0 && issue.links.some(issueLink => issueLink.type.id == 10001 && (issueLink.direction == 'inward' || issueLink.type.inward == issueLink.type.outward)) && issue.links.filter(issueLink => issueLink.type.id == 10001 && (issueLink.direction == 'inward' || issueLink.type.inward == issueLink.type.outward)).every(issueLink => (!!issueLink.linkedIssue.priority && issueLink.linkedIssue.priority.name == 'High'))))\"}",
                linkByDuplicates : "{$commonElements.targetIssues.linkByDuplicates,$selectIssueType.anyIssueType,$additionalCondition.every,$validatorMode.forbidLinks,\"condition\":\"\",\"expression\":\"(!(issue.links.length > 0 && issue.links.some(issueLink => issueLink.type.id == 10002 && (issueLink.direction == 'outward' || issueLink.type.inward == issueLink.type.outward)) && issue.links.filter(issueLink => issueLink.type.id == 10002 && (issueLink.direction == 'outward' || issueLink.type.inward == issueLink.type.outward)).every(issueLink => (!!issueLink.linkedIssue.priority && issueLink.linkedIssue.priority.name == 'High'))))\"}",
                linkByIsDuplicatedBy : "{$commonElements.targetIssues.linkByIsDuplicatedBy,$selectIssueType.anyIssueType,$additionalCondition.every,$validatorMode.forbidLinks,\"condition\":\"\",\"expression\":\"(!(issue.links.length > 0 && issue.links.some(issueLink => issueLink.type.id == 10002 && (issueLink.direction == 'inward' || issueLink.type.inward == issueLink.type.outward)) && issue.links.filter(issueLink => issueLink.type.id == 10002 && (issueLink.direction == 'inward' || issueLink.type.inward == issueLink.type.outward)).every(issueLink => (!!issueLink.linkedIssue.priority && issueLink.linkedIssue.priority.name == 'High'))))\"}",
                linkByRelatesTo : "{$commonElements.targetIssues.linkByRelatesTo,$selectIssueType.anyIssueType,$additionalCondition.every,$validatorMode.forbidLinks,\"condition\":\"\",\"expression\":\"(!(issue.links.length > 0 && issue.links.some(issueLink => issueLink.type.id == 10003 && (issueLink.direction == 'outward' || issueLink.type.inward == issueLink.type.outward)) && issue.links.filter(issueLink => issueLink.type.id == 10003 && (issueLink.direction == 'outward' || issueLink.type.inward == issueLink.type.outward)).every(issueLink => (!!issueLink.linkedIssue.priority && issueLink.linkedIssue.priority.name == 'High'))))\"}",
        ]
]

def issueConstraints = [
        atLeastOne : [  "minLinkedIssues=1","maxLinkedIssues=" ],
        minTwo : [ "minLinkedIssues=2", "maxLinkedIssues=" ],
        maxTwo : [ "minLinkedIssues=", "maxLinkedIssues=2" ],
        minTwoMaxTwo : [ "minLinkedIssues=2", "maxLinkedIssues=2" ],
        atLeastThreeAndAtMostSix : [ "minLinkedIssues=3", "maxLinkedIssues=6" ]
]

def verifyAllLinkedIssues = [
        yes : [	"checkAllLinkedIssues=yes" ],
        no : [ "checkAllLinkedIssues=no" ]
]

def linkedIssuesMode = [
        requireLinks : [ "conditionMode=requireLinks" ],
        requireSpecificLinkedIssues : [ "conditionMode=requireLinks", /groovyExpression=issue.get('assignee')?.name == "$user"/ ],
        checkLinks : [ "conditionMode=checkLinks", "groovyExpression=$groovyExpression.checkPriorityHigh" ],
        forbidLinks : [	"conditionMode=forbidLinks", "groovyExpression=$groovyExpression.checkPriorityHigh" ]
]

def relatedIssuesMap = [:]

def listOfElementsToRemoveFromTargetIssuesList = info?.isCloud ? [
        'CurrentIssue',
        'ParentIssue',
        'EpicOfTheCurrentIssue',
        'ChildPortfolio',
        'ParentPortfolio',
        'ReturnsByNunjucksExpression',
        'ReturnsFromJqlSearch'
]: [
        'CurrentIssue',
        'ParentIssue',
        'EpicOfTheCurrentIssue',
        'ParentPortfolio'
]

listOfElementsToRemoveFromTargetIssuesList.each {
    relatedIssuesList.remove(it)
}

relatedIssuesList.each{
    relatedIssuesMap.putAll(createRelatedIssuesMap('TRANSITION', it, projectName, " "))
}

// Check linked issues validator, require linked issues mode
[
        "RequireLinkedIssues"
].each {
    configureLinkedIssuesCondition.requireLinkedIssues.eachWithIndex{ key, value, int i ->
        def transition = it + i
        addTransitionFunction(transition, 'validator', value, functionKey)
    }

    def issueWithoutLinkedIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueWithoutLinkedIssue')
    def epicWithoutStory = createIssue([type: 'Epic', field: "Epic Name", value: "JMWE_Issue", summary: 'JMWE_Issue'], 'epicWithoutStory')

    relatedIssuesMap.eachWithIndex { currentIssue, targetIssue, i ->
        def transition = it + i
        if(i == 1){
            gint.taskHelper.add(
                    action: "transitionIssue",
                    ext: ":By $transition, when issue does not have linked issues:",
                    sleep: sleep,
                    expected: -3,
                    parameters:[
                            issue: { ->epicWithoutStory[] },
                            transition: transition
                    ],
                    data: [errorMessage]
            )
        } else {
            gint.taskHelper.add(
                    action: "transitionIssue",
                    ext: ":By $transition, when issue does not have linked issues:",
                    sleep: sleep,
                    expected: -3,
                    parameters:[
                            issue: { ->issueWithoutLinkedIssue[] },
                            transition: transition
                    ],
                    data: [errorMessage]
            )
        }
        gint.taskHelper.add(
                [action: "transitionIssue",
                 ext: ":By $transition, when issue has linked issues:",
                 sleep: sleep,
                 expected: 0,
                 parameters:[
                         issue: currentIssue,
                         transition: transition
                 ]
                ],
        )
    }
}

// Check linked issues validator, check linked issues mode
[
        "CheckLinkedIssues"
].each {
    configureLinkedIssuesCondition.checkLinkedIssues.eachWithIndex{ key, value, int i ->
        def transition = it + i
        addTransitionFunction(transition, 'validator', value, functionKey)
    }

    relatedIssuesMap.eachWithIndex { currentIssue, targetIssue, i ->
        def transition = it + i
        ["High","Low"].each { priority ->
            gint.taskHelper.add(
                    action: "setFieldValue",
                    ext: ":Of priority of linked issues to $priority,before transition issue with $transition",
                    sleep: sleep,
                    parameters: [
                            issue: targetIssue,
                            field: "Priority",
                            value: priority
                    ]
            )
            if (priority == "High") {
                gint.taskHelper.add(
                        action: "transitionIssue",
                        ext: ":By $transition, when issue have linked issues with priority $priority, satisfies given condition:",
                        sleep: sleep,
                        expected: 0,
                        parameters: [
                                issue     : currentIssue,
                                transition: transition
                        ]
                )
            } else {
                gint.taskHelper.add(
                        action: "transitionIssue",
                        ext: ":By $transition, when issue have linked issues with priority $priority, does not satisfies given condition:",
                        sleep: sleep,
                        expected: -3,
                        parameters: [
                                issue     : currentIssue,
                                transition: transition
                        ],
                        data: [errorMessage]
                )
            }
        }
        gint.taskHelper.add(
                action: "setFieldValue",
                ext: ":Of priority of linked issues to low,after transition issue with $transition",
                sleep: sleep,
                parameters:[
                        issue: targetIssue,
                        field: "Priority",
                        value: "Low"
                ]
        )
    }
}

// Check linked issues validator, forbid linked issues mode
[
        "ForbidLinkedIssues"
].each {
    configureLinkedIssuesCondition.forbidLinkedIssues.eachWithIndex{ key, value, int i ->
        def transition = it + i
        addTransitionFunction(transition, 'validator', value, functionKey)
    }

    relatedIssuesMap.eachWithIndex { currentIssue, targetIssue, i ->
        def transition = it + i
        ["High", "Low"].each { priority ->
            gint.taskHelper.add(
                    action: "setFieldValue",
                    ext: ":Of priority of linked issues to $priority,before transition issue with $transition",
                    sleep: sleep,
                    parameters: [
                            issue: targetIssue,
                            field: "Priority",
                            value: priority
                    ]
            )
            if (priority == "High") {
                gint.taskHelper.add(
                        action: "transitionIssue",
                        ext: ":By $transition, when issue have linked issues with priority $priority, satisfies given condition:",
                        sleep: sleep,
                        expected: -3,
                        parameters: [
                                issue     : currentIssue,
                                transition: transition
                        ],
                        data: [errorMessage]
                )
            } else {
                gint.taskHelper.add(
                        action: "transitionIssue",
                        ext: ":By $transition, when issue have linked issues with priority $priority, does not satisfies given condition:",
                        sleep: sleep,
                        expected: 0,
                        parameters: [
                                issue     : currentIssue,
                                transition: transition
                        ]
                )
            }
        }
        gint.taskHelper.add(
                action: "setFieldValue",
                ext: ":Of priority of linked issues to low,after transition issue with $transition",
                sleep: sleep,
                parameters: [
                        issue: targetIssue,
                        field: "Priority",
                        value: "Low"
                ]
        )
    }
}

['Verify_Issue_constraints_min_two_linkByRelatesTo'].each {
    def server = ["errorMessage=$errorMessage" , "selectedLinkType=$linkByRelatesTo" , linkedIssuesMode.requireLinks , issueConstraints.minTwo , verifyAllLinkedIssues.yes]
    if(!isCloud) {
        addTransitionFunction(it, 'validator', server, functionKey)
    }
}

['Verify_Issue_constraints_max_two_linkByRelatesTo'].each {
    def server = ["errorMessage=$errorMessage" , "selectedLinkType=$linkByRelatesTo" , linkedIssuesMode.requireLinks , issueConstraints.maxTwo , verifyAllLinkedIssues.yes]
    if(!isCloud) {
        addTransitionFunction(it, 'validator', server, functionKey)
    }
}

['Verify_Issue_constraints_min_three_max_six_linkByRelatesTo'].each {
    def server = ["errorMessage=$errorMessage" , "selectedLinkType=$linkByRelatesTo" , linkedIssuesMode.requireLinks , issueConstraints.atLeastThreeAndAtMostSix , verifyAllLinkedIssues.yes]
    if(!isCloud) {
        addTransitionFunction(it, 'validator', server, functionKey)
    }
}

['Verify_Issue_constraints_min_two_max_two_linkByRelatesTo'].each {
    def server = ["errorMessage=$errorMessage" , "selectedLinkType=$linkByRelatesTo" , linkedIssuesMode.requireLinks , issueConstraints.minTwoMaxTwo , verifyAllLinkedIssues.yes]
    if(!isCloud){
        addTransitionFunction(it , 'validator', server, functionKey)
    }
}

// add this script in config - linkedIssue.get("Fix Version/s")?.any{it.name == "1.0"}
['verify_condition_on_related_issues_checkAssignee'].each {
    def server = ["errorMessage=$errorMessage" , "selectedLinkType=$linkByRelatesTo" , linkedIssuesMode.requireSpecificLinkedIssues , issueConstraints.atLeastOne , verifyAllLinkedIssues.yes]
    def cloud = "{\"conditionalValidation\":false,$commonElements.targetIssues.linkByRelatesTo,\"selectedIssueTypeId\":\"\",\"errorMessage\":\"$errorMessage\",\"anyOrEvery\":\"any\",\"condition\":\"!!issue.assignee && issue.assignee.accountId == '${info.userKey}'\",\"validatorMode\":\"requireLinks\",\"expression\":\"(issue.links.filter(issueLink => issueLink.type.id == 10003 && (issueLink.direction == 'outward' || issueLink.type.inward == issueLink.type.outward)).some(issueLink => (!!issue.assignee && issue.assignee.accountId == '${info.userKey}')))\"}"
    addTransitionFunction(it, 'validator', info?.isCloud? cloud : server, functionKey)
}

[
        'verify_validator_scope_conditional_validation'
].each {
    def cloud = "{$conditionalValidation.yes,\"selectedLinkTypeId\":\"jira_subtask_link\",\"selectedLinkTypeDirection\":\"outward\",\"selectedIssueTypeId\":\"\",\"errorMessage\":\"$errorMessage\",\"anyOrEvery\":\"noCond\",\"condition\":\"true\",\"validatorMode\":\"requireLinks\",\"expression\":\"!(!!issue.priority && issue.priority.name == 'High') || (issue.subtasks.some(linkedIssue => (true)))\"}"
    def server = ["errorMessage=$errorMessage" , "selectedLinkType=$subtask" , conditionalValidation.yes , linkedIssuesMode.requireLinks , issueConstraints.atLeastOne , verifyAllLinkedIssues.yes]
    addTransitionFunction(it , 'validator', info?.isCloud? cloud : server, functionKey)
}

def relatesToIssue2 = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'relatesToIssue2')
def relatesToIssue3 = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'relatesToIssue3')
def relatesToIssue4 = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'relatesToIssue4')
def relatesToIssue5 = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'relatesToIssue5')
def relatesToIssue6 = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'relatesToIssue6')
def relatesToIssue7 = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'relatesToIssue7')

def transitionByUserTaskForError =  { transition, userId, issue, expected ->
    if(!isCloud) {
        gint.taskHelper.add(
                [expected    : expected,
                 name        : ":transition issue by non admin user to check error:" + transition,
                 cmd         : /acli $userId -a transitionIssue --issue $issue --transition $transition/,
                ]
        )
    }
}

def transitionByUserTaskForSuccess =  { transition, userId, issue, expected ->
    if(!isCloud) {
        gint.taskHelper.add(
                [expected    : expected,
                 name        : ":transition issue by non admin user to check success:" + transition,
                 cmd         : /acli $userId -a transitionIssue --issue $issue --transition $transition/,
                ]
        )
    }
}

//                                      RELATED_ISSUES_VALIDATOR => REQUIRE CERTAIN RELATED ISSUES

// Create issues
def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'default')
def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { ->parent[] }], 'Sub-task')
def epic = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic')
def issueBelongsToEpic = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'BelongsToEpic')
def initiative = createIssue([type: 'Initiative', summary: 'JMWE_Issue'], 'Initiative')
def epic_initiative = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative')
def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def toIssueLink = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'toIssueLink')
def jqlIssue = createIssue([type: 'Task', summary: 'JQL_ISSUE'], 'jqlIssue')

[
        'Verify_Issue_constraints_min_two_linkByRelatesTo'
].collect {
    if(!isCloud) {
        gint.taskHelper.add([
                [action: 'getLinkList',
                 ext: ": validate that issue has 0 issue linked to it through relates to link type for _ $it: ",
                 parameters: [
                         issue: {->issueLinks[]},
                         outputType: "Text",
                         columns: "Link Description",
                         select: "Link Description:relates to"
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("0 links for issue")
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ":RELATED_ISSUES_VALIDATOR_TC_42_Case_01 _$it _when current issue not having at least 2 issues linked to it through the relates to link type:",
                 expected  : -3,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue     : { -> issueLinks[] },
                         transition: it,
                 ]
                ],
                [action    : 'linkIssue',
                 ext: ": 1 by relates to link type to check _$it _min issue constraints option:",
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> relatesToIssue2[] },
                         link   : 'relates to'
                 ]
                ],
                [action    : 'linkIssue',
                 ext: ": 2 by relates to link type to check _$it _min issue constraints option:",
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> relatesToIssue3[] },
                         link   : 'relates to'
                 ]
                ],
                [action: 'getLinkList',
                 ext: ": validate that issue has 2 issue linked to it through relates to link type for _ $it: ",
                 parameters: [
                         issue: {->issueLinks[]},
                         outputType: "Text",
                         columns: "Link Description",
                         select: "Link Description:relates to"
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("2 links for issue")
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ":RELATED_ISSUES_VALIDATOR_TC_42_Case_02 _$it _when current issue having at least 2 issues linked to it through the relates to link type:",
                 expected  : 0,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue     : { -> issueLinks[] },
                         transition: it,
                 ]
                ],
                [action    : 'deleteLink',
                 ext: ": 1 by relates to link type after checking _$it _min issue constraints option:",
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> relatesToIssue2[] },
                         link   : 'relates to'
                 ]
                ],
                [action    : 'deleteLink',
                 ext: ": 2 by relates to link type after checking _$it _min issue constraints option:",
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> relatesToIssue3[] },
                         link   : 'relates to'
                 ]
                ],
        ])
    }
}

// RELATED_ISSUES_VALIDATOR_TC_43_Case_01-verify require certain related issues_The current issue must not have more than 2 issues linked to it through the relates to link type
[
        'Verify_Issue_constraints_max_two_linkByRelatesTo'
].collect {
    if(!isCloud) {
        gint.taskHelper.add([
                [action: 'getLinkList',
                 ext: ": validate that issue has 0 issue linked to it through relates to link type for _ $it: ",
                 parameters: [
                         issue: {->issueLinks[]},
                         outputType: "Text",
                         columns: "Link Description",
                         select: "Link Description:relates to"
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("0 links for issue")
                 }
                ],
                [action    : 'linkIssue',
                 ext: ": 1 by relates to link type to $it _check max issue constraints option:",
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> toIssueLink[] },
                         link   : 'relates to'
                 ]
                ],
                [action: 'getLinkList',
                 ext: ": validate that issue has 1 issue linked to it through relates to link type for _ $it: ",
                 parameters: [
                         issue: {->issueLinks[]},
                         outputType: "Text",
                         columns: "Link Description",
                         select: "Link Description:relates to"
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("1 links for issue")
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ":RELATED_ISSUES_VALIDATOR_TC_43_Case_01 _$it _when current issue not having more than 2 issues linked to it through the relates to link type:",
                 expected  : 0,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue     : { -> issueLinks[] },
                         transition: it,
                 ]
                ],
                [action    : 'linkIssue', ext: ": 2nd issue link by relates to link to check_ $it  _min_issue constraints:",
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> relatesToIssue2[] },
                         link   : 'relates to'
                 ]
                ],
                [action    : 'linkIssue',
                 ext: ': 3rd issue linked to check max_issue constraints:',
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> relatesToIssue3[] },
                         link   : 'relates to'
                 ]
                ],
                [action: 'getLinkList',
                 ext: ": validate that issue has 3 issue linked to it through relates to link type for _ $it: ",
                 parameters: [
                         issue: {->issueLinks[]},
                         outputType: "Text",
                         columns: "Link Description",
                         select: "Link Description:relates to"
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("3 links for issue")
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ":RELATED_ISSUES_VALIDATOR_TC_43_Case_02 _$it _when current issue having more than 3 issues linked to it through the relates to link type:",
                 expected  : -3,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue     : { -> issueLinks[] },
                         transition: it,
                 ]
                ],
                [action    : 'deleteLink',
                 ext: ": 1 by relates to link type to $it _check max issue constraints option:",
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> toIssueLink[] },
                         link   : 'relates to'
                 ]
                ],
                [action    : 'deleteLink', ext: ":2 issues linked to check_ $it max_issue constraints:",
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> relatesToIssue2[] },
                         link   : 'relates to'
                 ]
                ],
                [action    : 'deleteLink', ext: ": issues linked to check_ $it _max_issue constraints:",
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> relatesToIssue3[] },
                         link   : 'relates to'
                 ]
                ],
        ])
    }
}

// RELATED_ISSUES_VALIDATOR_TC_44- The current issue must have at least 3 and at most 6 issues linked to it through the relates to link type
[
        'Verify_Issue_constraints_min_three_max_six_linkByRelatesTo'
].collect {
    if(!isCloud) {
        gint.taskHelper.add([
                [action: 'getLinkList',
                 ext: ": validate that issue has 0 issue linked to it through relates to link type for _ $it _case_01: ",
                 parameters: [
                         issue: {->issueLinks[]},
                         outputType: "Text",
                         columns: "Link Description",
                         select: "Link Description:relates to"
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("0 links for issue")
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ":RELATED_ISSUES_VALIDATOR_TC_44_Case_01 _$it _when current issue not have at least 3 and at most 6 issues linked to it through the relates to link type:",
                 expected  : -3,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue     : { -> issueLinks[] },
                         transition: it,
                 ]
                ],
                [action    : 'linkIssue',
                 ext: ": 1 by relates to link type to $it _check max issue constraints option:",
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> toIssueLink[] },
                         link   : 'relates to'
                 ]
                ],
                [action    : 'linkIssue', ext: ": 2 by relates to link type to check min and max issue constraints option:" + it,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> relatesToIssue2[] },
                         link   : 'relates to'
                 ]
                ],
                [action    : 'linkIssue', ext: ": 3 by relates to link type to check min and max issue constraints option2:" + it,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> relatesToIssue3[] },
                         link   : 'relates to'
                 ]
                ],
                [action: 'getLinkList',
                 ext: ": validate that issue has 3 issue linked to it through relates to link type for _ $it: ",
                 parameters: [
                         issue: {->issueLinks[]},
                         outputType: "Text",
                         columns: "Link Description",
                         select: "Link Description:relates to"
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("3 links for issue")
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ":RELATED_ISSUES_VALIDATOR_TC_44_Case_02 _$it _when current issue having at least 3 issues linked to it through the relates to link type:",
                 expected  : 0,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue     : { -> issueLinks[] },
                         transition: it,
                 ]
                ],
                [action    : 'deleteLink',
                 ext: ": 1 by relates to link type to $it _ after checking max issue constraints option:",
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> toIssueLink[] },
                         link   : 'relates to'
                 ]
                ],
                [action    : 'deleteLink', ext: ": 2 by relates to link type after checking min and max issue constraints option:" + it,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> relatesToIssue2[] },
                         link   : 'relates to'
                 ]
                ],
                [action    : 'deleteLink', ext: ": 3 by relates to link type after checking min and max issue constraints option2:" + it,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> relatesToIssue3[] },
                         link   : 'relates to'
                 ]
                ],
        ])
    }
}

// link the issues to check the issue constraint options for max 6 issues by relates to link type
def relatesToIssuesList = [
        issue2 : {->relatesToIssue2[]},
        issue3 : {->relatesToIssue3[]},
        issue4 : {->relatesToIssue4[]},
        issue5 : {->relatesToIssue5[]},
        issue6 : {->relatesToIssue6[]},
        issue7 : {->relatesToIssue7[]}
]

relatesToIssuesList.eachWithIndex { key, value, i ->
    if(!isCloud) {
        gint.taskHelper.add(
                [action    : 'linkIssue',
                 ext       : ": by duplicates link type to check max issue constraints option:" + key,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: value,
                         link   : 'duplicates'
                 ],
                ])
    }
}

[
        'Verify_Issue_constraints_min_three_max_six_linkByRelatesTo'
].collect {
    if(!isCloud) {
        gint.taskHelper.add([
                [action: 'getLinkList',
                 ext: ": validate that issue has 0 issue linked to it through relates to link type for _ $it _case_02: ",
                 parameters: [
                         issue: {->issueLinks[]},
                         outputType: "Text",
                         columns: "Link Description",
                         select: "Link Description:relates to"
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("0 links for issue")
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ":RELATED_ISSUES_VALIDATOR_TC_44_Case_03 _$it _when current issue more than 6 ie 7 issues linked to it through the duplicates link type:",
                 expected  : -3,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue     : { -> issueLinks[] },
                         transition: it,
                 ]
                ],
        ])
    }
}

//transitionByUserTaskForSuccess('Verify_Issue_constraints_min_three_max_six_linkByRelatesTo', testUserForServer, {->issueLinks[]}, -3)


// delete link between issues to while check the issue constraint options for max 6 issues by relates to link type
relatesToIssuesList.eachWithIndex { key, value, i ->
    if(!isCloud) {
        gint.taskHelper.add(
                [action    : 'deleteLink',
                 ext       : ": by duplicates link type to check max issue constraints option:" + key,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: value,
                         link   : 'duplicates'
                 ],
                ])
    }
}

relatesToIssuesList.eachWithIndex { key, value, i ->
    if(!isCloud) {
        gint.taskHelper.add(
                [action    : 'linkIssue',
                 ext       : ": by relates to link type to check max issue constraints option:" + key,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: value,
                         link   : 'relates to'
                 ],
                ])
    }
}

[
        'Verify_Issue_constraints_min_three_max_six_linkByRelatesTo'
].collect {
    if(!isCloud) {
        gint.taskHelper.add([
                [action: 'getLinkList',
                 ext: ": validate that issue has 6 issue linked to it through relates to link type for _ $it: ",
                 parameters: [
                         issue: {->issueLinks[]},
                         outputType: "Text",
                         columns: "Link Description",
                         select: "Link Description:relates to"
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("6 links for issue")
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ":RELATED_ISSUES_VALIDATOR_TC_44_Case_04 _$it _when current issue have 6  issues linked to it through the relates to link type:",
                 expected  : 0,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue     : { -> issueLinks[] },
                         transition: it,
                 ]
                ],
                [action    : 'linkIssue',
                 ext: ": 7th issue by relates to link type to check_ $it _max issue constraints option:" ,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { ->toIssueLink[] },
                         link   : 'relates to'
                 ],
                ],
                [action: 'getLinkList',
                 ext: ": validate that issue has 7 issue linked to it through relates to link type for _ $it: ",
                 parameters: [
                         issue: {->issueLinks[]},
                         outputType: "Text",
                         columns: "Link Description",
                         select: "Link Description:relates to"
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("7 links for issue")
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ":RELATED_ISSUES_VALIDATOR_TC_44_Case_04 _$it _when current issue have at 7 issues linked to it through the relates to link type:",
                 expected  : -3,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue     : { -> issueLinks[] },
                         transition: it,
                 ]
                ],
        ])
    }
}

// RELATED_ISSUES_VALIDATOR_TC_14-verify require certain related issues and subtask of the current issue_by non admin user
//transitionByUserTaskForError('Verify_Issue_constraints_min_three_max_six_linkByRelatesTo', testUserForServer, {->defaultIssue[]}, -3)

if(!isCloud) {
    gint.taskHelper.add(
            [action    : 'deleteLink',
             ext       : ": 7th issue linked by relates to link type to check max issue constraints option:",
             sleep: info?.isCloud? 5000 : 500,
             parameters: [
                     issue  : { -> toIssueLink[] },
                     toIssue: { -> issueLinks[] },
                     link   : 'relates to',
             ],
            ]
    )
}

// delete link between issues while check the issue constraint options for max 6 issues by relates to link type
relatesToIssuesList.eachWithIndex { key, value, i ->
    if(!isCloud) {
        gint.taskHelper.add(
                [action    : 'deleteLink',
                 ext       : ": by relates to link type to check max issue constraints option:" + key,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: value,
                         link   : 'relates to'
                 ],
                ])
    }
}

// RELATED_ISSUES_VALIDATOR_TS- The current issue must have at least 2 and at most 2 issues linked to it through the relates to link type
[
        'Verify_Issue_constraints_min_two_max_two_linkByRelatesTo'
].each {
    if(!isCloud) {
        gint.taskHelper.add([
                [action: 'getLinkList',
                 ext: ": validate that issue has 0 issue linked to it through relates to link type for _ $it _case_02: ",
                 parameters: [
                         issue: {->issueLinks[]},
                         outputType: "Text",
                         columns: "Link Description",
                         select: "Link Description:relates to"
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("0 links for issue")
                 }
                ],
        ]
        )
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 ext       : ":RELATED_ISSUES_VALIDATOR_TS_ TC_01_Case_01 _$it _when current issue not have at least 2 and at most 2 issues linked to it through the relates to link type:",
                 expected  : -3,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue     : { -> issueLinks[] },
                         transition: it,
                 ]
                ],
                [action    : 'linkIssue',
                 ext: ": by relates to link type to check $it _ link 1st issue:" ,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> relatesToIssue2[] },
                         link   : 'relates to'
                 ],
                ],
                [action    : 'linkIssue',
                 ext: ": by relates to link type to check $it _ link 2nd issues:" ,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> relatesToIssue3[] },
                         link   : 'relates to'
                 ],
                ],
                [action: 'getLinkList',
                 ext: ": validate that issue has 2 issue linked to it through relates to link type for _ $it _case_02: ",
                 parameters: [
                         issue: {->issueLinks[]},
                         outputType: "Text",
                         columns: "Link Description",
                         select: "Link Description:relates to"
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("2 links for issue")
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ":RELATED_ISSUES_VALIDATOR_TS_TC_01_Case_02 _$it _when current issue have 2 issues linked to it through the relates to link type:",
                 expected  : 0,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue     : { -> issueLinks[] },
                         transition: it,
                 ]
                ],
                [action    : 'linkIssue',
                 ext: ": by relates to link type to check $it _link 3rd issue:" ,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> relatesToIssue4[] },
                         link   : 'relates to'
                 ],
                ],
                [action: 'getLinkList',
                 ext: ": validate that issue has 3 issue linked to it through relates to link type for _ $it: ",
                 parameters: [
                         issue: {->issueLinks[]},
                         outputType: "Text",
                         columns: "Link Description",
                         select: "Link Description:relates to"
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("3 links for issue")
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ":RELATED_ISSUES_VALIDATOR_TS_TC_01_Case_03 _$it _when current issue have more than 2 issues linked to it through the relates to link type:",
                 expected  : -3,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue     : { -> issueLinks[] },
                         transition: it,
                 ]
                ],
                [action    : 'deleteLink',
                 ext: ": by relates to link type to check _$it min 2 issue and max 2 link constraints option1:",
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { ->relatesToIssue2[] },
                         link   : 'relates to'
                 ],],
                [action    : 'deleteLink',
                 ext: ": by relates to link type to check _$it min 2 issue and max 2 link constraints option2:" ,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { ->relatesToIssue3[] },
                         link   : 'relates to'
                 ],
                ],
                [action    : 'deleteLink',
                 ext: ": by relates to link type to _$it _check min 2 issue and max 2 link constraints option3:" ,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { ->relatesToIssue4[] },
                         link   : 'relates to'
                 ],
                ]
        ])
    }
}

// RELATED_ISSUES_VALIDATOR_TS- The current issue must have at least 2 and at most 2 issues linked to it through the relates to link type
[
        'Verify_Issue_constraints_min_two_max_two_linkByRelatesTo'
].each {
    if(!isCloud) {
        gint.taskHelper.add([
                [action: 'getLinkList',
                 ext: ": validate that issue has 0 issue linked to it through duplicates link type for _ $it _case_01: ",
                 parameters: [
                         issue: {->issueLinks[]},
                         outputType: "Text",
                         columns: "Link Description",
                         select: "Link Description:duplicates"
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("0 links for issue")
                 }
                ],
        ]
        )
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 ext       : ":RELATED_ISSUES_VALIDATOR_TS_TC_02_Case_01 _$it _when current issue not have linked min 2 and max 2 linked issues:",
                 expected  : -3,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue     : { -> issueLinks[] },
                         transition: it,
                 ]
                ],
                [action    : 'linkIssue',
                 ext: ": by duplicates link type to check $it _ link 1st issue:" ,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> relatesToIssue2[] },
                         link   : 'duplicates'
                 ],
                ],
                [action    : 'linkIssue',
                 ext: ": by duplicates link type to check $it _ link 2nd issue:" ,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> relatesToIssue3[] },
                         link   : 'duplicates'
                 ],
                ],
                [action: 'getLinkList',
                 ext: ": validate that issue has 2 issue linked to it through duplicates link type for _ $it _case _01: ",
                 parameters: [
                         issue: {->issueLinks[]},
                         outputType: "Text",
                         columns: "Link Description",
                         select: "Link Description:duplicates"
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("2 links for issue")
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ":RELATED_ISSUES_VALIDATOR_TS_TC_02_Case_02 _$it _when current issue have 2 issues linked to it through the duplicates link type:",
                 expected  : -3,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue     : { -> issueLinks[] },
                         transition: it,
                 ]
                ],
                [action    : 'linkIssue',
                 ext: ": by relates to link type to check $it _link 1st issue:" ,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> relatesToIssue2[] },
                         link   : 'relates to'
                 ],
                ],
                [action    : 'linkIssue',
                 ext: ": by relates to link type to check $it _link 2nd issue:" ,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> relatesToIssue3[] },
                         link   : 'relates to'
                 ],
                ],
                [action: 'getLinkList',
                 ext: ": validate that issue has 2 issue linked to it through relates to link type for _ $it: ",
                 parameters: [
                         issue: {->issueLinks[]},
                         outputType: "Text",
                         columns: "Link Description",
                         select: "Link Description:relates to"
                 ],
                 finalClosure: { Task task ->
                     def output = "$task.outData"
                     assert output.contains("2 links for issue")
                 }
                ],
                [action    : 'transitionIssue',
                 ext       : ":RELATED_ISSUES_VALIDATOR_TC_02_Case_03 _$it _when current issue have more than 2 issues linked to it through the duplicates link type:",
                 expected  : 0,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue     : { -> issueLinks[] },
                         transition: it,
                 ]
                ],
                [action    : 'deleteLink',
                 ext: ": by duplicates link type to check _ $it _min 2 issue and max 2 link constraints option1:",
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { ->relatesToIssue2[] },
                         link   : 'duplicates'
                 ],],
                [action    : 'deleteLink',
                 ext: ": by duplicates link type to check _$it _min 2 issue and max 2 link constraints option2:" ,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { ->relatesToIssue3[] },
                         link   : 'duplicates'
                 ],
                ],
                [action    : 'deleteLink',
                 ext: ": by relates to link type to check _$it _unlink 1st issue:" ,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> relatesToIssue2[] },
                         link   : 'relates to'
                 ],
                ],
                [action    : 'deleteLink',
                 ext: ": by relates to link type to check $it _unlink 2nd issue:" ,
                 sleep: info?.isCloud? 5000 : 500,
                 parameters: [
                         issue  : { -> issueLinks[] },
                         toIssue: { -> relatesToIssue3[] },
                         link   : 'relates to'
                 ],
                ],
        ])
    }
}

// RELATED_ISSUES_VALIDATOR_TC_49 - current issue must have at least 1 and at most 0 issues linked to it through the relates to link type, and at least one of them must respect the following condition
[
        'verify_condition_on_related_issues_checkAssignee'
].each {
    gint.taskHelper.add([
            [action    : 'linkIssue',
             ext       : ": by relates to link type to check $it _link 1st issue:",
             sleep: info?.isCloud? 5000 : 500,
             parameters: [
                     issue  : { -> issueLinks[] },
                     toIssue: { -> toIssueLink[] },
                     link   : 'relates to'
             ],
            ],
            [action    : 'transitionIssue',
             ext       : ":RELATED_ISSUES_VALIDATOR_TC_49_Case_01 -$it _when current issue not having at least 1 issues linked to it through the relates to link type which respect the following condition_issue must have assignee $testUser:",
             expected  : -3,
             sleep     : info?.isCloud? 5000 : 500,
             parameters: [
                     issue     : { -> issueLinks[] },
                     transition: it,
             ]
            ],
            [action    : 'assignIssue',
             ext       : ": linked issue to _ $user to_ $it :",
             sleepAfter: info?.isCloud? 5000 : 500,
             parameters: [
                     issue   : { -> toIssueLink[] },
                     assignee: user,
             ],
            ],
            [action    : 'assignIssue',
             ext       : ": current issue to_ $user to_ $it :",
             sleepAfter: info?.isCloud? 5000 : 500,
             parameters: [
                     issue   : { -> issueLinks[] },
                     assignee: user,
             ],
            ],
            [action    : 'transitionIssue',
             ext       : ":RELATED_ISSUES_VALIDATOR_TC_49_Case_02 -$it _when current issue having at least 1 issues linked to it through the relates to link type which respect the following condition_issue must have assignee $testUser:",
             expected  : 0,
             sleep     : info?.isCloud? 5000 : 500,
             parameters: [
                     issue     : { -> issueLinks[] },
                     transition: it,
             ]
            ],
            [action    : 'assignIssue', ext: ": to _ UNASSIGNED issue- after_ $it :",
             sleep: info?.isCloud? 5000 : 500,
             parameters: [
                     issue   : { -> toIssueLink[] },
                     assignee: " ",
             ],
            ],
            [action    : 'deleteLink',
             ext       : ": by relates to link type to check $it _link 1st issue:",
             sleep: info?.isCloud? 5000 : 500,
             parameters: [
                     issue  : { -> issueLinks[] },
                     toIssue: { -> toIssueLink[] },
                     link   : 'relates to'
             ],
            ],
    ])
}

// RELATED_ISSUES_VALIDATOR_TS_42_-Verify Validator scope -Conditional validation
['verify_validator_scope_conditional_validation'].collect {
    gint.taskHelper.add([
            [action: 'updateIssue',
             ext: ": change issue priority to Low for checking: $it",
             parameters: [
                     issue: {->defaultIssue[]},
                     priority: "Low",
             ]
            ],
            [action    : 'transitionIssue',
             ext       : ":RELATED_ISSUES_VALIDATOR_TC_42_case_01 -$it _when issue not satisfies the condition_skip the validator:",
             expected  : 0,
             parameters: [
                     issue     : {->defaultIssue[]},
                     transition: it ,
             ],
             failData : ["$errorMessage"],
            ],
            [action: 'updateIssue',
             ext: ": change issue priority to High for checking: $it",
             parameters: [
                     issue: {->defaultIssue[]},
                     priority: "High",
             ]
            ],
            [action    : 'transitionIssue',
             ext       : ":RELATED_ISSUES_VALIDATOR_TC_42_Case_02 -$it _when issue satisfies the condition_not skipping the validator:",
             expected  : -3,
             parameters: [
                     issue     : {->defaultIssue[]},
                     transition: it ,
             ],
             data : ["$errorMessage"],
            ],
            [action: 'updateIssue', ext: ": change issue priority to Low after checking: $it",
             parameters: [
                     issue: {->defaultIssue[]},
                     priority: "Low",
             ]
            ],
    ])
}

/*
Reviewed by Niharika: 08.03.2024:
1. Max issue limit should be 1000.
2. Add check, require and forbid condition on same transition and check = Pending.
3. Verify transition by admin user and non-admin user = DONE.
 */

