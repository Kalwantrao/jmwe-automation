buildscript {
    def gintVersion = findProperty('gintVersion') ?: System.getenv('GINT_VERSION') ?: '+'
    dependencies {
        classpath 'org.gint:gint-atlassian:' + gintVersion
    }
    repositories {
        flatDir { dirs 'libs' } // for testing SNAPSHOT versions
        mavenLocal()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
}

apply from:'configValidators/addFieldHasSingleValueValidator.gradle'
apply from:'common/tearDown.gradle'
apply plugin: 'org.gint.atlassian'
apply from: 'common/setUp.gradle'

def info = gint.getJiraHelper().getServerInfoWithVerify() // Verify access to Jira instance otherwise end test if server not available
def project = gint.getJiraHelper().getProjectKey()	//get project key using jira helper functions
def user = info.user
def userqa1 = project.toLowerCase()+'qa1'
def userqa2 = project.toLowerCase()+'qa2'
def userdev1 = project.toLowerCase()+'dev1'
def userdev2 = project.toLowerCase()+'dev2'
def saved =	[:]
def savedIssues = [:]
def transition = 'fieldHasSingleValueValidator'

// Create issues
(1..9).each { number ->
def type = 'Bug'
def summary
	if (number == 1)
		summary = 'fieldVersionsShouldHaveSingleValue'
	else if(number == 2)
		summary = 'fieldFixVersionsShouldHaveSingleValue'
	else if(number == 3)
		summary = 'FieldComponentsShouldHaveSingleValue'
	else if(number == 4)
		summary = 'fieldLabelsShouldHaveSingleValue'
	else if(number == 5)
		summary = 'FieldSubtaskShouldHaveSingleValue'
	else if (number == 6)
		summary = 'fieldIssueLinksShouldHaveSingleValue'
	else if(number == 7)
		summary = 'fieldVotesShouldHaveSingleValue'
	else if(number == 8)
		summary = 'fieldWatchesShouldHaveSingleValue'
	else if(number == 9)
		summary = 'fieldSprintShouldHaveSingleValue'

    gint.taskHelper.add(
        action: 'createIssue', ext: number,
        dependsOn: true,
        group: 'create',
        project: project,
        parameters: [
            type: type,
            summary: summary ,
            description: 'fieldHasSingleValue' + number,
        ],
        stopOnFail: true,
        finalClosure: { Task task ->
            saved.issue = gint.searchForIssueKey(task.outData)
            savedIssues[number] = saved.issue
            gint.helper.logVarWithFormat('saved')
        },
    )
}
// Transition issues when field values are not more than one
(1..9).each{ number ->
    gint.taskHelper.add('transitionIssueAll', [
        [action: 'transitionIssue', ext: 'fieldsHavingSingleValue'+number,
            dependsOn: true,
            expected: [ 0 ],
            parameters: [
                issue: {-> savedIssues[number]  },
                transition: transition + number,
                resolution: "Done",
				],
           data:[
            	~/Successfully transitioned issue ${project}-\d+ with transition '${transition + number}'./
            ],
        ],
    ])
}

(1..3).each{ number ->
def affectsVersions = number
def fixVersions = number
def component = 'component'+ number

    gint.taskHelper.add('updateIssuesWithFieldValue', [
        [action: 'run', ext: 'addFieldValuesToCheckErrors'+number,
            dependsOn: true,
            parameters: [
            	input:[
            		/-a updateIssue  --issue ${project}-1 --affectsVersions ${affectsVersions} --append /,
            		/-a updateIssue  --issue ${project}-2 --fixVersions ${fixVersions} --append /,
            		/-a updateIssue  --issue ${project}-3 --components ${component} --append /,
            		 ],
				],
           data:[
            	~/Issue ${project}-\d+ updated./
            ],
        ],
    ])
}

// transition the issue after fields having multiple values to validate the errors

(1..3).each{ number ->
def expected = [ -3 ]
def data
	if(number == 1)
		data = 'Remote error: versions: Affects Version/s should not have more than one value.'
	if(number == 2)
		data = 'Remote error: fixVersions: Fix Version/s should not have more than one value.'
	if(number == 3)
		data = 'Remote error: components: Component/s should not have more than one value.'

    gint.taskHelper.add('transitionIssueAll', [
        [action: 'transitionIssue', ext: 'fieldsHavingMultipleValues'+number,
            dependsOn: true,
            expected: expected,
            parameters: [
                issue: {-> savedIssues[number]  },
                transition: transition + number,
                resolution: "Done",
				],
           data:[ data ],
        ],
    ])
}
