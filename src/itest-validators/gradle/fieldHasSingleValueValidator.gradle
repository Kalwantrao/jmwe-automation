buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.gint:gint-atlassian:3.8.4"
	}
}

apply plugin: 'org.gint.atlassian'
//apply from: gint.resourceDirectory +'/src/common/utils.gradle'
apply from: gint.resourceDirectory +'/src/itest-validators/validator.gradle'

def functionKey =  info?.isCloud ? 'com.innovalog.jmwe.jira-misc-workflow-extensions:fieldhassinglevalue-validator' : 'com.innovalog.jmwe.jira-misc-workflow-extensions:fieldhassinglevalue-validator'

def fieldsList = [
		Labels:'labels',
		Components:'components',
		AffectsVersions:'versions',
		FixVersions:'fixVersions',
]

def excludingSubtasks = [
        yes : "excludingSubtasks=yes",
		no : "excludingSubtasks=no"
]

fieldsList.eachWithIndex { field, value, i ->
	def transition = field + '_should_have_single_value'
	def fields = defaultFieldsServer + conditionalValidation.no + "field=$value"
	if(!isCloud) {
		addTransitionFunction(transition, 'validator', fields, functionKey)
	}
}

['Components_should_have_single_value_excluding_subtask_values'].each {
	def server = defaultFieldsServer + excludingSubtasks.yes +  conditionalValidation.no + "field=$fieldsList.Components"
	if(!isCloud) {
		addTransitionFunction(it, 'validator', server, functionKey)
	}
}

['Components_should_have_single_value_only_if_condition_true'].each {
	def server = defaultFieldsServer + "field=$fieldsList.Components" + conditionalValidation.yes
	if(!isCloud) {
		addTransitionFunction(it, 'validator', server, functionKey)
	}
}

createWorkflowScheme()
createProject()

(1..4).each {
	if(!isCloud) {
		gint.taskHelper.addSetUp([
				[action    : 'addVersion', ext: ': create versions : ' + it,
				 parameters: [
						 project: projectName,
						 version: it
				 ]
				],
				[action    : 'addComponent', ext: ': create Component : ' + it,
				 parameters: [
						 project  : projectName,
						 component: 'component' + it
				 ],
				]
		])
	}
}

def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'defaultIssue')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: {->defaultIssue[]}], 'subtask')

// FIELD_HAS_SINGLE_VALUE_VALIDATOR_TS_09_TC_01- Verify with the default configuration for field has single value validator_labels
[
		//'Labels_should_have_single_value',
		'Components_should_have_single_value',
		'AffectsVersions_should_have_single_value',
		'FixVersions_should_have_single_value'
].each {
	[1,2].eachWithIndex { numberOfValuesForField, int i ->
	def addFields;
	if(it == 'Labels_should_have_single_value'){
		addFields = [labels: "label" + numberOfValuesForField]
	}
	else if(it == 'Components_should_have_single_value'){
		addFields = [components: "component" + numberOfValuesForField]
	}
	else if(it == 'AffectsVersions_should_have_single_value'){
		addFields = [affectsVersions: numberOfValuesForField]
	}
	else if(it == 'FixVersions_should_have_single_value'){
		addFields = [fixVersions: numberOfValuesForField]
	}
		def expected;
		if(numberOfValuesForField == 1){
			expected = 0
		}
		else{
			expected = -3
		}
	if(!isCloud) {
		gint.taskHelper.add([
				[action    : 'updateIssue',
				 ext       : ":add field number_ $numberOfValuesForField to issue to check_ $it :",
				 parameters: [
						 issue : { -> defaultIssue[] },
						 append: null
				 ] + addFields,
				],
				[action    : 'transitionIssue',
				 ext       : ":FIELD_HAS_SINGLE_VALUE_VALIDATOR-TS_09_TC_01_Case_01- $it _when field has $numberOfValuesForField values:",
				 expected  : expected,
				 parameters: [
						 transition: it,
						 issue     : { -> defaultIssue[] },
				 ],
				],
		])
	}
	}
}

// FIELD_HAS_SINGLE_VALUE_VALIDATOR_TS_09_TC_02- Verify with the default configuration for field has single value validator_Components
// FIELD_HAS_SINGLE_VALUE_VALIDATOR_TS_10_TC_01- Verify with the default configuration for field has single value validator_AffectsVersions
// FIELD_HAS_SINGLE_VALUE_VALIDATOR_TS_10_TC_02- Verify with the default configuration for field has single value validator_FixVersions

// FIELD_HAS_SINGLE_VALUE_VALIDATOR_TS_12_TC_01- Verify Field has single value Validator page with_component Excluding values present in sub-tasks
['Components_should_have_single_value_excluding_subtask_values'].each {
	if(!isCloud) {
		gint.taskHelper.add([
				[action    : 'setFieldValue',
				 ext       : ":remove component to clear field value to check issue to check_ $it :",
				 parameters: [
						 issue: { -> defaultIssue[] },
						 field: "Component/s",
						 value: " "
				 ]
				],
				[action    : 'updateIssue',
				 ext       : ":add component1 to issue to check_ $it :",
				 parameters: [
						 issue     : { -> defaultIssue[] },
						 components: "component1",
						 append    : null
				 ]
				],
				[action    : 'updateIssue',
				 ext       : ":add component2 to subtask of issue to check_ $it :",
				 parameters: [
						 issue     : { -> subtask[] },
						 components: "component2",
						 append    : null
				 ]
				],
				[action    : 'transitionIssue',
				 ext       : ":FIELD_HAS_SINGLE_VALUE_VALIDATOR-TS_12_TC_01_Case_01- $it _when field has single value:",
				 expected  : 0,
				 parameters: [
						 transition: it,
						 issue     : { -> defaultIssue[] },
				 ],
				],
				[action    : 'updateIssue',
				 ext       : ":add label2 to issue to check_ $it :",
				 parameters: [
						 issue     : { -> defaultIssue[] },
						 components: "component2",
						 append    : null
				 ]
				],
				[action    : 'transitionIssue',
				 ext       : ":FIELD_HAS_SINGLE_VALUE_VALIDATOR-TS_12_TC_01_Case_02- $it _when field has single value_excluding subtask value:",
				 expected  : 0,
				 parameters: [
						 transition: it,
						 issue     : { -> defaultIssue[] },
				 ],
				],
				[action    : 'updateIssue',
				 ext       : ":add component3 to issue to check_ $it :",
				 parameters: [
						 issue     : { -> defaultIssue[] },
						 components: "component3",
						 append    : null
				 ]
				],
				[action    : 'transitionIssue',
				 ext       : ":FIELD_HAS_SINGLE_VALUE_VALIDATOR-TS_12_TC_01_Case_03- $it _when field not has single value_excluding subtask value:",
				 expected  : -3,
				 parameters: [
						 transition: it,
						 issue     : { -> defaultIssue[] },
				 ],
				],
		])
	}
}

// FIELD_HAS_SINGLE_VALUE_VALIDATOR_TS_15_TC_01- Verify Field has single value _with _components Conditional validation when condition skips
[
		'Components_should_have_single_value_only_if_condition_true'
].each {
	if(!isCloud) {
		gint.taskHelper.add([
				[action    : 'setFieldValue',
				 ext       : ":remove component to clear field value to check issue to check_ $it :",
				 parameters: [
						 issue: { -> defaultIssue[] },
						 field: "Component/s",
						 value: " "
				 ]
				],
				[action    : 'updateIssue',
				 ext       : ":add component1 to issue to check_ $it :",
				 parameters: [
						 issue     : { -> defaultIssue[] },
						 components: "component1",
						 append    : null
				 ]
				],
				[action    : 'updateIssue',
				 ext       : ":add component2 to issue to check_ $it :",
				 parameters: [
						 issue     : { -> defaultIssue[] },
						 components: "component2",
						 append    : null
				 ]
				],
				[action    : 'transitionIssue',
				 ext       : ":FIELD_HAS_SINGLE_VALUE_VALIDATOR_TS_15_TC_01 -when condition skips:",
				 expected  : 0,
				 parameters: [
						 transition: it,
						 issue     : { -> defaultIssue[] },
				 ],
				],
				[action    : 'setFieldValue',
				 ext       : ":change priority to high to check_ $it :",
				 parameters: [
						 issue: { -> defaultIssue[] },
						 field: "Priority",
						 value: "High"
				 ]
				],
				[action    : 'transitionIssue',
				 ext       : ":FIELD_HAS_SINGLE_VALUE_VALIDATOR-TS_16_TC_01_- $it _when condition pass:",
				 expected  : -3,
				 parameters: [
						 transition: it,
						 issue     : { -> defaultIssue[] },
				 ],
				],
		])
	}
}

/*
1. check only multi valued fields - "Done"
2 check custom multi value field - pos and neg = // ToDo "Need to add custom fields"
 */



