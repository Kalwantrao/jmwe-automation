import groovy.json.JsonSlurper
import java.nio.file.Paths

buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.gint:gint-atlassian:3.8.4"
	}
}

apply plugin: 'org.gint.atlassian'
apply from: 'common/setUp.gradle'

def info = gint.getJiraHelper().getServerInfoWithVerify() // Verify access to Jira instance otherwise end test if server not available
def project = gint.getJiraHelper().getProjectKey()	//get project key using jira helper functions
def workflow = project
def screen = project
gint.xmlReport =	true	//xml report generates in projects root directory
gint.verbose =	true
def user = info.user
def userqa1 = project.toLowerCase()+'qa1'
def userqa2 = project.toLowerCase()+'qa2'
def userdev1 = project.toLowerCase()+'dev1'
def userdev2 = project.toLowerCase()+'dev2'

def transition = 'previousStatusValidator'
def jsonSlurper = new JsonSlurper();
def path = Paths.get(gint.directories.resource + "/resources/validatorsData/PreviousStatusValidatorFunctions.json")
def transitionFunctions = jsonSlurper.parse(path)
def functionKey = 'com.innovalog.jmwe.jira-misc-workflow-extensions:previousstatus-validator'
def startStep = info?.isCloud ? '1':'11' // depends on workflow. '1' for cloud and '11' (To Do)for server works for custom jira workflow

createTransitionsWithFunctions(transitionFunctions, transition, functionKey, 'validator', startStep, workflow, screen, 0)

// check the previous status of the issue
def issue1 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'createParentIssue')
transitionIssue(transition+0, {-> issue1[0]}, [-3], 'transitionWhenPreviousStatuNotInSelectedStatus', null, ["Remote error: Transition is not authorized because current Issue has never been in status To Do before."])


def issue2 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'createParentIssue1')
transitionToStatus({-> issue2[0]}, "In Progress", "To Do", 'setPreviousStatusOfIssueInSelected1')
transitionIssue(transition+0, {-> issue2[0]}, 0, 'checkWhenIssuesPreviousStatusInSelected', null, null)

//check mostRecentStatusOnly
def checkMostRecentStatus = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'checkMostRecentStatus')
transitionToStatus({-> checkMostRecentStatus[0]}, "In Progress", "To Do", 'setMostRecentStatus1')
transitionIssue(transition+4, {-> checkMostRecentStatus[0]}, 0, 'checkMostRecentStatusInSelectedStatus', null, null)

def mostRecentStatus = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'checkMostRecentStatus1')
transitionToStatus({-> mostRecentStatus[0]}, "To Do", "To Do", 'setMostRecentStatus2')
transitionIssue(transition+4, {-> mostRecentStatus[0]}, [-3], 'checkMostRecentStatusNotInSelectedStatus', null, ["Remote error: previousStatusMostRecentStatusMustBeInProgress"])

// check conditional execution true
def issue4 = createIssue(project,{[ type: 'Story', summary: 'JMWE_Issue']}, 'createParentForConditionalExecutionTrue')
transitionIssue(transition+5, {-> issue4[0]}, [-3], 'transitionToCheckConditionalExecTrue', null, ["Remote error: Transition is not authorized because current Issue has never been in status To Do before."])

def issue5 = createIssue(project,{[ type: 'Story', summary: 'JMWE_Issue']}, 'createParentForConditionalExecutionTrue1')
transitionToStatus({-> issue5[0]}, "In Progress", "To Do", 'setPreviousStatusOfIssueInSelected2')
transitionIssue(transition+5, {-> issue5[0]}, [0], 'transitionToCheckConditionalExecTruePreviousStatusInSelected', null, null)

// check conditional execution false
def issue6 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'createParentForConditionalExecutionFalse')
transitionIssue(transition+5, {-> issue6[0]}, 0, 'transitionToCheckConditionalExecFalse', null, null)













/*
def summaries = [
		'previousStatusToDo',
		'previousStatusInProgress',
		'previousStatusInReview',
		'previousStatusDone',
		'mostRecentStatusInProgress',
		'previousStatusToDoIfGroovyConditionTrue',
		'mostRecentStatusToDoIfGroovyConditionTrue'
]
def bug = createIssue(project, summaries.collect{[type: 'Bug', summary: it] }, 'createParentIssue' )
def subTask = createIssue(project, [1, 1 ].collect{[type: 'Sub-Task', summary: 'summary', parent: { -> bug[it] }]}, 'createSubtask' )
def epic = createIssue(project, summaries.collect{[type: 'Epic', summary: it, field: "Epic Name", value: "Epic"]}, 'createEpic' )
def story = createIssue(project, [0, 1, 2, 3, 4, 5, 6 ].collect{[type: 'story', summary: 'summary',field: "Epic Link", value: { -> epic[it] }]}, 'createStory' )
linkIssues({[ issue: { -> story[5] }, toIssue: { -> story[6] }, link: 'blocks'] } )
def summaryJql = [ 'jqlSearch1', 'jqlSearch2' ]
def IssueReturnByJqlSearch = createIssue(project, summaryJql.collect{[type: 'Task', summary: it, assignee: userqa1] }, 'IssueReturnByJqlSearch' )

// Check when issue is not been previously in selected status
[
		'Remote error: Transition is not authorized because current Issue has never been in status To Do before.',
		'Remote error: Transition is not authorized because current Issue has never been in status In Progress before.',
		'Remote error: Transition is not authorized because current Issue has never been in status In Review before.',
		'Remote error: Transition is not authorized because current Issue has never been in status Done before.',
		'Remote error: Transition is not authorized because current Issue was not previously in status In Progress',
].eachWithIndex { data, number ->
   gint.taskHelper.add(
            [action: 'transitionIssue',
            ext: 'validateTheErrorsWhenIssueNotRespectingValidators' + number,
            dependsOn: true,
            expected: [ -3 ],
            parameters: [
                issue:{ -> bug[number] },
                transition: transition + number
            ],
            data: [data],
        ]
    )
}

def selectedPreviousStatus = [
		0:'To Do',
		1:'In Progress',
		2:'In Review',
		3:'Done'
]
(0..3).each { number ->
	gint.taskHelper.add([
		[action: 'transitionIssue', ext: 'SetPreviousStatusToSelected' + number,
		dependsOn: true,
		expected: [ 0 ],
		parameters:[
			issue:  {-> bug[number] },
			transition: selectedPreviousStatus[number],
			],
		],
		[action: 'transitionIssue', ext: 'TobBaseStatusToDoToCheckPreviousStatusOfIssue' + number,
		dependsOn: true,
		expected: [ 0 ],
		parameters:[
			issue:  {-> bug[number] },
			transition: 'To Do',
			],
		],
		[action: 'transitionIssue', ext: 'CheckWhenIssuesPreviousStatusIsInSelected' + number,
		dependsOn: true,
		expected: [ 0 ],
		parameters:[
			issue:  {-> bug[number] },
			transition: transition + number,
			],
		]
])
}


def mostRecentStatus = [
		0:'In Progress',
		1:'In Review'
]
def expected = [
		0:[ 0 ],
		1:[ -3 ]
]
(0..1).each { number ->
	gint.taskHelper.add([
		[action: 'transitionIssue', ext: 'MostRecentStatus' + number,
		dependsOn: true,
		expected: [ 0 ],
		parameters:[
			issue:  {-> bug[4] },
			transition: mostRecentStatus[number],
			],
		],
		[action: 'transitionIssue', ext: 'toBaseStatusToDoToCheckMostRecentStatusOfTheIssue' + number,
		dependsOn: true,
		expected: [ 0 ],
		parameters:[
			issue:  {-> bug[4] },
			transition: 'To Do',
			],
		],
		[action: 'transitionIssue', ext: 'CheckWhenIssuesMostRecentStatusIsInSelectedStatus' + number,
		dependsOn: true,
		expected: expected[number],
		parameters:[
			issue:  {-> bug[4] },
			transition: transition + 4,
			],
		]
])
}
// Check conditional validation
(5..6).each{ number ->
gint.taskHelper.add([
	[action: 'transitionIssue', ext: 'When groovy condition returns false' + number,
    dependsOn: true,
    expected: [ 0 ],
    	parameters: [
        	issue:{ -> bug[number] },
            transition: transition + number
            ],
        data:[ ~/Successfully transitioned issue ${project}-\d+ with transition '${transition + number}'./ ],
	],
	[action: 'transitionIssue', ext: 'When groovy condition returns True' + number,
    dependsOn: true,
    expected: [ -3 ],
    	parameters: [
        	issue:{ -> story[number] },
            transition: transition + number
            ],
	],
])
}
 */
/*
// Using groovy functions
def transitionToSetPreviousStatusOfIssue (issues, selectedPreviousStatus, expectedData )
		gint.taskHelper.add([
				[action: 'transitionIssue', ext: transition,
				parameters:[
					issue: issues,
					transition: selectedPreviousStatus
					],
				data: [ expectedData ],
				],
				[action: 'transitionIssue', ext: transition,
				parameters:[
					issue: issues,
					transition: 'To Do'
					],
				data: [ expectedData ],
				]
			]
)

transitionToCheckPreviousStatusOfIssue( issueList1[it], transition[number], [ -3 ], expectedData,)


(1..7).each { number ->
def type = 'Bug'
def summary
	if (number == 1)
		summary = 'previousStatusNotToDo'
	else if(number == 2)
		summary = 'previousStatusMostRecentStatusMustBeInToDo'
	else if(number == 3)
		summary = 'previousStatusMustBeToDo'
	else if(number == 4)
		summary = 'previousStatuMustBeToDoIfConditionIsTrue'
	else if(number == 5)
		summary = 'previousStatusMostRecentStatusMustBeInToDo'
	else if (number == 6)
		summary = 'previousStatusMostRecentStatusOnlyMustBeInToDoOnlyIfTheGroovyConditionReturnsTrueForIssue'
	else if(number == 7)
		summary = 'previousStatusMostRecentStatusOnlyMustBeInToDoOnlyIfTheGroovyConditionReturnsTrueForIssue'

    gint.taskHelper.add(
        action: 'createIssue', ext: number,
        dependsOn: true,
        group: 'create',
        project: project,
        parameters: [
            type: type,
            summary: summary ,
        ],
        stopOnFail: true,
        finalClosure: { Task task ->
            saved.issue = gint.searchForIssueKey(task.outData)
            savedIssues[number] = saved.issue
            gint.helper.logVarWithFormat('saved')
            gint.helper.log('create issues',saved)
        },
    )
}

// Transition the issue to verify the error msg when issues previous status is not in selected status
(1..4).each { number ->
def data
	if(number == 1)
		data = 'Remote error: Transition is not authorized because current Issue has never been in status To Do before.' // Error when previous status not in To Do
	else if(number == 2)
		data = ~/Successfully transitioned issue ${project}-\d+ with transition 'In Progress'./ // Transition the isssue for issue to be in previous status
	else if(number == 3)
		data = ~/Successfully transitioned issue ${project}-\d+ with transition 'To Do'./  //Transition the issue for issue to be in previous status
	else if(number == 4)
		data = ~/Successfully transitioned issue ${project}-\d+ with transition 'previousStatusValidator1'./ //Should not display error when previous status is in To Do

def transitionToDo1
	if(number == 1)
		transitionToDo1 = 'previousStatusValidator0'
	else if(number === 2)
		transitionToDo1 = 'In Progress'
	else if(number === 3)
		transitionToDo1 = 'To Do'
	else if(number === 4)
		transitionToDo1 = 'previousStatusValidator0'

def expected
	if(number == 1)
		expected = [ -3 ]
	else if(number === 2)
		expected = [ 0 ]
	else if(number === 3)
		expected = [ 0 ]
	else if(number === 4)
		expected = [ 0 ]

    gint.taskHelper.add('transitionIssueAll', [
        [action: 'transitionIssue', ext: '--whenPreviousStatusOfIssueIsNotInSelectedStatus'+number,
        dependsOn: true,
            expected: expected,
            parameters: [
                issue: ~/${project}-1/ ,
                transition: transitionToDo1,
            ],
           data:[ data ],
         	finalClosure:{ Task task ->
         		gint.helper.log('Transition the issue to verify the error msg when issues previous status is not in selected status',saved)
         	},
        ],
    ])
}
// Transition the issue when Previous Status/Most RecentStatusMustBeInToDo
(1..6).each { number ->
def data
	if(number == 1)
		data = 'Remote error: Transition is not authorized because current Issue was not previously in status In Progress' // Error when previous status not in To Do
	else if(number == 2)
		data = ~/Successfully transitioned issue ${project}-\d+ with transition 'In Progress'./ // Transition the isssue for issue to be in previous status
	else if(number == 3)
		data = ~/Successfully transitioned issue ${project}-\d+ with transition 'To Do'./  //Transition the issue for issue to be in previous status
	else if(number == 4)
		data = ~/Successfully transitioned issue ${project}-\d+ with transition 'previousStatusValidator2'./ //Should not display error when previous status is in To Do
	else if(number == 5)
		data = ~/Successfully transitioned issue ${project}-\d+ with transition 'To Do'./
	else if(number == 6)
		data = 'Remote error: Transition is not authorized because current Issue was not previously in status In Progress' // Error when previous status not in To Do

def transitionToDo2
	if(number == 1)
		transitionToDo2 = 'previousStatusValidator2'
	else if(number === 2)
		transitionToDo2 = 'In Progress'
	else if(number === 3)
		transitionToDo2 = 'To Do'
	else if(number === 4)
		transitionToDo2 = 'previousStatusValidator2'
	else if(number === 5)
		transitionToDo2 = 'To Do'
	else if(number === 6)
		transitionToDo2 = 'previousStatusValidator2'

def expected
	if(number == 1)
		expected = [ -3 ]
	else if(number === 2)
		expected = [ 0 ]
	else if(number === 3)
		expected = [ 0 ]
	else if(number === 4)
		expected = [ 0 ]
	else if(number === 5)
		expected = [ 0 ]
	else if(number === 6)
		expected = [ -3 ]

    gint.taskHelper.add('transitionIssueAll', [
        [action: 'transitionIssue', ext: '--whenPreviousStatusMostRecentStatusOfIssueIsNotInSelectedStatus'+number,
        dependsOn: true,
            expected: expected,
            parameters: [
                issue: ~/${project}-2/ ,
                transition: transitionToDo2,
            ],
           data:[ data ],
         	finalClosure:{ Task task ->
         		gint.helper.log('Transition the issue to verify the error msg when issues previous status(most recent status only) is not in selected status',saved)
         	},
        ],
    ])
}
// Verify for the Custom error message when the issue's previous status is not in To Do
(1..4).each { number ->
def data
	if(number == 1)
		data = 'Remote error: previousStatuMustBeToDo' // Error when previous status not in To Do
	else if(number == 2)
		data = ~/Successfully transitioned issue ${project}-\d+ with transition 'In Progress'./ // Transition the isssue for issue to be in previous status
	else if(number == 3)
		data = ~/Successfully transitioned issue ${project}-\d+ with transition 'To Do'./  //Transition the issue for issue to be in previous status
	else if(number == 4)
		data = ~/Successfully transitioned issue ${project}-\d+ with transition 'previousStatusValidator3'./ //Should not display error when previous status is in To Do

def transitionToDo3
	if(number == 1)
		transitionToDo3 = 'previousStatusValidator3'
	else if(number === 2)
		transitionToDo3 = 'In Progress'
	else if(number === 3)
		transitionToDo3 = 'To Do'
	else if(number === 4)
		transitionToDo3 = 'previousStatusValidator3'

def expected
	if(number == 1)
		expected = [ -3 ]
	else if(number === 2)
		expected = [ 0 ]
	else if(number === 3)
		expected = [ 0 ]
	else if(number === 4)
		expected = [ 0 ]

    gint.taskHelper.add('transitionIssueAll', [
        [action: 'transitionIssue', ext: '--VerifyCustomErrorMessageByUser'+number,
        dependsOn: true,
            expected: expected,
            parameters: [
                issue: ~/${project}-3/ ,
                transition: transitionToDo3,
            ],
           data:[ data ],
         	finalClosure:{ Task task ->
         		gint.helper.log('Transition the issue to verify the error msg when issues previous status is not in selected status',saved)
         	},
        ],
    ])
}
// Validate that system should display error only if the groovy condition returns true for issue when the previous status of the issue not in To Do

(1..1).each { number ->
def transitionToDo4
	if(number == 1)
		transitionToDo4 = 'previousStatusValidator4'

def issue
	if(number == 1)
		issue = ~/${project}-4/

    gint.taskHelper.add('transitionIssueAll', [
        [action: 'run', ext: '--whenGroovyConditionReturnFalse'+number,
        dependsOn: true,
        expected:[ 0 ],
            parameters: [
				input:[
					/-a assignIssue --issue ${issue} --userId ${userqa1} /,
					/-a transitionIssue --issue ${issue} --transition ${transitionToDo4}/, // transition issue when groovy condition returns false
					],
				],
           	data:[
				~/${userqa1} has been assigned issue ${project}-\d+./,
				~/Successfully transitioned issue ${project}-\d+ with transition 'previousStatusValidator4'./ // Transition the isssue for issue to be in previous status
				],
         	finalClosure:{ Task task ->
         		gint.helper.log('Transition the issue to verify when groovy condition returns false and issues previous status is not in selected status',saved)
         	},
        ],
    ])
}
// Verify that system display the custom error message, if the previous status(Most recent status) of the issue is not in selected status
(1..6).each { number ->
def data
	if(number == 1)
		data = 'Remote error: previousStatusMostRecentStatusMustBeInProgress' // Error when previous status not in To Do
	else if(number == 2)
		data = ~/Successfully transitioned issue ${project}-\d+ with transition 'In Progress'./ // Transition the isssue for issue to be in previous status
	else if(number == 3)
		data = ~/Successfully transitioned issue ${project}-\d+ with transition 'To Do'./  //Transition the issue for issue to be in previous status
	else if(number == 4)
		data = ~/Successfully transitioned issue ${project}-\d+ with transition 'previousStatusValidator5'./ //Should not display error when previous status is in To Do
	else if(number == 5)
		data = ~/Successfully transitioned issue ${project}-\d+ with transition 'To Do'./
	else if(number == 6)
		data = 'Remote error: previousStatusMostRecentStatusMustBeInProgress' // Error when previous status not in To Do

def transitionToDo5
	if(number == 1)
		transitionToDo5 = 'previousStatusValidator5'
	else if(number === 2)
		transitionToDo5 = 'In Progress'
	else if(number === 3)
		transitionToDo5 = 'To Do'
	else if(number === 4)
		transitionToDo5 = 'previousStatusValidator5'
	else if(number === 5)
		transitionToDo5 = 'To Do'
	else if(number === 6)
		transitionToDo5 = 'previousStatusValidator5'

def expected
	if(number == 1)
		expected = [ -3 ]
	else if(number === 2)
		expected = [ 0 ]
	else if(number === 3)
		expected = [ 0 ]
	else if(number === 4)
		expected = [ 0 ]
	else if(number === 5)
		expected = [ 0 ]
	else if(number === 6)
		expected = [ -3 ]

    gint.taskHelper.add('transitionIssueAll', [
        [action: 'transitionIssue', ext: '--whenPreviousStatusMostRecentStatusVerifyCustomErrorMessage	'+number,
        dependsOn: true,
            expected: expected,
            parameters: [
                issue: ~/${project}-5/ ,
                transition: transitionToDo5,
            ],
           data:[ data ],
         	finalClosure:{ Task task ->
         		gint.helper.log('Transition the issue to verify the custom error msg when issues previous status(most recent status only) is not in selected status',saved)
         	},
        ],
    ])
}
// Validate that system should not display error if the groovy condition returns false for issue when the previous status of the issue not in To Do
(1..1).each { number ->
def transitionToDo6
	if(number == 1)
		transitionToDo6 = 'previousStatusValidator6'

def issue
	if(number == 1)
		issue = ~/${project}-6/

    gint.taskHelper.add('transitionIssueAll', [
        [action: 'run', ext: '--whenGroovyConditionReturnFalseAndMostRecentStatusNotInSelectedStatus'+number,
        dependsOn: true,
        expected:[ 0 ],
            parameters: [
				input:[
					/-a updateIssue --issue ${issue} --affectsVersions '1' /,
					/-a transitionIssue --issue ${issue} --transition ${transitionToDo6}/, // transition issue when groovy condition returns false
					],
				],
           	data:[
				~/Issue ${project}-\d+ updated../,
				~/Successfully transitioned issue ${project}-\d+ with transition 'previousStatusValidator6'./ // Transition the isssue for issue to be in previous status
				],
         	finalClosure:{ Task task ->
         		gint.helper.log('Transition the issue to verify when groovy condition returns false and issues previous status is not in selected status',saved)
         	},
        ],
    ])
}
// Validate that system should not display custom error msg if the groovy condition returns false for issue when the previous status of the issue not in To Do
(1..1).each { number ->
def transitionToDo7
	if(number == 1)
		transitionToDo7 = 'previousStatusValidator7'

def issue
	if(number == 1)
		issue = ~/${project}-7/

    gint.taskHelper.add('transitionIssueAll', [
        [action: 'run', ext: '--whenGroovyConditionReturnsFalseShouldNotDisplayCustomMsg'+number,
        dependsOn: true,
        expected:[ 0 ],
            parameters: [
				input:[
					/-a updateIssue --issue ${issue} --fixVersions '1' /,
					/-a transitionIssue --issue ${issue} --transition ${transitionToDo7}/, // transition issue when groovy condition returns false
					],
				],
           	data:[
				~/Issue ${project}-\d+ updated../,
				~/Successfully transitioned issue ${project}-\d+ with transition 'previousStatusValidator7'./ // Transition the isssue for issue to be in previous status
				],
         	finalClosure:{ Task task ->
         		gint.helper.log('Transition the issue to verify when groovy condition returns false and issues previous status is not in selected status',saved)
         	},
        ],
    ])
}
*/