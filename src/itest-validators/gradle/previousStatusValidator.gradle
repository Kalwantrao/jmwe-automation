buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.gint:gint-atlassian:3.8.4"
	}
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/utils.gradle'

tearDown()
addWorkflow()

def functionKey = functionKey.previousStatusvalidatorServer
def defaultFields = [
		"correlationId=",
		"errorMessage="
]
// Configuration for conditions
statusListServer.eachWithIndex { status, value, i ->
	def fields = defaultFields + "status=$value" + "conditionalValidation=no"
	addTransitionFunction('previousStatusShouldBe' + status, 'validator', fields, functionKey)
}
statusListServer.eachWithIndex { status, value, i ->
	def fields = defaultFields + "status=$value" +"mostRecentOnly=yes" + "conditionalValidation=no"
	addTransitionFunction('mostRecentOnly' + status, 'validator', fields, functionKey)
}
statusListServer.eachWithIndex { status, value, i ->
	def fields = defaultFields + "status=$value" + "conditionalValidation=yes" + "conditionalValidationScript=$groovyExpression.getIssuetype"
	addTransitionFunction('conditionalValidation'+status, 'validator', fields, functionKey)
}
statusListServer.eachWithIndex { status, value, i ->
	def fields = defaultFields + "status=$value" +"mostRecentOnly=yes" + "conditionalValidation=yes" + "conditionalValidationScript=$groovyExpression.getIssuetype"
	addTransitionFunction('mostRecentOnlyConditionalValidation' + status, 'validator', fields, functionKey)
}

createWorkflowScheme()
createProject()

def defaultIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'defaultIssue')

// checking the current status To Do and previous status In Progress
[
		'previousStatusShouldBe',
		'mostRecentOnly',
		'conditionalValidation',
		'mostRecentOnlyConditionalValidation',
].each {
	statusListServer.eachWithIndex { status, value, i ->
		gint.taskHelper.add([
				action    : 'transitionIssue', ext: " : previous status not in status_$status " + it,
				expected  : -3,
				parameters: [
						transition: it + status,
						issue     : { -> defaultIssue[] },
				],
		])
	}
}
gint.taskHelper.add(
		[action: 'updateIssue', ext: ': change issue type to story',
		 parameters: [
				 issue: {->defaultIssue[]},
				 issueType: 'Story',
			 ],
		],
)
[
'conditionalValidation',
'mostRecentOnlyConditionalValidation',
].each {
	statusListServer.eachWithIndex { status, value, i ->
		gint.taskHelper.add([
				action    : 'transitionIssue', ext: " : Conditional validation false status_$status " + it,
				expected  : 0,
				parameters: [
						transition: it + status,
						issue     : { -> defaultIssue[] },
				],
		])
	}
}
gint.taskHelper.add(
		[action: 'updateIssue', ext: ': change issue type to Task',
		 parameters: [
				 issue: {->defaultIssue[]},
				 issueType: 'Task',
		 ],
		],
)
[
		'previousStatusShouldBe',
		'mostRecentOnly',
		'conditionalValidation',
		'mostRecentOnlyConditionalValidation',
].each {
	statusListServer.eachWithIndex { status, value, i ->
		gint.taskHelper.add([
				[action    : 'transitionIssue', ext: " : To set previous status to_$status " + it +i,
				 parameters: [
						 transition: value,
						 issue     : { -> defaultIssue[] },
				 ]
				],
				[action    : 'transitionIssue', ext: " : return to  start status" + it+ i,
				 parameters: [
						 transition: 'To Do',
						 issue     : { -> defaultIssue[] },
				 ]
				],
				[action    : 'transitionIssue', ext: " : previous status of issue is_$status " + it +i,
				 expected  : 0,
				 parameters: [
						 transition: it + status,
						 issue     : { -> defaultIssue[] },
				 ]
				],
		])
	}
}
