import groovy.json.JsonSlurper
import java.nio.file.Paths

buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "org.gint:gint-atlassian:3.8.4"
	}
}

apply plugin: 'org.gint.atlassian'
//apply from: 'common/setUp.gradle'
apply from: gint.resourceDirectory +'/src/common/testValidators.gradle'

def info = gint.getJiraHelper().getServerInfoWithVerify() // Verify access to Jira instance otherwise end test if server not available
def project = 'AUTOMATION'//gint.getJiraHelper().getProjectKey()	//get project key using jira helper functions
def workflow = project
def screen = project
gint.xmlReport =	true	//xml report generates in projects root directory
gint.verbose =	true
def user = info.user

def transition = 'previousStatusValidator'
def jsonSlurper = new JsonSlurper();
def path = Paths.get(gint.directories.resource + "/resources/validatorsData/PreviousStatusValidatorFunctions.json")
def transitionFunctions = jsonSlurper.parse(path)
def functionKey = 'com.innovalog.jmwe.jira-misc-workflow-extensions:previousstatus-validator'
def startStep = info?.isCloud ? '1':'11' // depends on workflow. '1' for cloud and '11' (To Do)for server works for custom jira workflow

createTransitionsWithFunctions(transitionFunctions, transition, functionKey, 'validator', startStep, workflow, screen, 0)

// check the previous status of the issue
def issue1 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'createParentIssue')
transitionIssue(transition+0, {-> issue1[0]}, -3, 'transitionWhenPreviousStatuNotInSelectedStatus', null, ["Remote error: Transition is not authorized because current Issue has never been in status To Do before."])


def issue2 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'createParentIssue1')
transitionToStatus({-> issue2[0]}, "In Progress", "To Do", 'setPreviousStatusOfIssueInSelected1')
transitionIssue(transition+0, {-> issue2[0]}, 0, 'checkWhenIssuesPreviousStatusInSelected', null, null)

//check mostRecentStatusOnly
def checkMostRecentStatus = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'checkMostRecentStatus')
transitionToStatus({-> checkMostRecentStatus[0]}, "In Progress", "To Do", 'setMostRecentStatus1')
transitionIssue(transition+4, {-> checkMostRecentStatus[0]}, 0, 'checkMostRecentStatusInSelectedStatus', null, null)

def mostRecentStatus = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'checkMostRecentStatus1')
transitionToStatus({-> mostRecentStatus[0]}, "To Do", "To Do", 'setMostRecentStatus2')
transitionIssue(transition+4, {-> mostRecentStatus[0]}, -3, 'checkMostRecentStatusNotInSelectedStatus', null, ["Remote error: previousStatusMostRecentStatusMustBeInProgress"])

// check conditional execution true
def issue4 = createIssue(project,{[ type: 'Story', summary: 'JMWE_Issue']}, 'createParentForConditionalExecutionTrue')
transitionIssue(transition+5, {-> issue4[0]}, -3, 'transitionToCheckConditionalExecTrue', null, ["Remote error: Transition is not authorized because current Issue has never been in status To Do before."])

def issue5 = createIssue(project,{[ type: 'Story', summary: 'JMWE_Issue']}, 'createParentForConditionalExecutionTrue1')
transitionToStatus({-> issue5[0]}, "In Progress", "To Do", 'setPreviousStatusOfIssueInSelected2')
transitionIssue(transition+5, {-> issue5[0]}, 0, 'transitionToCheckConditionalExecTruePreviousStatusInSelected', null, null)

// check conditional execution false
def issue6 = createIssue(project,{[ type: 'Task', summary: 'JMWE_Issue']}, 'createParentForConditionalExecutionFalse')
transitionIssue(transition+5, {-> issue6[0]}, 0, 'transitionToCheckConditionalExecFalse', null, null)


