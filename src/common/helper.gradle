ext.getStatusId = { status ->
    def statusId = [] as LinkedList
    gint.taskHelper.addTearDown(
            action: "getStatusList",
            mustRunBefore:"addTransitionFunction",
            ext: ":To get id of status_ $status",
            sleep: 3000,
            parameters:[
                    outputType: "Text",
                    columns: "id",
                    select: "name:$status"
            ],
            finalClosure:{ Task task ->
                def outPut = task.outData;
                statusId.add(outPut[2]);
                gint.helper.log(status + " id is", statusId.getAt(0));
            }
    )
    return statusId;
}

ext.getIssueTypeId = { issueType ->
    def issueTypeId = [] as LinkedList;
    gint.taskHelper.addTearDown(
            action: "getIssueTypeList",
            mustRunBefore:"addTransitionFunction",
            ext: ":To get id of issue type_ $issueType",
            sleep: 3000,
            parameters:[
                    outputType: "Text",
                    columns: "id",
                    select: "name:$issueType"
            ],
            finalClosure:{ Task task ->
                def outPut = task.outData
                issueTypeId.add(outPut[2])
                gint.helper.log(issueType + " id is", issueTypeId.getAt(0))
            }
    )
    return issueTypeId
}

ext.getCustomFieldId = { customFieldName ->
    def customFieldId = [] as LinkedList;
    gint.taskHelper.addTearDown(
            action: "getCustomFieldList",
            mustRunBefore:"addTransitionFunction",
            ext: ":To get id of custom field_ $customFieldName",
            sleep: 3000,
            parameters:[
                    outputType: "Text",
                    columns: "id",
                    select: "name:$customFieldName"
            ],
            finalClosure:{ Task task ->
                def outPut = task.outData
                customFieldId.add(outPut[2])
                gint.helper.log(customFieldName + " id is", customFieldId.getAt(0))
            }
    )
    return customFieldId
}

ext.getProjectRoleId = { role ->
    def projectRoleId = [] as LinkedList
    gint.taskHelper.addTearDown(
            action: "getProjectRoleList",
            mustRunBefore:"addTransitionFunction",
            ext: ":To get id of projectRole_ $role",
            sleep: 3000,
            parameters:[
                    outputType: "Text",
                    columns: "id",
                    select: "name:$role"
            ],
            finalClosure:{ Task task ->
                def outPut = task.outData;
                projectRoleId.add(outPut[2]);
                gint.helper.log(role + " id is", projectRoleId.getAt(0));
            }
    )
    return projectRoleId;
}

ext.getGroupId = { group, regex ->
    def groupId = [] as LinkedList
    gint.taskHelper.addTearDown(
            action: "getGroupList",
            mustRunBefore:"addTransitionFunction",
            ext: ":To get id of group_ $group",
            sleep: 3000,
            parameters:[
                    outputType: "Text",
                    columns: "id",
                    regex: regex
            ],
            finalClosure:{ Task task ->
                def outPut = task.outData;
                groupId.add(outPut[2]);
                gint.helper.log(group + " id is", groupId.getAt(0));
            }
    )
    return groupId;
}

ext.getSecurityLevelId = { level, project ->
    def securityLevelId = [] as LinkedList
    gint.taskHelper.addTearDown(
            action: "getSecurityLevelList",
            mustRunBefore:"addTransitionFunction",
            ext: ":To get id of security level_ $level",
            sleep: 3000,
            parameters:[
                    outputType: "Text",
                    columns: "id",
                    project: project,
                    select: "name:$level"
            ],
            finalClosure:{ Task task ->
                def outPut = task.outData;
                securityLevelId.add(outPut[2]);
                gint.helper.log(level + " id is", securityLevelId.getAt(0));
            }
    )
    return securityLevelId;
}

ext.getIssueSecuritySchemeId = {
    def securityLevelId = [] as LinkedList
    gint.taskHelper.addTearDown(
            action: "getIssueSecuritySchemeList",
            mustRunBefore:"addTransitionFunction",
            ext: ":To get id of security scheme $screen",
            sleep: 3000,
            parameters:[
                    outputType: "Text",
                    columns: "id",
                    select: "name:$screen"
            ],
            finalClosure:{ Task task ->
                def outPut = task.outData;
                securityLevelId.add(outPut[2]);
                gint.helper.log("security scheme " + screen + " id is", securityLevelId.getAt(0));
            }
    )
    return securityLevelId;
}

ext.getUserId = { userName ->
    def getUserList = [] as LinkedList
    gint.taskHelper.addTearDown(
            action: "getUserList",
            mustRunBefore:"addTransitionFunction",
            ext: ":To get id of user_ $userName",
            sleep: 3000,
            parameters:[
                    outputType: "Text",
                    columns: "Key",
                    name: userName,
                    select: "User:$userName"
            ],
            finalClosure:{ Task task ->
                def outPut = task.outData;
                getUserList.add(outPut[2]);
                gint.helper.log("user id for" + userName , getUserList.getAt(0));
            }
    )
    return getUserList;
}

ext.getComponentId = { component ->
    def getComponentId = [] as LinkedList
    gint.taskHelper.addTearDown(
            action: "getComponentList",
            mustRunBefore:"addTransitionFunction",
            ext: ":To get id of component_ $component",
            sleep: 3000,
            parameters:[
                    outputType: "Text",
                    columns: "id",
                    project: TestProject,
                    select: "name:$component"
            ],
            finalClosure:{ Task task ->
                def outPut = task.outData;
                getComponentId.add(outPut[2]);
                gint.helper.log("saved id", getComponentId.getAt(0));
            }
    )
    return getComponentId;
}

ext.getComponentId = { component ->
    def getComponentId = [] as LinkedList
    gint.taskHelper.addTearDown(
            action: "getComponentList",
            mustRunBefore:"addTransitionFunction",
            ext: ":To get id of component_ $component",
            sleep: 3000,
            parameters:[
                    outputType: "Text",
                    columns: "id",
                    project: TestProject,
                    select: "name:$component"
            ],
            finalClosure:{ Task task ->
                def outPut = task.outData;
                getComponentId.add(outPut[2]);
                gint.helper.log("saved id", getComponentId.getAt(0));
            }
    )
    return getComponentId;
}

