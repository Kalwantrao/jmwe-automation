apply from: gint.resourceDirectory +'/src/common/commonTasks.gradle'
apply from: gint.resourceDirectory +'/src/common/helper.gradle'

project.ext.info =  gint.getJiraHelper().getServerInfoWithVerify()
project.ext.user =  info.user
project.ext.url = info.url
project.ext.projectKey = gint.getJiraHelper().getProjectKey()
project.ext.isServer = info?.isServer
project.ext.isCloud = info?.isCloud
project.ext.currentUserKey=info.userKey
project.ext.workflow = projectKey
project.ext.startStepCloud=11
project.ext.startStepServer=11
project.ext.workflowFile="resources/workflowJ8.xml"
project.ext.tearDownFile="resources/tearDown.txt"
project.ext.baseWorkflow="Software Simplified Workflow for Project $TestProject"
project.ext.getCurrentUserName = info?.isCloud? info?.userDisplayName : user
project.ext.defaultSleepTime = info?.isCloud ? 8000 : 0
project.ext.sleep = info?.isCloud ? 8000 : 0
project.ext.returnsReporter = "issue.reporter.accountId == '$currentUserKey'"
project.ext.returnsLinkedIssues = "issue.getLinkedIssues()"
project.ext.testUser = info?.isCloud ? testUserForCloud : "jmwe_qa"
project.ext.testCloudBuild=null
project.ext.addonName = null

if(buildType == 'testing'){
    testCloudBuild = 'mwec'
    addonName='MiscC'
}else {
    testCloudBuild = 'jmwe.jira-misc-workflow-extensions'
    addonName= 'Jira Misc Workflow Extensions'
}

project.ext.fields = [
        Labels:'labels',
        Components:'components',
        Assignee:'assignee',
        AffectsVersions:'versions',
        FixVersions:'fixVersions',
        Priority: 'priority',
]

project.ext.statusList = [
        inProgress: "In Progress",
        inReview: "In Review",
        done: "Done"
]

ext.TEST_USER_ID = getUserId(testUser)
ext.testUserId = {->TEST_USER_ID.getAt(0).trim()}

ext.JIRA_ADMIN_PROJECT_ROLE_ID = getProjectRoleId("Administrators")
project.ext.jiraAdminRoleId = {->JIRA_ADMIN_PROJECT_ROLE_ID.getAt(0).trim()}

ext.JIRA_TEST_PROJECT_ROLE_ID = getProjectRoleId("testprojectrole")
project.ext.testProjectRoleId = {->JIRA_TEST_PROJECT_ROLE_ID.getAt(0).trim()}

project.ext.groovyExpression = [
        getIssuetype: "issue.get('issuetype')?.name == 'Task'",
        checkPriorityHigh: "issue.get('priority')?.name == 'High'",
        checkPriorityLow: "issue.get('priority')?.name == 'Low'",
        returnsReporter : "issue.get('reporter') == '$currentUserKey'",
        getDescription : "issue.get('description')",
        getEntityValue : "currentUser.getEntityProperty('Name')",
        getUserProperty: "currentUser.getUserProperty('Name')",
        checkIssueEntity: "issue.getEntityProperty('Labels')"
]

project.ext.nunjuckExpression = [
        returnsLinkedIssues: "{{ issue | linkedIssues | field('key') }}",
        getIssuetype: "{{ issue.fields.issuetype.name == 'Task' }}",
        checkPriorityHigh: "{{ issue.fields.priority.name == 'High' }}",
        checkPriorityLow: "{{ issue.fields.priority.name == 'Low' }}",
        returnsReporter : "{{issue.reporter.accountId == '$currentUserKey'}}",
        thisUser : "accountId:$currentUserKey"
]

project.ext.jiraExpression = [
        getIssueType : "!!issue.issueType && issue.issueType.name == 'Task'",
        checkPriorityHigh: "!!issue.priority && issue.priority.name == 'High'"
]

project.ext.fields = [
        Labels:'labels',
        Components:'components',
        Assignee:'assignee',
        AffectsVersions:'versions',
        FixVersions:'fixVersions',
        Priority: 'priority',
]

project.ext.relatedIssue = [
        currentIssue: info?.isCloud ? "currentIssue:*" : "$currentIssue",
        subtask: info?.isCloud ? "outward:jira_subtask_link" : "$subtask",
        parentIssue: info?.isCloud ? "inward:jira_subtask_link" : "$parentIssue",
        issueBelongsToEpic: info?.isCloud ? "outward:Epic-Story Link" : "$issueBelongsToEpic",
        epicOfTheCurrentIssue: info?.isCloud ? "inward:Epic-Story Link" : "$epicOfTheCurrentIssue",
        childPortfolio: info?.isCloud ? "inward:Portfolio Parent Link" : "$childPortfolio",
        parentPortfolio: info?.isCloud ? "outward:Portfolio Parent Link" : "$parentPortfolio",
        linkByAnyLink: info?.isCloud ? "*:*" : "$linkByAnyLink",
        linkByBlock: info?.isCloud ? "outward:10000" : "$linkByBlock",
        linkByisBlockedBy: info?.isCloud ? "inward:10000" : "$linkByisBlockedBy",
        linkByClones: info?.isCloud ? "outward:10001" : "$linkByClones",
        linkByIsClonedBy: info?.isCloud ? "inward:10001" : "$linkByIsClonedBy",
        linkByDuplicates: info?.isCloud ? "outward:10002" : "$linkByDuplicates",
        linkByIsDuplicatedBy: info?.isCloud ? "inward:10002" : "$linkByIsDuplicatedBy",
        linkByRelatesTo: info?.isCloud ? "outward:10003" : "$linkByRelatesTo",
]

relatedIssue.put(info?.isCloud? 'returnsByNunjucksExpression': 'returnsByGroovyExpression', info?.isCloud ? "nunjucks:$nunjuckExpression.returnsLinkedIssues" : "groovy:$returnsLinkedIssues")

project.ext.conditionalExecution = [
        false : info?.isCloud ? /"conditionalExecution":false/ : [ "useGroovyCondition=false", "groovyExpression=" ],
        true : info?.isCloud ? /"conditionalExecution":true,"conditionalExecutionScript":"$nunjuckExpression.checkPriorityHigh"/ : [ "useGroovyCondition=yes", "groovyExpression=$groovyExpression.checkPriorityHigh" ]
]

project.ext.conditionalValidationServer = [
        no : [ "conditionalValidation=no", "conditionalValidationScript=" ],
        yes : [ "conditionalValidation=yes", "conditionalValidationScript=$groovyExpression.checkPriorityHigh" ]
]

project.ext.conditionalValidationCloud = [
        no : /"conditionalValidation":false/,
        yes : /"conditionalValidation":true,"conditionalValidationExpression":"!!issue.priority && issue.priority.name == 'High'"/
]

project.ext.conditionalValidation = info?.isCloud? conditionalValidationCloud : conditionalValidationServer

project.ext.runAsUser = [
        currentUser : info?.isCloud ? /"runAsType":"addonUser"/ : "runAsUser=",
        specificUser: info?.isCloud ? /"runAsType":"thisUser","runAs":"accountId:$currentUserKey"/ : "runAsUser=userByKey:$currentUserKey",
        userInFieldAssignee : info?.isCloud ? /"runAsType":"userField","runAsField":"assignee"/ : "runAsUser=userField:assignee",
        userInFieldReporter : info?.isCloud ? /"runAsType":"userField","runAsField":"reporter"/ : "runAsUser=userField:reporter",
        userInFieldCreator : info?.isCloud ? /"runAsType":"userField","runAsField":"creator"/ : "runAsUser=userField:creator",
        userFromScript : info?.isCloud ? /"runAsType":"userFromScript","runAsScript":"$nunjuckExpression.thisUser"/ : "runAsUser=userFromScript:currentUser"
]


