apply from: gint.resourceDirectory +'/src/common/commonTasks.gradle'

project.ext.info =  gint.getJiraHelper().getServerInfoWithVerify()
project.ext.user = info?.isCloud ? info?.userDisplayName : info.user
project.ext.projectKey = gint.getJiraHelper().getProjectKey()
project.ext.isServer = info?.isServer
project.ext.isCloud = info?.isCloud
project.ext.workflowScheme = "AUTOMATION"
project.ext.screen = "AUTOMATION"
project.ext.workflow = projectKey
project.ext.startStepCloud=11
project.ext.startStepServer=11
project.ext.workflowFile="resources/workflowJ8.xml"
project.ext.tearDownFile="resources/tearDown.txt"
project.ext.baseWorkflow="Software Simplified Workflow for Project $TestProject"
project.ext.projectTemplateCloud="Bug tracking"
project.ext.projectTemplateServer="Basic software development"

project.ext.groovyExpression = [
        getIssuetype:"issue.get('issuetype')?.name == 'Task'",
        checkPriorityHigh: "issue.get('priority')?.name == 'High'",
        checkPriorityLow: "issue.get('priority')?.name == 'Low'",
        returnsReporter : "issue.get('reporter')",
        getDescription : "issue.get('description')",
        getEntityValue : "currentUser.getEntityProperty('Name')",
        getUserProperty: "currentUser.getUserProperty('Name')",
        checkIssueEntity: "issue.getEntityProperty('Labels')"
]
project.ext.nunjuckExpression = [
        returnsLinkedIssues: "{{ issue | linkedIssues | field('key') }}",
        getIssuetype: "{{ issue.fields.issuetype.name == 'Task' }}",
        checkPriorityHigh: "{{ issue.fields.priority.name == 'High' }}",
        checkPriorityLow: "{{ issue.fields.priority.name == 'Low' }}",
        returnsReporter : "{{ issue.fields.reporter }}"
]

project.ext.jiraExpression = [
        getIssueType : "!!issue.issueType && issue.issueType.name == 'Task'"
]

project.ext.securityLevelId = [
        lavel1 : securityLevel1Id ,
        level2 :  securityLevel2Id
]

project.ext.fields = [
        Labels:'labels',
        Components:'components',
        Assignee:'assignee',
        AffectsVersions:'versions',
        FixVersions:'fixVersions',
        Priority: 'priority',
]

project.ext.relatedIssueServer = [
        currentIssue: "$currentIssue",
        subtask: "$subtask",
        parentIssue: "$parentIssue",
        issueBelongsToEpic: "$issueBelongsToEpic",
        epicOfTheCurrentIssue: "$epicOfTheCurrentIssue",
        childPortfolio: "$childPortfolio",
        parentPortfolio: "$parentPortfolio",
        linkByAnyLink: "$linkByAnyLink",
        linkByBlock: "$linkByBlock",
        linkByisBlockedBy: "$linkByisBlockedBy",
        linkByClones: "$linkByClones",
        linkByIsClonedBy: "$linkByIsClonedBy",
        linkByDuplicates: "$linkByDuplicates",
        linkByIsDuplicatedBy: "$linkByIsDuplicatedBy",
        linkByRelatesTo: "$linkByRelatesTo",
        returnsByGroovyExpression: "groovy:$returnsLinkedIssues",
        returnsFromJqlSearch: "jql:$jqlSearchExpression"
]

project.ext.relatedIssueCloud = [
        currentIssue: "currentIssue:*",
        subtask: "outward:jira_subtask_link",
        parentIssue: "inward:jira_subtask_link",
        issueBelongsToEpic: "outward:Epic-Story Link",
        epicOfTheCurrentIssue: "inward:Epic-Story Link",
        childPortfolio: "inward:Portfolio Parent Link",
        parentPortfolio: "outward:Portfolio Parent Link",
        linkByAnyLink: "*:*",
        linkByBlock: "outward:10000",
        linkByisBlockedBy: "inward:10000",
        linkByClones: "outward:10001",
        linkByIsClonedBy: "inward:10001",
        linkByDuplicates: "outward:10002",
        linkByIsDuplicatedBy: "inward:10002",
        linkByRelatesTo: "outward:10003",
        returnsByNunjucksExpression: "nunjucks:$nunjuckExpression.returnsLinkedIssues",
        returnsFromJqlSearch: "jql:$jqlSearchExpression"
]

project.ext.statusIds = [ // statusIds.inProgress
        toDo: ToDo,
        inProgress: InProgress,
        inReview : InReview,
        done : Done
]

project.ext.issueTypeServer = [
        bug : BugIssueType,
        task : TaskIssueType,
        subtask  : SubtaskIssueType,
        epic : EpicIssueType,
        story : StoryIssueType, //10001 FOR JIRA9
        initiative : InitiativeIssueType
]

project.ext.issueTypeCloud = [
        subtask : 10008,
        epic : 10000,
        story : 10011,
        task : 10007,
        bug : 10010,
        initiative : 10020
]

project.ext.customFields = [
        storyPoints : storyPointFieldId,
        originalStoryPoints : originalStoryPointsFieldId
]

project.ext.conditionalValidation = [
        no : [ "conditionalValidation=no", "conditionalValidationScript=" ],
        yes : [ "conditionalValidation=yes", "conditionalValidationScript=$groovyExpression.checkPriorityHigh" ]
]

project.ext.runAsUser = [
        currentUser : "runAsUser=",
        specificUser: "runAsUser=userByKey:$jmwe_qaUserId",
        userInFieldAssignee : "runAsUser=userField:assignee",
        userInFieldReporter : "runAsUser=userField:reporter",
        userInFieldCreator : "runAsUser=userField:creator",
        userFromScript : "runAsUser=userFromScript:$groovyExpression.returnsReporter"
]

project.ext.conditionalExecution = [
        false : [ "useGroovyCondition=false", "groovyExpression=" ],
        true : [ "useGroovyCondition=yes", "groovyExpression=$groovyExpression.checkPriorityHigh" ]
]

project.ext.statusList = [
        inProgress: "In Progress",
        inReview: "In Review",
        done: "Done"
]

project.ext.defaultFieldsCloud= [
        "postFunction.id=18b36491-f556-48cd-b476-7b82f02c7249",
        "condition.id=d150ebe9-f65f-4199-ade5-c38062e8d5b9",
        "validator.id=ba2aae99-13c1-422b-933c-1c16e0739d3a",
]

project.ext.defaultFieldsServer = [
        "restrictToInternal=no",
        "sendNotification=no",
        "throwExceptions=",
        "correlationId=",
]

project.ext.issueType = info?.isCloud ? issueTypeCloud : issueTypeServer
project.ext.defaultFields = info?.isCloud ? defaultFieldsCloud : defaultFieldsServer
project.ext.relatedIssue = info?.isCloud ? relatedIssueCloud : relatedIssueServer


project.ext.whichUser = [
        currentUser : ["fromUserType=currentUser"],
        userInFieldAssignee : [ "fromUserType=userInField", "userField=assignee" ],
        userInFieldReporter : [  "fromUserType=userInField", "userField=reporter"],
        userInFieldCreator : [  "fromUserType=userInField", "userField=creator"],
]

project.ext.userMode = [
        allUsers : [ "conditionMode=all-user-condition" ],
        atLeastOne : [ "conditionMode=any-user-condition" ],
]

project.ext.fieldEmpty = [
        no : [ "fieldEmpty=no" ],
        yes : [ "fieldEmpty=yes" ],
]

project.ext.userCriteria = [
        reporter : "isReporter=yes",
        assignee : "isAssignee=yes",
        inFieldLabels : "userFieldsToCheck=labels",
        returnFromScript : /usersConditionScript=issue.get('reporter')?.name == "$user"/,
        projectLead : "isProjectLead=yes",
        inAdminRole : "rolesToCheck=$jiraAdminRoleId",
        inAdminGroup : "groupsToCheck=jira-administrators",
        inTestGroup : "groupsToCheck=$testGroup",
        watcher : "isWatcher=yes",
        checkUser : "usersToCheck=$currentUserKey",
]

project.ext.reverse = [
        no : [ "reverse=" ],
        yes : [ "reverse=yes" ]
]

project.ext.issueConstraints = [
        atLeastOne : [  "minLinkedIssues=1","maxLinkedIssues=" ],
        minTwo : [ "minLinkedIssues=2", "maxLinkedIssues=" ],
        maxTwo : [ "minLinkedIssues=", "maxLinkedIssues=2" ],
        atLeastThreeAndAtMostSix : [ "minLinkedIssues=3", "maxLinkedIssues=6" ]
]

project.ext.verifyAllLinkedIssues = [
        yes : [	"checkAllLinkedIssues=yes" ],
        no : [ "checkAllLinkedIssues=no" ]
]

project.ext.issueType = [
        any : [ "selectedIssueType=" ],
        story : [ "selectedIssueType=$StoryIssueType" ],
        task : [ "selectedIssueType=$TaskIssueType" ],
        bug : [ "selectedIssueType=$BugIssueType" ],
        initiative: [ "selectedIssueType=$InitiativeIssueType" ]
]
project.ext.linkedIssuesStatusMode = [
        all : [ "conditionMode=all-in-status" ],
        one : ["conditionMode=one-in-status"],
        none : ["conditionMode=none-in-status"],
        oneNot : ["conditionMode=one-not-in-status"]
]

project.ext.statuses = [
        inProgress : ["issue_statuses=$InProgress" ],
        toDo : [ "issue_statuses=$ToDo" ],
        inReview : [ "issue_statuses=$InReview" ],
        done : [ "issue_statuses=$Done" ]
]

project.ext.functionKey = [
        sharedConditionServer: 'com.innovalog.jmwe.jira-misc-workflow-extensions:shared-condition',
        transitionIssuePostfunctionServer: 'com.innovalog.jmwe.jira-misc-workflow-extensions:TransitionIssue-function',
        transitionIssuePostfunctionCloud:'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__TransitionIssueFunction',
        transitionRelatedIssuesPostfunctionCloud:'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__TransitionLinkedIssuesFunction',
        transitionRelatedIssuesPostfunctionServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:TransitionLinkedIssues-function',
        transitionParentIssuePostfunctionServer: 'com.innovalog.jmwe.jira-misc-workflow-extensions:TransitionParentIssue-function',
        transitionParentIssuePostfunctionCloud:'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__TransitionParentIssueFunction',
        clearFieldsCloud:'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__ClearFieldsFunction',
        clearFieldsServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:ClearFieldValue-function',
        assignToRoleMemberCloud:'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__AssignToRoleMemberFunction',
        assignToRoleMemberServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:assigntorolemember',
        returnToPreviousStatusServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:return-to-previous-status-function',
        addFieldValueToParentIssuePfServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:AddFieldValueToParent-function',
        assignIssuePostfunctionServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:AssignIssue-function',
        transitionParentIssuePfServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:TransitionParentIssue-function',
        transitionRelatedIssuePfServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:TransitionParentIssue-function',
        setFieldValueOfRelatedIssuesPfServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:SetFieldValueOfLinkedIssues-function',
        setFieldValuePfServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:SetFieldValue-function',
        parentStatusValidatorServer : 'com.innovalog.jmwe.jira-misc-workflow-extensions:parentstatus-validator',
        previousStatusvalidatorServer : 'com.innovalog.jmwe.jira-misc-workflow-extensions:previousstatus-validator',
        setIssueFieldsPfServer : 'com.innovalog.jmwe.jira-misc-workflow-extensions:set-issue-fields-function',
        commentIssuePostfunctionServer : 'com.innovalog.jmwe.jira-misc-workflow-extensions:commentIssue-function',
        commentIssuePostfunctionCloud : 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__CommentIssueFunction',
        copyIssueFieldsPfServer : 'com.innovalog.jmwe.jira-misc-workflow-extensions:copy-fields-function',
        assignToRoleMemberPf : 'com.innovalog.jmwe.jira-misc-workflow-extensions:assigntorolemember',
        createIssuePostfunctionServer : 'com.innovalog.jmwe.jira-misc-workflow-extensions:CreateIssue-function',
        createIssuePostfunctionCloud : 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__CreateIssueFunction',
        copyFieldValueFromParentIssuePostfunctionServer : 'com.innovalog.jmwe.jira-misc-workflow-extensions:CopyFieldValueFromParent-function',
        copyFieldValueToParentIssuePostfunctionServer : 'com.innovalog.jmwe.jira-misc-workflow-extensions:CopyFieldValueToParent-function',
        copyFieldValueFromRelatedIssuesPostfunctionServer : 'com.innovalog.jmwe.jira-misc-workflow-extensions:CopyFieldValueFromLinkedIssue-function',
        copyFieldValueToRelatedIssuesPostfunctionServer : 'com.innovalog.jmwe.jira-misc-workflow-extensions:CopyFieldValueToLinkedIssues-function',
]



