apply from: gint.resourceDirectory +'/src/common/commonTasks.gradle'

ext.createIssue = { parameters, ext ->
    def savedIssues = [:]
    gint.taskHelper.addSetUp([
            [action: 'createIssue',
             ext: ext ,
             mustRunAfter: 'createProject',
             project: projectName,
             parameters: parameters,
             finalClosure: { Task task ->
                 def currentIssue = gint.searchForIssueKey(task.outData)
                 savedIssues[] = currentIssue
                 gint.helper.log("Issue created ", savedIssues[]);
             },
            ],
    ]
    )
    return savedIssues
}
ext.linkIssue = { parameters, ext ->
    gint.taskHelper.addSetUp([
            [action: 'linkIssue',
             ext: ext,
             parameters: parameters
            ]
    ]
    )
}
ext.updateIssue = { parameters, ext ->
    gint.taskHelper.add(
            action: 'updateIssue',
            ext: ': '+ext,
            parameters: parameters,
    )
}
ext.transitionIssue = { transition, issue, expected, addfield, ext ->
    gint.taskHelper.add([
            [action    : 'transitionIssue', ext: ': '+ext,
             expected  : expected,
             parameters: [
                     issue     : issue,
                     transition: transition
             ] + (addfield != null ? addfield : [:]),
            ],
    ]
    )
}
ext.getFieldValue = { issue, field, data, ext ->
    gint.taskHelper.add(
             [action: 'getFieldValue',
             ext: ': '+ext,
             parameters: [
                     issue: issue,
                     field: field
             ],
             data: [data],
             finalClosure: { Task task ->
                 if(!task.outData){
                     gint.helper.log("expected value of field $data but got", task.outData)
                 }
                 else {
                     gint.helper.log("found expected field value", data)
                 }
                 assert task.found == true
             }
            ]
    )
}
ext.jqlSearch = { jql, field, number, issueType, ext ->
    gint.taskHelper.add([
            [action: 'getIssueList', ext: ': '+ext,
             parameters: [
                     jql: jql
             ],
             data: [ "$number issues in list",
                     "$field","$issueType"
             ],
             finalClosure: { Task task ->
                 assert task.found == true
                 gint.helper.log("Issues found for the given search: $number", ext)
             }
            ]
    ]
    )
}

ext.getIssueHistory = { issue, userId, ext ->
    gint.taskHelper.add('getIssueHistoryList',[
            [action: 'getIssueHistoryList', ext: ': '+ext,
             parameters: [
                     issue: issue,
             ],
             data: [ "$userId" ]
            ]
    ])
}

ext.getLinkedIssueList = {currentIssue, numberOfLinkedIssues, ext, linkType, link ->
    gint.taskHelper.add('getLinkIssues',[
            [action: 'getLinkList', ext: ': '+ext,
             parameters: [
                     issue: currentIssue,
             ],
             data: [/$numberOfLinkedIssues links for issue: $currentIssue/,
                    "$currentIssue","$linkType","$link"],
             finalClosure: { Task task ->
                 assert task.found == true
                 gint.helper.log("Check $numberOfLinkedIssues in issue $currentIssue", ext)
             }
            ]
    ]
    )
}

ext.getComments = { issue, user, ext ->
    gint.taskHelper.add(
            [action: 'getComments', ext: ': '+ext,
             parameters: [
                     issue: issue,
             ],
             data: [~/$user added a comment/],
             finalClosure: { Task task ->
                 assert task.found == true
                 gint.helper.log("Comment found: ", user)
                 }
            ],
    )
}
ext.transitionIssueByOtherUser = {transition, issue, userId, ext ->
    gint.taskHelper.add('checkRunAsUser', [
            [name:"transition issue by user : $userId:"+ext,
             cmd : /acli $userId -a transitionIsue --issue $issue --transition $transition/,]
    ],
    )
}
ext.checkIssueHistoryByOtherUser = {transition, issue, userId, ext ->
    gint.taskHelper.add(
            [name: "History check by user $userId", ext: ': ' + ext , cmd: /acli ${userId} getIssueHistoryList --issue ${issue} /,
             data:["$userId"],
            ],
    )
}
ext.getCommentByOtherUser = { issue, userId, user, ext->
    gint.taskHelper.add(
            [name: "Comment Visible To User: $user", ext: ': '+ext, cmd : /acli $userId -a getComments --issue $issue /,
             failData: [~/$user added a comment/],
             finalClosure: {Task task ->
                 assert task.found == true
                 gint.helper.log("Comment visible to", userId)
             }
            ]
    )
}