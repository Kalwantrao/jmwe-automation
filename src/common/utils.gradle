apply from: gint.resourceDirectory +'/src/common/commonTasks.gradle'

project.ext.info =  gint.getJiraHelper().getServerInfoWithVerify()
project.ext.user = info?.isCloud ? info?.userDisplayName : info.user
project.ext.projectKey = gint.getJiraHelper().getProjectKey()
project.ext.isServer = info?.isServer
project.ext.isCloud = info?.isCloud
project.ext.projectName="AUTOMATION"
project.ext.workflow = projectKey
project.ext.screen="AUTOMATION"
project.ext.workflowScheme="AUTOMATION"
project.ext.cloudUserId='63973398ff36874b23af74a6'
project.ext.cloudUser="jmwe_qa"
project.ext.serverUser="jmwe_qa"
project.ext.testUser = info?.isCloud ? cloudUser : serverUser
project.ext.projectRole="testprojectrole"
project.ext.groupName="testgroup"
project.ext.groupAdminIdCloud = "e7f578b8-2111-40ff-8117-323d289aa7e0"
project.ext.startStepCloud=11
project.ext.startStepServer=11
project.ext.workflowFile="resources/workflowJ8.xml"
project.ext.tearDownFile="resources/tearDown.txt"
project.ext.baseWorkflow="Software Simplified Workflow for Project $TestProject"
project.ext.projectTemplateCloud="Bug tracking"
project.ext.projectTemplateServer="Basic software development"
project.ext.securityLevelId = [
        lavel1 : 10204,
        level2 : 10205
]
project.ext.groovyExpression = [
        returnsLinkedIssues:"issue.getLinkedIssues()",
        getIssuetype:"issue.get('issuetype')?.name == 'Task'",
        checkPriorityHigh: "issue.get('priority')?.name == 'High'",
        checkPriorityLow: "issue.get('priority')?.name == 'Low'",
        returnsReporter : "issue.get('reporter')",
        getDescription : "issue.get('description')"
]
project.ext.nunjuckExpression = [
        returnsLinkedIssues: "{{ issue | linkedIssues | field('key') }}",
        getIssuetype: "{{ issue.fields.issuetype.name == 'Task' }}",
        checkPriorityHigh: "{{ issue.fields.priority.name == 'High' }}",
        checkPriorityLow: "{{ issue.fields.priority.name == 'Low' }}",
        returnsReporter : "{{ issue.fields.reporter }}"
]

project.ext.jiraExpression = [
        getIssueType : "!!issue.issueType && issue.issueType.name == 'Task'"
]

project.ext.jqlSearchExpression="issuetype = Task and summary~JQL_ISSUE"
project.ext.fields = [
        Labels:'labels',
        Components:'components',
        Assignee:'assignee',
        AffectsVersions:'versions',
        FixVersions:'fixVersions',
        Priority: 'priority',
]
project.ext.relatedIssueServer = [
        currentIssue: "currentIssue:*",
        subtask: "outward:10100",
        parentIssue: "inward:10100",
        issueBelongsToEpic: "outward:10201", //10200 for jira9
        epicOfTheCurrentIssue: "inward:10201", // 10200 for jira9
        childPortfolio: "outward:-2000",
        parentPortfolio: "inward:-2000",
        linkByAnyLink: "*:*",
        linkByBlock: "outward:10000",
        linkByisBlockedBy: "inward:10000",
        linkByClones: "outward:10001",
        linkByIsClonedBy: "inward:10001",
        linkByDuplicates: "outward:10002",
        linkByIsDuplicatedBy: "inward:10002",
        linkByRelatesTo: "outward:10003",
        returnsByGroovyExpression: "groovy:$groovyExpression.returnsLinkedIssues",
        returnsFromJqlSearch: "jql:$jqlSearchExpression"
]
project.ext.relatedIssueCloud = [
        currentIssue: "currentIssue:*",
        subtask: "outward:jira_subtask_link",
        /*parentIssue: "inward:jira_subtask_link",
        issueBelongsToEpic: "outward:Epic-Story Link",
        epicOfTheCurrentIssue: "inward:Epic-Story Link",
        childPortfolio: "inward:Portfolio Parent Link",
        parentPortfolio: "outward:Portfolio Parent Link",
        linkByAnyLink: "*:*",
        linkByBlock: "outward:10000",
        linkByisBlockedBy: "inward:10000",
        linkByClones: "outward:10001",
        linkByIsClonedBy: "inward:10001",
        linkByDuplicates: "outward:10002",
        linkByIsDuplicatedBy: "inward:10002",
        linkByRelatesTo: "outward:10003",
        returnsByNunjucksExpression: "nunjucks:$nunjuckExpression.returnsLinkedIssues",
        returnsFromJqlSearch: "jql:$jqlSearchExpression"*/
]
project.ext.statusIds = [
        toDo: 10000,
        inProgress: 3,
        inReview : 10103,
        done : 10001
]

project.ext.issueType = [
        subtask  : 10004,
        epic : 10000,
        story : 10002, //10001 FOR JIRA9
        task : 10003,
        bug : 10006,
        initiative : 10007
]
project.ext.customFields = [
        storyPoints : "customfield_10111",
        originalStoryPoints : "customfield_10104"
]

project.ext.conditionalValidation = [
        no : [ "conditionalValidation=no", "conditionalValidationScript=" ],
        yes : [ "conditionalValidation=yes", "conditionalValidationScript=$groovyExpression.checkPriorityHigh" ]
]

project.ext.runAsUser = [
        currentUser : [
                "runAsUser=",
        ],
        specificUser: [
                "runAsUser=userByKey:$jmwe_qaUserId",
        ],
        userInFieldAssignee : [
                "runAsUser=userField:assignee",
        ],
        userInFieldReporter : [
                "runAsUser=userField:reporter",
        ],
        userInFieldCreator : [
                "runAsUser=userField:creator",
        ],
        userFromScript : [
                "runAsUser=userFromScript:$groovyExpression.returnsReporter"
        ]
]
project.ext.conditionalExecution = [
        false : [
                "useGroovyCondition=false",
                "groovyExpression=",
        ],
        true : [
                "useGroovyCondition=yes",
                "groovyExpression=$groovyExpression.checkPriorityHigh",
        ]
]

project.ext.statusListServer = [
        inProgress: "In Progress",
        inReview: "In Review",
        done: "Done"
]
project.ext.statusListCloud = [
        inProgress: "In Progress",
        inReview: "In Review",
        done: "Done"
]
project.ext.transitionIssueFunctionsCloud = [
        "postFunction.id=d597971e-9524-4881-9edd-577b8b7b84c2",
        "postFunction.config-d597971e-9524-4881-9edd-577b8b7b84c2={\"conditionalExecution\":\"false\",\"targetIssue\":\"currentIssue:*\",\"transition\":\"Start Progress@@AUTOMATION\",\"runAsType\":\"currentUser\"}"
]
ext.relatedIssue = info?.isCloud ? relatedIssueCloud : relatedIssueServer
ext.statusList = info?.isCloud ? statusListCloud :  statusListServer
project.ext.functionKey = [
        currentStatusConditionServer: 'com.innovalog.jmwe.jira-misc-workflow-extensions:currentstatus-condition',
        currentStatusConditionCloud: 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__CurrentStatusCondition',
        hideTransitionConditionServer: 'com.innovalog.jmwe.jira-misc-workflow-extensions:non-interactive-condition',
        previousStatusConditionServer: 'com.innovalog.jmwe.jira-misc-workflow-extensions:previousstatus-condition',
        scriptedGroovyConditionServer: 'com.innovalog.jmwe.jira-misc-workflow-extensions:groovy-condition',
        scriptedGroovyConditionCloud: 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__ScriptedCondition',
        relatedIssuesConditionServer: 'com.innovalog.jmwe.jira-misc-workflow-extensions:linked-issues-condition',
        relatedIssuesConditionCloud: 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__LinkedIssuesCondition',
        relatedIssuesStatusConditionServer: 'com.innovalog.jmwe.jira-misc-workflow-extensions:linkedissuesstatus-condition',
        relatedIssuesStatusConditionCloud: 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__LinkedIssueStatusCondition',
        sharedConditionServer: 'com.innovalog.jmwe.jira-misc-workflow-extensions:shared-condition',
        relatedIssuesStatusValidatorServer: 'com.innovalog.jmwe.jira-misc-workflow-extensions:linkedissuesstatus-validator',
        userConditionServer: 'com.innovalog.jmwe.jira-misc-workflow-extensions:generic-user-condition',
        userConditionCloud:'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__UserCondition',
        userValidatotCloud:'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__UserValidator',
        userValidatorServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:generic-user-validator',
        transitionIssuePostfunctionServer: 'com.innovalog.jmwe.jira-misc-workflow-extensions:TransitionIssue-function',
        transitionIssuePostfunctionCloud:'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__TransitionIssueFunction',
        transitionRelatedIssuesPostfunctionCloud:'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__TransitionLinkedIssuesFunction',
        transitionRelatedIssuesPostfunctionServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:TransitionLinkedIssues-function',
        transitionParentIssuePostfunctionServer: 'com.innovalog.jmwe.jira-misc-workflow-extensions:TransitionParentIssue-function',
        transitionParentIssuePostfunctionCloud:'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__TransitionParentIssueFunction',
        clearFieldsCloud:'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__ClearFieldsFunction',
        clearFieldsServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:ClearFieldValue-function',
        assignToRoleMemberCloud:'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__AssignToRoleMemberFunction',
        assignToRoleMemberServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:assigntorolemember',
        returnToPreviousStatusServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:return-to-previous-status-function',
        createIssuePostfunctionCloud:'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__CreateIssueFunction',
        fieldsRequiredValidatorCloud:'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__FieldRequiredValidator',
        fieldRequiredValidatorServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:fieldrequired-validator',
        addFieldValueToParentIssuePfServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:AddFieldValueToParent-function',
        scriptedGroovyValidatorServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:groovy-validator',
        scriptedGroovyValidatorCloud:'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__ScriptedValidator',
        relatedIssuesValidatorServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:issue-linking-validator',
        relatedIssuesValidatorCloud:'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__LinkedIssuesValidator',
        assignIssuePostfunctionServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:AssignIssue-function',
        transitionParentIssuePfServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:TransitionParentIssue-function',
        transitionRelatedIssuePfServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:TransitionParentIssue-function',
        setFieldValueOfRelatedIssuesPfServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:SetFieldValueOfLinkedIssues-function',
        setFieldValuePfServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:SetFieldValue-function',
        copyValueFromFieldToFieldPfServer:'com.innovalog.jmwe.jira-misc-workflow-extensions:copyValueFromFieldToField-function',
        separationOfDutiesConditionServer : 'com.innovalog.jmwe.jira-misc-workflow-extensions:separationofduties-condition',
        commentRequiredValidatorServer : 'com.innovalog.jmwe.jira-misc-workflow-extensions:commentrequired-validator',
        commentRequiredValidatorCloud : 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__CommentRequiredValidator',
        fieldHasBeenModifiedValidatorServer : 'com.innovalog.jmwe.jira-misc-workflow-extensions:fieldchanged-validator',
        fieldHasSingleValueValidatorServer : 'com.innovalog.jmwe.jira-misc-workflow-extensions:fieldhassinglevalue-validator',
        fieldHasSingleValueValidatorCloud : 'com.innovalog.jmwe.jira-misc-workflow-extensions:fieldhassinglevalue-validator',
        parentStatusValidatorServer : 'com.innovalog.jmwe.jira-misc-workflow-extensions:parentstatus-validator',
        previousStatusvalidatorServer : 'com.innovalog.jmwe.jira-misc-workflow-extensions:previousstatus-validator',
        setIssueFieldsPfServer : 'com.innovalog.jmwe.jira-misc-workflow-extensions:set-issue-fields-function',
        commentIssuePostfunctionServer : 'com.innovalog.jmwe.jira-misc-workflow-extensions:commentIssue-function',
        commentIssuePostfunctionCloud : 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__CommentIssueFunction',
        copyIssueFieldsPfServer : 'com.innovalog.jmwe.jira-misc-workflow-extensions:copy-fields-function',
        assignToRoleMemberPf : 'com.innovalog.jmwe.jira-misc-workflow-extensions:assigntorolemember',
        createIssuePostfunctionServer : 'com.innovalog.jmwe.jira-misc-workflow-extensions:CreateIssue-function',
        createIssuePostfunctionCloud : 'com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.jmwe.jira-misc-workflow-extensions__CreateIssueFunction',
]



