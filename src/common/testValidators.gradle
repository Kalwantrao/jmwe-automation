apply from: gint.resourceDirectory + '/src/common/setUp.gradle'
apply from: gint.resourceDirectory + '/src/common/createIssues.gradle'
apply from: gint.resourceDirectory + '/src/common/linkIssues.gradle'
apply from: gint.resourceDirectory + '/src/common/createUsers.gradle'
apply from: gint.resourceDirectory + '/src/common/createVersions.gradle'
apply from: gint.resourceDirectory + '/src/common/createComponents.gradle'

//createVersions(project, 5)
//createComponents(project, 'component', 5)

def transitionIssue(transition, issueToTransition, expected, ext, fields, data) {
    gint.taskHelper.add('transitionIssues', [
            [action    : 'transitionIssue', ext: ext,
             dependsOn : ['createIssues'],
             //ignoreDependsResult: true,
             //ignoreFailure: true,
             //ignore: true,
             group: 'test',
             cmdLog: true,
             expected: expected,
             parameters: [
                     issue  : issueToTransition,
                     transition: transition,
             ]+ (fields != null ? fields : [:]),
             data: ( data == null ? data : [:]),
             finalClosure: { Task task ->
                 assert task.result == expected // : gint.helper.log("Transition failed check either issue: $issueToTransition , Or configuration on transition: ", transition)
                 gint.helper.log("transition issue:$issueToTransition by transition $transition", ext)

             },
            ],
    ]
    )
}

def updateIssues(issue, parameters, ext){
    gint.taskHelper.addSetUp('setFields',[
            [action: 'updateIssue', ext: ext,
             dependsOn: 'createIssues',
             mustRunBefore: 'transitionIssues',
             issue: issue,
             parameters: parameters,
            ],
    ]
    )
}
def transitionByUserTask(transition, userId, issue, data, expected ) {
    gint.taskHelper.add('transitionByUser', [
            [expected: expected,dependsOn: 'createIssues',
             mustRunBefore: 'transitionIssues',
             name: 'transitionTriggerByOtherUser'+ transition,
             cmd : /acli $userId -a transitionIssue --issue $issue --transition $transition/,
             data: ( data == null ? data : [:]),
             finalClosure: {Task task ->
                 assert task.result == expected
             }]
    ]
    )
}
def transitionToStatus(issue, previousStatus, currentStatus, ext){
    gint.taskHelper.addSetUp('setPreviousStatus',[
            [action: 'transitionIssue', ext: 'previous' + ext,
             mustRunBefore: 'transitionIssues',
             mustRunAfter: 'createIssues',
             parameters: [
                     issue: issue,
                     transition: previousStatus,
             ],
             finalClosure: { Task task ->
                 assert task.result == 0
                 gint.helper.log("Issue is transition to status: $previousStatus", ext)
             }
       ]
    ])
    gint.taskHelper.addSetUp('setCurrentStatus',[
            [action: 'transitionIssue', ext: 'current' + ext,
             mustRunBefore: 'transitionIssues',
             dependsOn: 'setPreviousStatus',
             parameters: [
                     issue: issue,
                     transition: currentStatus,
             ],
             finalClosure: { Task task ->
                 assert task.result == 0
                 gint.helper.log("Issue is transition to status: $currentStatus", ext)
             }
            ]

   ] )
}
ext {
    transitionIssue=this.&transitionIssue
    transitionByUserTask=this.&transitionByUserTask
    updateIssues=this.&updateIssues
    transitionToStatus=this.&transitionToStatus
}
