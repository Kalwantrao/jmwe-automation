apply from: gint.resourceDirectory +'/src/common/tearDown.gradle'

ext.addWorkflow = {
    if(skipSetup != "true"){
        gint.taskHelper.addSetUp([
                [
                        action       : 'copyWorkflow' ,
                        parameters   : [workflow: baseWorkflow, name: workflow]
                ],
        ]
        )
    }
}
ext.addCustomField = { name, fieldType ->
    def type;
    if(fieldType == 'number' || fieldType == 'numberField' || fieldType == 'numberfield'){
        type = 'com.atlassian.jira.plugin.system.customfieldtypes:float'
    } else if(fieldType == 'checkbox'){
        type = 'com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes'
    } else if(fieldType == 'labels'){
        type = 'com.atlassian.jira.plugin.system.customfieldtypes:labels'
    } else {
        type = fieldType
    }
    gint.taskHelper.addSetUp(
            action: "addCustomField", ext: ":with name:$name",
            parameters:[
                    field: name,
                    type: type
            ]
    )
}

ext.addFieldToScreen = { screen, fieldName ->
    gint.taskHelper.addSetUp(
            action: "addScreenFields", ext: ":to screen $screen: field name:$fieldName",
            parameters:[
                    screen: screen,
                    field: fieldName
            ]
    )
}

ext.addTransitionFunction = { transitions, type, field, functionKey -> // key, type, condition, functionKey, description
    if(skipSetup != "true"){
        gint.taskHelper.addSetUp([
                [action    : 'addTransition', ext: ':' + transitions,
                 retry: true,
                 retrySleep: 5000,
                 parameters: [
                         workflow: workflow,
                         name    : transitions,
                         step    : info?.isCloud ? startStepCloud : startStepServer,
                         screen  : screen
                 ]
                ],
                [action    : 'addTransitionFunction', ext: ':' + transitions,
                 retry: true,
                 retrySleep: 5000,
                 parameters: [
                         workflow   : workflow,
                         transition : transitions,
                         functionKey: functionKey,
                         type       : type,
                         step       : info?.isCloud ? startStepCloud : startStepServer,
                         field      : field
                 ],
                ],
                /*[action: 'getTransitionFunctionList', ext: ':' + transitions,
                  retry: true,
                   sleep: 2000,
                  parameters: [
                          workflow: workflow,
                          transition : transitions,
                          type       : type,
                          step       : info?.isCloud ? startStepCloud : startStepServer,
                          outputType: "text",
                          columns: "description",
                     ],
                  ]*/
        ])
    }
}

ext.moveTransitionFunction = { transition, after ->
    if(skipSetup != "true"){
        gint.taskHelper.addSetUp(
                action: 'moveTransitionFunction',
                retry: true,
                retrySleep: 5000,
                ext: transition,
                parameters: [
                        workflow: workflow,
                        type: 'postfunction',
                        transition: transition,
                        step: info?.isCloud ? startStepCloud : startStepServer,
                        name: 1,
                        after: after
                ]
        )
    }
}

ext.createWorkflowScheme = {
    if(skipSetup != "true"){
        gint.taskHelper.addSetUp([
                action: 'createWorkflowScheme',
                retrySleep: 5000,
                retry: true,
                parameters:[
                        workflowScheme: projectName,
                        workflow: workflow,
                ],
        ]
        )
    }
    else {
        gint.taskHelper.addSetUp([
                [
                        action    : 'associateWorkflow',
                        parameters: [workflowScheme: projectName, name: workflow]
                ],
        ]
        )
    }
}

ext.createWorkflowSchemeForSanityTest = {
    gint.taskHelper.addSetUp([
            action: 'createWorkflowScheme', ext: ":sanity:",
            retrySleep: 5000,
            retry: true,
            parameters:[
                    workflowScheme: projectName,
                    workflow: workflow,
            ],
    ]
    )
}

ext.associateWorkflow = { workflowName ->
    if(skipSetup == "true") {
        gint.taskHelper.addSetUp([
                [
                        action    : 'associateWorkflow',
                        parameters: [workflowScheme: projectName, name: workflowName]
                ],
        ]
        )
    }
}
ext.createProject = {
    def additionalParams = info?.isCloud? [] : [issueSecurityScheme: issueSecurityScheme]
    gint.taskHelper.addSetUp(
            [action: 'createProject',
             retry: true,
             parameters:[
                     project: projectName,
                     template: info?.isCloud? projectTemplateCloud : projectTemplateServer,
                     lead: '@Self',
                     workflowScheme: workflowScheme,
                     issueTypeScreenScheme: issueTypeScreenScheme,
                     issueTypeScheme: issueTypeScheme,
             ] + additionalParams,
            ]
    )
}
ext.createIssue = { parameters, ext ->
    def savedIssues = [:]
    gint.taskHelper.addSetUp([
            [action: 'createIssue',
             mustRunAfter: 'createProject',
             retry: true,
             ext: ': '+ ext ,
             project: projectName,
             parameters: parameters,
             finalClosure: { Task task ->
                 def currentIssue = gint.searchForIssueKey(task.outData)
                 savedIssues[] = currentIssue
                 gint.helper.log("Issue created ", savedIssues[]);
             },
            ],
    ]
    )
    return savedIssues
}
ext.updateIssue = { parameters, ext ->
    gint.taskHelper.add(
            action: 'updateIssue',
            retry: true,
            sleep: 1000,
            ext: ': '+ext,
            parameters: parameters,
    )
}
ext.linkIssue = { parameters, ext ->
    gint.taskHelper.addSetUp([
            [action: 'linkIssue',
                    retry: true,
             ext: ': '+ext,
             parameters: parameters
            ]
    ]
    )
}

ext.addComponent = { numberOfComponents ->
    (1..numberOfComponents).each{
        gint.taskHelper.add(
                [action: 'addComponent',ext: numberOfComponents,
                 parameters: [
                         project: projectName,
                         component: 'component' + numberOfComponents
                 ]
                ]
        )
    }
}
ext.createVersions = { numberOfVersions ->
    (1..numberOfVersions).each{ versionNumber ->
        gint.taskHelper.addSetUp(
                action: 'addVersion',
                ext: versionNumber,
                project: projectName,
                parameters:[
                        version: versionNumber,
                ],
        )
    }
}
ext.addUser = {
    gint.taskHelper.add(
            [action: 'addUser',
             parameters: info?.isCloud? [userId: cloudUser, userEmail: cloudUser + '@gmail.com'] : [userId:serverUser, userEmail:serverUser + '@gmail.com', userPassword:serverUser]
            ]
    )
}
ext.addGroup = {
    gint.taskHelper.add(
            [action: 'addGroup',
             parameters: [
                     group: groupName
             ]
            ]
    )
}
ext.addProjectRole = {
    gint.taskHelper.add(
            [action: 'addProjectRole',
             parameters: [
                     name: projectRole
             ],
            ]
    )
}
ext.addProjectRoleActors = {
    gint.taskHelper.add(
            [action: 'addProjectRoleActors',
             parameters: [
                     project: projectName,
                     role: projectRole,
                     userId: info?.isCloud ? cloudUser : serverUser
             ],
            ]
    )
}

