apply from: gint.resourceDirectory +'/src/common/tearDown.gradle'

ext.addWorkflow = {
    if(skipSetup != "true"){
        gint.taskHelper.addSetUp([
                [
                        action       : 'copyWorkflow' ,
                        parameters   : [workflow: baseWorkflow, name: workflow]
                ],
        ]
        )
    }
}

ext.addWorkflowClassic = { classic ->
    if(skipSetup != "true"){
        gint.taskHelper.addSetUp([
                [
                        action       : 'copyWorkflow' ,
                        parameters   : [workflow: classic, name: workflow]
                ],
        ]
        )
    }
}

ext.addCustomField = { name, fieldType ->
    def type;
    if(fieldType == 'number' || fieldType == 'numberField' || fieldType == 'numberfield'){
        type = 'com.atlassian.jira.plugin.system.customfieldtypes:float'
    } else if(fieldType == 'checkbox'){
        type = 'com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes'
    } else if(fieldType == 'labels'){
        type = 'com.atlassian.jira.plugin.system.customfieldtypes:labels'
    } else {
        type = fieldType
    }
    gint.taskHelper.addSetUp(
            action: "addCustomField", ext: ":with name:$name",
            mustRunBefore: 'addTransitionFunction',
            parameters:[
                    field: name,
                    type: type,
                    continue: null
            ]
    )
}

ext.createGroup = { groupName ->
    if(!isCloud) {
        gint.taskHelper.addSetUp([
                [action    : "addGroup",
                 ext       : ":with name:$groupName",
                 parameters: [
                         group: groupName
                 ]
                ]
        ])
    }
}

ext.addUserToGroup = { groupName, userId ->
    if(!isCloud) {
        gint.taskHelper.addSetUp([
                [action    : "addUserToGroup",
                 ext       : ":add user_ $userId to group:$groupName",
                 parameters: [
                         userId: userId,
                         group : groupName
                 ]
                ]
        ])
    }
}

ext.addFieldToScreen = { screen, fieldName ->
    gint.taskHelper.addSetUp(
            action: "addScreenFields", ext: ":to screen $screen: field name:$fieldName",
            parameters:[
                    screen: screen,
                    field: fieldName,
                    continue: null
            ]
    )
}

ext.addTransitionFunction = { transitions, type, field, functionKey -> // key, type, condition, functionKey, description
    def defaultFieldsServer = [
            "restrictToInternal=no",
            "sendNotification=no",
            "throwExceptions=",
            "correlationId=",
    ]
    def defaultFieldsCloud;
    if(type == 'condition'){
        defaultFieldsCloud = ["condition.id=d150ebe9-f65f-4199-ade5-c38062e8d5b9"] + "condition.config-d150ebe9-f65f-4199-ade5-c38062e8d5b9=$field"
    } else if(type == 'validator'){
        defaultFieldsCloud = ["validator.id=ba2aae99-13c1-422b-933c-1c16e0739d3a"] + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a=$field"
    } else {
        defaultFieldsCloud = ["postFunction.id=18b36491-f556-48cd-b476-7b82f02c7249"] + "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249=$field"
    }
    if(skipSetup != "true"){
        gint.taskHelper.addSetUp('addTransitionFunction',[
                [action    : 'addTransition', ext: ':' + transitions,
                 mustRunAfter: "copyWorkflow",
                 mustRunBefore: "createWorkflowScheme",
                 retry: true,
                 parameters: [
                         workflow: workflow,
                         name    : transitions,
                         step    : info?.isCloud ? startStepCloud : startStepServer,
                         screen  : screen
                 ]
                ],
                [action    : 'addTransitionFunction', ext: ':' + transitions,
                 mustRunAfter: "copyWorkflow",
                 mustRunBefore: "createWorkflowScheme",
                 retry: true,
                 parameters: [
                         workflow   : workflow,
                         transition : transitions,
                         functionKey: functionKey,
                         type       : type,
                         step       : "To Do",
                         field      : info?.isCloud ? defaultFieldsCloud : defaultFieldsServer + field
                 ],
                ],
                /*[action: 'getTransitionFunctionList', ext: ':' + transitions,
                  retry: true,
                  parameters: [
                          workflow: workflow,
                          transition : transitions,
                          type       : type,
                          step       : info?.isCloud ? startStepCloud : startStepServer,
                          outputType: "text",
                          columns: "description",
                     ],
                  ]*/
        ])
    }
}

ext.addTransitionFunctionOnCreateTransition = { transitions, type, field, functionKey -> // key, type, condition, functionKey, description
    def defaultFieldsServer = [
            "restrictToInternal=no",
            "sendNotification=no",
            "throwExceptions=",
            "correlationId=",
    ]
    def defaultFieldsCloud;
    if(type == 'condition'){
        defaultFieldsCloud = ["condition.id=d150ebe9-f65f-4199-ade5-c38062e8d5b9"] + "condition.config-d150ebe9-f65f-4199-ade5-c38062e8d5b9=$field"
    } else if(type == 'validator'){
        defaultFieldsCloud = ["validator.id=ba2aae99-13c1-422b-933c-1c16e0739d3a"] + "validator.config-ba2aae99-13c1-422b-933c-1c16e0739d3a=$field"
    } else {
        defaultFieldsCloud = ["postFunction.id=d6b5792a-ea99-4b11-958d-58ba53ef8ecc"] + "postFunction.config-d6b5792a-ea99-4b11-958d-58ba53ef8ecc=$field"
    }
    if(skipSetup != "true"){
        gint.taskHelper.addSetUp('addTransitionFunction',[
                [action    : 'addTransitionFunction',
                 mustRunAfter: "copyWorkflow",
                 mustRunBefore: "createWorkflowScheme",
                 ext: ':' + transitions,
                 retry: true,
                 parameters: [
                         workflow   : workflow,
                         step       : "@create",
                         transition : "@create",
                         functionKey: functionKey,
                         type       : type,
                         field      : info?.isCloud ? defaultFieldsCloud : defaultFieldsServer + field
                 ],
                ],
        ])
    }
}

gint.taskHelper.addSetUp(
        name: 'addTransitionFunction',
        inline:{
            gint.helper.log("Running the set up tasks", "Hello! from ACLI")
        }
)

if(skipSetup == "true"){
    gint.taskHelper.addSetUp(
            name: "createWorkflowScheme",
            inline:{
                gint.helper.log("Running the set up tasks", "Hello, From JMWE Automation!")
            }
    )
}

ext.moveTransitionFunction = { transition, after ->
    if(skipSetup != "true"){
        gint.taskHelper.addSetUp(
                action: 'moveTransitionFunction',
                mustRunAfter: ['addTransitionFunction'],
                mustRunBefore: ['createWorkflowScheme'],
                retry: true,
                retrySleep: 5000,
                ext: transition,
                parameters: [
                        workflow: workflow,
                        type: 'postfunction',
                        transition: transition,
                        step: info?.isCloud ? startStepCloud : startStepServer,
                        name: 1,
                        after: after
                ]
        )
    }
}

ext.createWorkflowScheme = {
    if(skipSetup != "true"){
        gint.taskHelper.addSetUp([
                action: 'createWorkflowScheme',
                mustRunAfter: ['addTransitionFunction'],
                mustRunBefore: 'createProject',
                retrySleep: 5000,
                retry: true,
                parameters:[
                        workflowScheme: projectName,
                        workflow: workflow,
                ],
        ]
        )
    }
    else {
        gint.taskHelper.addSetUp([
                [
                        action    : 'associateWorkflow',
                        parameters: [workflowScheme: projectName, name: workflow]
                ],
        ]
        )
    }
}

ext.associateWorkflow = { workflowName ->
    if(skipSetup == "true") {
        gint.taskHelper.addSetUp([
                [
                        action    : 'associateWorkflow',
                        parameters: [workflowScheme: projectName, name: workflowName]
                ],
        ]
        )
    }
}

ext.createProject = {
    gint.taskHelper.addSetUp(
            [action: 'createProject',
             mustRunAfter: 'createWorkflowScheme',
             retry: true,
             parameters:[
                     project: projectName,
                     template: info?.isCloud? projectTemplateCloud : projectTemplateServer,
                     lead: '@Self',
                     workflowScheme: workflowScheme,
                     issueTypeScreenScheme: issueTypeScreenScheme,
                     issueTypeScheme: issueTypeScheme,
                     issueSecurityScheme: issueSecurityScheme
             ],
            ]
    )
}

ext.createIssue = { parameters, ext ->
    def savedIssues = [:]
    gint.taskHelper.addSetUp('createIssues',[
            [action: 'createIssue',
             mustRunAfter: 'createProject',
             retry: true,
             ext: ': '+ ext ,
             project: projectName,
             parameters: parameters,
             finalClosure: { Task task ->
                 def currentIssue = gint.searchForIssueKey(task.outData)
                 savedIssues[] = currentIssue
                 gint.helper.log("Issue created ", savedIssues[]);
             },
            ],
    ]
    )
    return savedIssues
}

ext.updateIssue = { parameters, ext ->
    gint.taskHelper.add(
            action: 'updateIssue',
            retry: true,
            sleep: 1000,
            ext: ': '+ext,
            parameters: parameters,
    )
}
ext.linkIssue = { parameters, ext ->
    gint.taskHelper.add([
            [action: 'linkIssue',
                    retry: true,
             ext: ': '+ext,
             parameters: parameters
            ]
    ]
    )
}

