buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/itest-JSM/JSM.gradle'

addOrganization()
addRequestType()

def functionKey = info?.isCloud ? "com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.${testCloudBuild}__SetFieldValueFunction" : 'com.innovalog.jmwe.jira-misc-workflow-extensions:set-issue-fields-function'
// Verify the set issue fields postfunction for remove existing value field option
[
        "SetIssueFieldPostfunctionRemoveExistingValue"
].each {
    fieldsList.eachWithIndex { fieldName, fieldValue, i ->
        if(fieldName == "requestParticipant"){
            def fieldNameToSetOnIssue = fieldNameToSet[fieldName]
            def getFieldValueResult = checkFieldValueOnIssue[fieldName]
            def fieldValuesToSetOnIssue = fieldValuesToSet[fieldName]
            def fieldIdToConfigure = fieldValuesToConfigure[fieldName]

            def transition = it + fieldName
            def cloud = "{\"runAsType\":\"currentUser\",\"fieldsConfig\":[{\"fieldId\":\"$fieldValue\",\"options\":{\"removeValues\":true},\"value\":\"$fieldIdToConfigure\"}],\"sendNotifications\":false,\"targetIssue\":\"$relatedIssue.linkByBlock\",\"conditionalExecution\":false}"
            def server = [["copyFieldsConfig=[{\"sourceField\":\"assignee\",\"destinationField\":\"$fieldValue\"}]"], "selectedLinkTypeSource=$relatedIssue.linkByBlock", "selectedLinkTypeDestination=$relatedIssue.linkByBlock", conditionalExecution.false, runAsUser.currentUser]

            addTransitionFunctionForJSM(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)

            def issue1 = createIssue([type: 'Task', summary: 'JMWE_Issue'], transition + "issue1")
            def issue2 = createIssue([type: 'Task', summary: 'JMWE_Issue'], transition + "issue2")

            gint.taskHelper.addSetUp(
                    [action      : 'linkIssue',
                     mustRunAfter: ['createIssues', 'createProject'],
                     ext         : ": to check:" + transition,
                     parameters  : [
                             issue  : { -> issue1[] },
                             toIssue: { -> issue2[] },
                             link   : "blocks"
                     ],
                    ]
            )
            gint.taskHelper.add([
                    [action    : 'setFieldValue',
                     sleep     : sleep,
                     ext       : ":of $fieldNameToSetOnIssue to $fieldValuesToSetOnIssue before transition issue with: $transition",
                     parameters: [
                             issue: { -> issue2[] },
                             field: fieldNameToSetOnIssue,
                             value: fieldValuesToSetOnIssue
                     ],
                    ],
            ])
            gint.taskHelper.add([
                    [action    : 'getFieldValue',
                     sleep     : sleep,
                     ext       : ": before transition issue with $transition:",
                     parameters: [
                             issue: { -> issue2[] },
                             field: fieldNameToSetOnIssue,
                     ],
                     data      : [getFieldValueResult],
                    ],
            ])
            gint.taskHelper.add([
                    [action    : 'transitionIssue',
                     sleep     : sleep,
                     ext       : ":by $transition:",
                     parameters: [
                             transition: transition,
                             issue     : { -> issue1[] },
                     ],
                    ],
            ])
            gint.taskHelper.add([
                    [action    : 'getFieldValue',
                     sleep     : sleep,
                     ext       : ": JSM-COPY_ISSUE_FIELDS_POSTFUNCTION after transition issue with $transition:",
                     parameters: [
                             issue: { -> issue2[] },
                             field: fieldNameToSetOnIssue,
                     ],
                     failData  : [getFieldValueResult],
                    ],
            ])
        }
    }
}

// Verify set issue fields postfunctions set all fields in one transition for JSM fields.
[
        'setIssueFieldsPostfunctionSetAllFieldsInOneTransition'
].each {
    def transition = it
    def server = [conditionalExecution.false, "selectedLinkType=$relatedIssue.linkByBlock", runAsUser.currentUser, ["fields=[{\"fieldId\":\"labels\",\"value\":\"default_value\",\"options\":[],\"isTemplate\":true}]"]]
    def cloud = "{\"runAsType\":\"currentUser\",\"fieldsConfig\":[{\"fieldId\":\"$requestTypeId\",\"options\":{},\"value\":\"$requestTypeFieldValue\"},{\"fieldId\":\"$requestParticipantsId\",\"options\":{},\"value\":\"accountId:${info.userKey}\"},{\"fieldId\":\"$organizationsId\",\"options\":{},\"value\":\"$organization\"},{\"fieldId\":\"resolution\",\"options\":{},\"value\":\"$defaultValueOfResolution\"}],\"sendNotifications\":false,\"targetIssue\":\"$relatedIssue.linkByBlock\",\"conditionalExecution\":false}"
    addTransitionFunctionForJSM(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)

    def issue1 = createIssue([type: 'Task', summary: 'JMWE_Issue'], transition + "issue1")
    def issue2 = createIssue([type: 'Task', summary: 'JMWE_Issue'], transition + "issue2")

    gint.taskHelper.addSetUp(
            [action      : 'linkIssue',
             mustRunAfter: ["createIssues", 'createProject'],
             ext         : ": to check:" + transition,
             parameters  : [
                     issue  : { -> issue1[] },
                     toIssue: { -> issue2[] },
                     link   : "blocks"
             ],
            ]
    )

    fieldsList.eachWithIndex { fieldName, fieldValue, i ->
        def fieldNameToSetOnIssue = fieldNameToSet[fieldName]
        def getFieldValueResult = checkFieldValueOnIssue[fieldName]
        def fieldValuesToSetOnIssue = fieldValuesToSet[fieldName]
        def fieldIdToConfigure = fieldValuesToConfigure[fieldName]

        gint.taskHelper.add([
                [action    : 'getFieldValue',
                 sleep     : sleep,
                 ext       : ": before transition issue with $transition:$fieldName",
                 parameters: [
                         issue: { -> issue2[] },
                         field: fieldNameToSetOnIssue,
                 ],
                 failData  : [getFieldValueResult],
                ],
        ])
    }
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             sleep     : sleep,
             ext       : ":by $transition:",
             parameters: [
                     transition: transition,
                     issue     : { -> issue1[] },
             ],
            ],
    ])
    fieldsList.eachWithIndex { fieldName, fieldValue, i ->
        def fieldNameToSetOnIssue = fieldNameToSet[fieldName]
        def getFieldValueResult = checkFieldValueOnIssue[fieldName]
        def fieldValuesToSetOnIssue = fieldValuesToSet[fieldName]
        def fieldIdToConfigure = fieldValuesToConfigure[fieldName]

        gint.taskHelper.add([
                [action    : 'getFieldValue',
                 sleep     : sleep,
                 ext       : ": Of $fieldName after transition issue with $transition:$fieldName",
                 parameters: [
                         issue: { -> issue2[] },
                         field: fieldNameToSetOnIssue,
                 ],
                 data      : [getFieldValueResult],
                ],
        ])
    }
}

def relatedIssues = [:]
def relatedIssuesMap = [:]

relatedIssuesList.each {
    relatedIssues.putAll(createRelatedIssuesMap('CONFIGURATION', it, projectName, " "))
    relatedIssuesMap.putAll(createRelatedIssuesMap('TRANSITION', it, projectName, " "))
}

// Verify set issue fields postfunctions for JSM fields.
fieldsList.take(1).eachWithIndex { fieldName, fieldValue, i ->
    def fieldNameToSetOnIssue = fieldNameToSet[fieldName]
    def getFieldValueResult = checkFieldValueOnIssue[fieldName]
    def fieldValuesToSetOnIssue = fieldValuesToSet[fieldName]
    def fieldIdToConfigure = fieldValuesToConfigure[fieldName]

    relatedIssues.eachWithIndex { key, value, int idx ->
        def transition = "setIssueField_" + fieldName + "ToLinkedIssues" + idx
        def server = [conditionalExecution.false, "selectedLinkType=$value", runAsUser.currentUser, ["fields=[{\"fieldId\":\"labels\",\"value\":\"default_value\",\"options\":[],\"isTemplate\":true}]"]]
        def cloud = "{\"runAsType\":\"currentUser\",\"fieldsConfig\":[{\"fieldId\":\"$fieldValue\",\"options\":{},\"value\":\"$fieldIdToConfigure\"}],\"sendNotifications\":false,\"targetIssue\":\"$value\",\"conditionalExecution\":false}"
        addTransitionFunctionForJSM(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
    }

    relatedIssuesMap.eachWithIndex { currentIssue, linkedIssue, int index ->
        def transition = "setIssueField_" + fieldName + "ToLinkedIssues" + index
        gint.taskHelper.add([
                [action    : 'getFieldValue',
                 sleep     : sleep,
                 ext       : ": before transition issue with $transition:",
                 parameters: [
                         issue: linkedIssue,
                         field: fieldNameToSetOnIssue,
                 ],
                 failData  : [getFieldValueResult],
                ],
        ])
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 sleep     : sleep,
                 ext       : ":by $transition:",
                 parameters: [
                         transition: transition,
                         issue     : currentIssue,
                 ],
                ],
        ])
        gint.taskHelper.add([
                [action    : 'getFieldValue',
                 sleep     : sleep,
                 ext       : ": Of $fieldName after transition issue with $transition:",
                 parameters: [
                         issue: linkedIssue,
                         field: fieldNameToSetOnIssue,
                 ],
                 data      : [getFieldValueResult],
                ],
        ])
    }
}

// Verify set issue fields postfunctions for JSM fields.
fieldsList.eachWithIndex { fieldName, fieldValue, i ->
    def fieldNameToSetOnIssue = fieldNameToSet[fieldName]
    def getFieldValueResult = checkFieldValueOnIssue[fieldName]
    def fieldValuesToSetOnIssue = fieldValuesToSet[fieldName]
    def fieldIdToConfigure = fieldValuesToConfigure[fieldName]
    def transition = "setIssueFieldsPostfunctionCheckField_" + fieldName

    def server =  [conditionalExecution.false , "selectedLinkType=$relatedIssue.linkByBlock" , runAsUser.currentUser,["fields=[{\"fieldId\":\"labels\",\"value\":\"default_value\",\"options\":[],\"isTemplate\":true}]"]]
    def cloud =  "{\"runAsType\":\"currentUser\",\"fieldsConfig\":[{\"fieldId\":\"$fieldValue\",\"options\":{\"copyOnlyIfNotSet\":true},\"value\":\"$fieldIdToConfigure\"}],\"sendNotifications\":false,\"targetIssue\":\"$relatedIssue.linkByBlock\",\"conditionalExecution\":false}"
    addTransitionFunctionForJSM(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)

    def issue1 = createIssue([type: 'Task', summary: 'JMWE_Issue'], transition + "issue1")
    def issue2 = createIssue([type: 'Task', summary: 'JMWE_Issue'], transition + "issue2")

    gint.taskHelper.addSetUp(
            [action: 'linkIssue',
             mustRunAfter: ["createIssues",'createProject'],
             ext: ": to check:" + transition,
             parameters: [
                     issue: {->issue1[]},
                     toIssue: { ->issue2[] },
                     link: "blocks"
             ],
            ]
    )
    gint.taskHelper.add([
            [action    : 'getFieldValue',
             sleep : sleep,
             ext: ": before transition issue with $transition:",
             parameters: [
                     issue     : { ->issue2[] },
                     field: fieldNameToSetOnIssue,
             ] ,
             failData: [ getFieldValueResult ],
            ],
    ])
    gint.taskHelper.add([
            [action    : 'transitionIssue',
             sleep : sleep,
             ext: ":by $transition:",
             parameters: [
                     transition: transition,
                     issue     : { ->issue1[] },
             ],
            ],
    ])
    gint.taskHelper.add([
            [action    : 'getFieldValue',
             sleep : sleep,
             ext: ": Of $fieldName after transition issue with $transition:",
             parameters: [
                     issue     : { ->issue2[] },
                     field: fieldNameToSetOnIssue,
             ],
             data: [ getFieldValueResult ],
            ],
    ])
    if (fieldName == "requestParticipant") {
        gint.taskHelper.add([
                [action    : 'setFieldValue',
                 sleep     : sleep,
                 ext       : ":of $fieldNameToSetOnIssue to $testUser before transition issue with: $transition:when field already has a value",
                 parameters: [
                         issue: { -> issue1[] },
                         field: fieldNameToSetOnIssue,
                         value: testUser
                 ],
                ],
                [action    : 'transitionIssue',
                 sleep     : sleep,
                 ext       : ":by $transition:when field already has a value",
                 parameters: [
                         transition: transition,
                         issue     : { -> issue1[] },
                 ],
                ],
                [action    : 'getFieldValue',
                 sleep     : sleep,
                 ext       : ": after transition issue with $transition:when field already has a value",
                 parameters: [
                         issue: { -> issue2[] },
                         field: fieldNameToSetOnIssue,
                 ],
                 failData  : [getFieldValueResult],
                 data      : ["Request participants  . . . . : $testUser"],
                ],
        ])
        if (fieldName.equalsIgnoreCase("organization")) {
            gint.taskHelper.add([
                    [action    : 'setFieldValue',
                     sleep     : sleep,
                     ext       : ":of $fieldNameToSetOnIssue to empty before transition issue with: $transition:when not ignoring empty value",
                     parameters: [
                             issue: { -> issue1[] },
                             field: fieldNameToSetOnIssue,
                             value: " "
                     ],
                    ],
                    [action    : 'transitionIssue',
                     sleep     : sleep,
                     ext       : ":by $transition:when not ignoring empty value",
                     parameters: [
                             transition: transition,
                             issue     : { -> issue1[] },
                     ],
                    ],
                    [action    : 'getFieldValue',
                     sleep     : sleep,
                     ext       : ": after transition issue with $transition:when not ignoring empty value",
                     parameters: [
                             issue: { -> issue2[] },
                             field: fieldNameToSetOnIssue,
                     ],
                     failData  : [getFieldValueResult],
                    ],
            ])
        }
    }
}

// Verify the set issue fields postfunction for copy only if not set option
[
        "SetIssueFieldPostfunctionOnlyIfNotSet"
].each {
    fieldsList.take(1).eachWithIndex { fieldName, fieldValue, i ->
        def fieldNameToSetOnIssue = fieldNameToSet[fieldName]
        def getFieldValueResult = checkFieldValueOnIssue[fieldName]
        def fieldValuesToSetOnIssue = fieldValuesToSet[fieldName]
        def fieldIdToConfigure = fieldValuesToConfigure[fieldName]

        def transition = it + fieldName
        def cloud =  "{\"runAsType\":\"currentUser\",\"fieldsConfig\":[{\"fieldId\":\"$fieldValue\",\"options\":{\"copyOnlyIfNotSet\":true},\"value\":\"$fieldIdToConfigure\"}],\"sendNotifications\":false,\"targetIssue\":\"$relatedIssue.linkByBlock\",\"conditionalExecution\":false}"
        def server = [["copyFieldsConfig=[{\"sourceField\":\"assignee\",\"destinationField\":\"$fieldValue\"}]"], "selectedLinkTypeSource=$relatedIssue.linkByBlock", "selectedLinkTypeDestination=$relatedIssue.linkByBlock", conditionalExecution.false, runAsUser.currentUser]

        addTransitionFunctionForJSM(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)

        def issue1 = createIssue([type: 'Task', summary: 'JMWE_Issue'], transition + "issue1")
        def issue2 = createIssue([type: 'Task', summary: 'JMWE_Issue'], transition + "issue2")

        gint.taskHelper.addSetUp(
                [action: 'linkIssue',
                 mustRunAfter: ['createIssues','createProject'],
                 ext: ": to check:" + transition,
                 parameters: [
                         issue: {->issue1[]},
                         toIssue: { ->issue2[] },
                         link: "blocks"
                 ],
                ]
        )
        gint.taskHelper.add([
                [action    : 'setFieldValue',
                 sleep     : sleep,
                 ext       : ":of $fieldNameToSetOnIssue to $fieldValuesToSetOnIssue before transition issue with: $transition",
                 parameters: [
                         issue     : { ->issue1[] },
                         field     : fieldNameToSetOnIssue,
                         value     : fieldValuesToSetOnIssue
                 ],
                ],
        ])
        gint.taskHelper.add([
                [action    : 'getFieldValue',
                 sleep : sleep,
                 ext: ": before transition issue with $transition:",
                 parameters: [
                         issue     : { ->issue2[] },
                         field: fieldNameToSetOnIssue,
                 ] ,
                 failData: [ getFieldValueResult ],
                ],
        ])
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 sleep : sleep,
                 ext: ":by $transition:",
                 parameters: [
                         transition: transition,
                         issue     : { ->issue1[] },
                 ],
                ],
        ])
        gint.taskHelper.add([
                [action    : 'getFieldValue',
                 sleep : sleep,
                 ext: ": JSM-COPY_ISSUE_FIELDS_POSTFUNCTION after transition issue with $transition:",
                 parameters: [
                         issue     : { ->issue2[] },
                         field: fieldNameToSetOnIssue,
                 ],
                 data: [ getFieldValueResult ],
                ],
        ])
        if(fieldName == "requestParticipant"){
            gint.taskHelper.add([
                    [action    : 'setFieldValue',
                     sleep     : sleep,
                     ext       : ":of $fieldNameToSetOnIssue to $testUser before transition issue with: $transition:when field already has a value",
                     parameters: [
                             issue     : { ->issue1[] },
                             field     : fieldNameToSetOnIssue,
                             value     : testUser
                     ],
                    ],
                    [action    : 'transitionIssue',
                     sleep : sleep,
                     ext: ":by $transition:when field already has a value",
                     parameters: [
                             transition: transition,
                             issue     : { ->issue1[] },
                     ],
                    ],
                    [action    : 'getFieldValue',
                     sleep : sleep,
                     ext: ": after transition issue with $transition:when field already has a value",
                     parameters: [
                             issue     : { ->issue2[] },
                             field: fieldNameToSetOnIssue,
                     ] ,
                     data: [ getFieldValueResult ],
                     failData: ["Request participants  . . . . : $testUser"],
                    ],
            ])
        }
    }
}

// Verify the set issue fields postfunction for ignore empty value
[
        "SetIssueFieldPostfunctionIgnoreEmptyValue"
].each {
    fieldsList.take(1).eachWithIndex { fieldName, fieldValue, i ->
        def fieldNameToSetOnIssue = fieldNameToSet[fieldName]
        def getFieldValueResult = checkFieldValueOnIssue[fieldName]
        def fieldValuesToSetOnIssue = fieldValuesToSet[fieldName]
        def fieldIdToConfigure = fieldValuesToConfigure[fieldName]

        if (fieldName != 'resolution') {
            def transition = it + fieldName
            def cloud = "{\"runAsType\":\"currentUser\",\"fieldsConfig\":[{\"fieldId\":\"$fieldValue\",\"options\":{\"ignoreEmptyValue\":true},\"value\":\"$fieldIdToConfigure\"}],\"sendNotifications\":false,\"targetIssue\":\"$relatedIssue.linkByBlock\",\"conditionalExecution\":false}"
            def server = [["copyFieldsConfig=[{\"sourceField\":\"assignee\",\"destinationField\":\"$fieldValue\"}]"], "selectedLinkTypeSource=$relatedIssue.linkByBlock", "selectedLinkTypeDestination=$relatedIssue.linkByBlock", conditionalExecution.false, runAsUser.currentUser]

            addTransitionFunctionForJSM(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)

            def issue1 = createIssue([type: 'Task', summary: 'JMWE_Issue'], transition + "issue1")
            def issue2 = createIssue([type: 'Task', summary: 'JMWE_Issue'], transition + "issue2")

            gint.taskHelper.addSetUp(
                    [action      : 'linkIssue',
                     mustRunAfter: ['createIssues', 'createProject'],
                     ext         : ": to check:" + transition,
                     parameters  : [
                             issue  : { -> issue1[] },
                             toIssue: { -> issue2[] },
                             link   : "blocks"
                     ],
                    ]
            )
            gint.taskHelper.add([
                    [action    : 'setFieldValue',
                     sleep     : sleep,
                     ext       : ":of $fieldNameToSetOnIssue to empty before transition issue with: $transition",
                     parameters: [
                             issue   : { -> issue1[] },
                             field   : fieldNameToSetOnIssue,
                             value   : " ",
                             continue: null
                     ]
                    ],
                    [action    : 'setFieldValue',
                     sleep     : sleep,
                     ext       : ":of $fieldNameToSetOnIssue to $fieldValuesToSetOnIssue before transition issue with: $transition",
                     parameters: [
                             issue: { -> issue2[] },
                             field: fieldNameToSetOnIssue,
                             value: fieldValuesToSetOnIssue
                     ],
                    ],
            ])
            gint.taskHelper.add(
                    [action    : 'getFieldValue',
                     sleep     : sleep,
                     ext       : ": before transition issue with $transition:",
                     parameters: [
                             issue: { -> issue1[] },
                             field: fieldNameToSetOnIssue,
                     ],
                     failData  : [getFieldValueResult],
                    ],
            )
            gint.taskHelper.add(
                    [action    : 'transitionIssue',
                     sleep     : sleep,
                     ext       : ":by $transition:",
                     parameters: [
                             transition: transition,
                             issue     : { -> issue1[] },
                     ],
                    ],
            )
            gint.taskHelper.add(
                    [action    : 'getFieldValue',
                     sleep     : sleep,
                     ext       : ": JSM-COPY_ISSUE_FIELDS_POSTFUNCTION after transition issue with $transition:",
                     parameters: [
                             issue: { -> issue2[] },
                             field: fieldNameToSetOnIssue,
                     ],
                     data      : [getFieldValueResult],
                    ],
            )
        }
    }
}

runAsUser.remove("userFromScriptInvalid")

// Check run as user for set issue fields postfunction
runAsUser.eachWithIndex { userType, configFields, i ->
    fieldsList.take(1).eachWithIndex { fieldName, fieldValue, idx ->
        if (fieldName != 'resolution') {

            def transition = fieldName + "SetIssueFieldsPostfunctionRunAs" + userType
            def fieldNameToSetOnIssue = fieldNameToSet[fieldName]
            def getFieldValueResult = checkFieldValueOnIssue[fieldName]
            def fieldValuesToSetOnIssue = fieldValuesToSet[fieldName]
            def fieldIdToConfigure = fieldValuesToConfigure[fieldName]

            def cloud =  "{\"sendNotifications\":false,\"problems\":[],\"targetIssue\":\"$relatedIssue.linkByBlock\",\"fieldsConfig\":[{\"fieldId\":\"$fieldValue\",\"options\":{},\"value\":\"$fieldIdToConfigure\"}],$configFields}"
            def server = ["fields=$fieldValue", "selectedLinkType=$relatedIssue.linkByBlock", conditionalExecution.true, configFields]
            addTransitionFunctionForJSM(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)

            def issue1 = createIssue([type: 'Task', summary: 'JMWE_Issue'], transition + "issue1")
            def issue2 = createIssue([type: 'Task', summary: 'JMWE_Issue'], transition + "issue2")

            gint.taskHelper.addSetUp(
                    [action      : 'linkIssue',
                     mustRunAfter: ["createIssues", 'createProject'],
                     ext         : ": to check:" + transition,
                     parameters  : [
                             issue  : { -> issue1[] },
                             toIssue: { -> issue2[] },
                             link   : "blocks"
                     ],
                    ]
            )
            if (userType.equalsIgnoreCase("userInFieldReporter")) {
                gint.taskHelper.add([
                        [action    : 'setFieldValue',
                         sleep     : sleep,
                         ext       : ":of reporter to $user before transition issue with: $transition:",
                         parameters: [
                                 issue: { -> issue1[] },
                                 field: "Reporter",
                                 value: user
                         ],
                        ],
                ])
            } else if (userType.equalsIgnoreCase("userInFieldAssignee")) {
                gint.taskHelper.add([
                        [action    : 'setFieldValue',
                         sleep     : sleep,
                         ext       : ":of assignee to $user before transition issue with: $transition:",
                         parameters: [
                                 issue: { -> issue1[] },
                                 field: "Assignee",
                                 value: user
                         ],
                        ],
                ])
            }
            gint.taskHelper.add([
                    [action    : 'getFieldValue',
                     sleep     : sleep,
                     ext       : ": before transition issue with $transition:",
                     parameters: [
                             issue: { -> issue2[] },
                             field: fieldNameToSetOnIssue,
                     ],
                     failData  : [getFieldValueResult],
                    ],
            ])
            gint.taskHelper.add([
                    [action    : 'transitionIssue',
                     sleep     : sleep,
                     ext       : ":by $transition:",
                     parameters: [
                             transition: transition,
                             issue     : { -> issue1[] },
                     ],
                    ],
            ])
            gint.taskHelper.add([
                    [action    : 'getFieldValue',
                     sleep     : sleep,
                     ext       : ": JSM-COPY_ISSUE_FIELDS_POSTFUNCTION check $transition:",
                     parameters: [
                             issue: { -> issue2[] },
                             field: fieldNameToSetOnIssue,
                     ],
                     data      : [getFieldValueResult],
                    ],
            ])
            if (userType.equalsIgnoreCase("currentUser")) {
                gint.taskHelper.add([
                        [action    : 'getIssueHistoryList',
                         sleep     : sleep,
                         ext       : ": JSM-COPY_ISSUE_FIELDS_POSTFUNCTION check $transition:",
                         parameters: [
                                 issue     : { -> issue2[] },
                                 outputType: "text",
                                 select    : ["Field:$fieldNameToSetOnIssue", "To String:$fieldValuesToSetOnIssue"],
                                 columns   : "Author,'To String'"
                         ],
                         data      : ["$addonName", "$fieldValuesToSetOnIssue", ""],
                        ],
                ])
            } else {
                gint.taskHelper.add([
                        [action    : 'getIssueHistoryList',
                         sleep     : sleep,
                         ext       : ": JSM-COPY_ISSUE_FIELDS_POSTFUNCTION check $transition:",
                         parameters: [
                                 issue     : { -> issue2[] },
                                 outputType: "text",
                                 select    : ["Field:$fieldNameToSetOnIssue", "To String:$fieldValuesToSetOnIssue"],
                                 columns   : "Author,'To String'"
                         ],
                         data      : ["$getCurrentUserName", "$fieldValuesToSetOnIssue"],
                        ],
                ])
            }
        }
    }
}

// Verify the set issue fields postfunction for conditional execution any one fields(request participant)
[
        'SetIssueFieldIfConditionTrue'
].each {
    fieldsList.take(1).eachWithIndex { fieldName, fieldValue, i ->
        def fieldNameToSetOnIssue = fieldNameToSet[fieldName]
        def getFieldValueResult = checkFieldValueOnIssue[fieldName]
        def fieldValuesToSetOnIssue = fieldValuesToSet[fieldName]
        def fieldIdToConfigure = fieldValuesToConfigure[fieldName]

        def transition = it + fieldName

        def cloud =  "{$conditionalExecution.true,\"sendNotifications\":false,\"problems\":[],\"targetIssue\":\"$relatedIssue.linkByBlock\",\"fieldsConfig\":[{\"fieldId\":\"$fieldValue\",\"options\":{},\"value\":\"$fieldIdToConfigure\"}],\"runAsType\":\"addonUser\"}"
        def server =  [[ "copyFieldsConfig=[{\"sourceField\":\"assignee\",\"destinationField\":\"$fieldValue\"}]" ] , "selectedLinkTypeSource=$relatedIssue.linkByBlock" , "selectedLinkTypeDestination=$relatedIssue.currentIssue" , conditionalExecution.true , runAsUser.currentUser]

        addTransitionFunctionForJSM(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)

        def issue1 = createIssue([type: 'Task', summary: 'JMWE_Issue'], transition + "issue1")
        def issue2 = createIssue([type: 'Task', summary: 'JMWE_Issue'], transition + "issue2")

        gint.taskHelper.addSetUp(
                [action: 'linkIssue',
                 mustRunAfter: [ "createIssues", 'createProject' ],
                 ext: ": to check:" + transition,
                 parameters: [
                         issue: {->issue1[]},
                         toIssue: { ->issue2[] },
                         link: "blocks"
                 ],
                ]
        )
        ["Low", "High"].each {
            gint.taskHelper.add(
                    [action    : 'setFieldValue',
                     sleep     : sleep,
                     ext       : ":of Priority to $it before transition issue with: $transition",
                     parameters: [
                             issue     : { ->issue1[] },
                             field     : "Priority",
                             value     : it
                     ],
                    ],
            )
            gint.taskHelper.add(
                    [action    : 'getFieldValue',
                     sleep : sleep,
                     ext: ": before transition issue with $transition:when priority is $it",
                     parameters: [
                             issue     : { ->issue2[] },
                             field: fieldNameToSetOnIssue,
                     ] ,
                     failData: [ getFieldValueResult ],
                    ],
            )
            gint.taskHelper.add(
                    [action    : 'transitionIssue',
                     sleep : sleep,
                     ext: ":by $transition:when priority is $it",
                     parameters: [
                             transition: transition,
                             issue     : { ->issue1[] },
                     ],
                    ],
            )
            if(it == "High"){
                gint.taskHelper.add(
                        [action    : 'getFieldValue',
                         sleep : sleep,
                         ext: ":Of $fieldName after transition issue with $transition:when priority is $it",
                         parameters: [
                                 issue     : { ->issue2[] },
                                 field: fieldNameToSetOnIssue,
                         ] ,
                         data: [ getFieldValueResult ],
                        ],
                )
            } else {
                gint.taskHelper.add(
                        [action    : 'getFieldValue',
                         sleep : sleep,
                         ext: ":Of $fieldName after transition issue with $transition:when priority is $it",
                         parameters: [
                                 issue     : { ->issue2[] },
                                 field: fieldNameToSetOnIssue,
                         ],
                         failData: [ getFieldValueResult ],
                        ],
                )
            }
        }
    }
}

/*
Reviewed by Chirag: 13.09.2024 -
1. Set all fields in one transition = DONE.
*/
