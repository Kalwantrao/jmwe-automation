import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}


apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/common/utils.gradle'

def info =  gint.getJiraHelper().getServerInfoWithVerify()
def currentUserKey=info.userKey
def userName = info?.isCloud? user : testUserNameServer
def password = info?.isCloud ? testUserTokenCloud : testUserPasswordServer

def getProjectRoleId = { role ->
    def projectRoleId = [] as LinkedList
    gint.taskHelper.addTearDown(
            action: "getProjectRoleList", ext: " $role",
            mustRunBefore:"addSecurityScheme",
            sleep: 3000,
            parameters:[
                    outputType: "Text",
                    columns: "id",
                    select: "name:$role"
            ],
            finalClosure:{ Task task ->
                def outPut = task.outData;
                projectRoleId.add(outPut[2]);
                gint.helper.log(role + " id is", projectRoleId.getAt(0));
            }
    )
    return projectRoleId;
}

def getAtlassianAddonUserProjectRoleId = { role ->
    def projectRoleId = [] as LinkedList
    gint.taskHelper.addTearDown(
            action: "getProjectRoleList", ext: " $role",
            mustRunBefore:"addSecurityScheme",
            sleep: 3000,
            parameters:[
                    outputType: "Text",
                    columns: "id",
                    select: "name:$role"
            ],
            finalClosure:{ Task task ->
                def outPut = task.outData;
                projectRoleId.add(outPut[2]);
                gint.helper.log(role + " id is", projectRoleId.getAt(0));
            }
    )
    return projectRoleId;
}

def getSecuritySchemeId = {
    def securitySchemeId = [] as LinkedList
    gint.taskHelper.addTearDown(
            action: "getIssueSecuritySchemeList",
            mustRunBefore: ["deleteProject","addSecurityScheme"],
            sleep: 3000,
            parameters:[
                    outputType: "Text",
                    columns: "id",
                    select: "name:$screen"
            ],
            finalClosure:{ Task task ->
                def outPut = task.outData;
                securitySchemeId.add(outPut[2]);
                gint.helper.log(screen + " id is", securitySchemeId.getAt(0));
            }
    )
    return securitySchemeId;
}

def getGroupName = { group, regex ->
    def groupName = [] as LinkedList
    gint.taskHelper.addTearDown(
            [action: "getGroupList",
            mustRunBefore:"addSecurityScheme",
            sleep: 3000,
            parameters:[
                    outputType: "Text",
                    columns: "name",
                    regex: regex
            ],
            finalClosure:{ Task task ->
                def outPut = task.outData;
                groupName.add(outPut[2]);
                gint.helper.log(group + " name is", groupName.getAt(0));
            }
            ]
    )
    return groupName;
}

def ADMIN_GROUP_NAME = getGroupName("jira-admins-group","jira-admins.*")
def jiraAdminGroupName = {->ADMIN_GROUP_NAME.getAt(0).toString().trim()}

def ADMIN_ROLE_ID = getProjectRoleId("Administrators")
def jiraAdminRoleId = {->ADMIN_ROLE_ID.getAt(0).toString().trim()}

def ATLASSIAN_ADDON_PROJECT_ROLE = getAtlassianAddonUserProjectRoleId("atlassian-addons-project-access")
def atlassianAddonsRoleId = {->ATLASSIAN_ADDON_PROJECT_ROLE.getAt(0).toString().trim()}

def SECURITY_SCHEME_ID = getSecuritySchemeId()
def issueSecuritySchemeId = {->SECURITY_SCHEME_ID.getAt(0).toString().trim()}

gint.taskHelper.addTearDown([
        [action: 'deleteProject',
         mustRunBefore: "addSecurityScheme",
         sleep: 2000,
         parameters: [project: TestProject,
                 continue: null
         ]
        ],
        [action: "deleteIssueSecurityScheme",
         mustRunAfter: "deleteProject",
         mustRunBefore: "addSecurityScheme",
                sleep: 3000,
                parameters: [
                        id: issueSecuritySchemeId,
                        continue: null
                        ]
        ]
])

ext.createIssueSecurityScheme = { uriForAction, requestBody ->
    gint.taskHelper.addTearDown(
            name: "addSecurityScheme",
            mustRunAfter: "deleteProject",
            sleepAfter: 5000,
            inline: {
                def URI = new URL(uriForAction)
                def connection = URI.openConnection() as HttpURLConnection
                connection.requestMethod = "POST"
                connection.setRequestProperty("Content-Type", "application/json")
                String auth = "${userName}:${password}"
                String encodedAuth = Base64.getEncoder().encodeToString(auth.getBytes())
                connection.setRequestProperty("Authorization", "Basic " + encodedAuth)

                gint.helper.log("payload", requestBody)

                connection.doOutput = true
                def outputStream = connection.outputStream
                outputStream.write(requestBody.getBytes("UTF-8"))
                outputStream.flush()
                try {
                    def responseCode = connection.responseCode
                    def inputStream
                    if (responseCode >= 200 && responseCode < 400) {
                        inputStream = connection.inputStream
                    } else {
                        inputStream = connection.errorStream
                    }
                    def response = new StringBuilder()
                    def reader = new BufferedReader(new InputStreamReader(inputStream))
                    def line
                    while ((line = reader.readLine()) != null) {
                        response.append(line)
                    }
                    gint.helper.log("Response",response.toString())
                } catch (Exception e) {
                    gint.helper.log("Error", "Error creating shared extension: ${e.message}")
                } finally {
                    connection.disconnect()
                }
            }
    )
}


def url_createIssueSecurityScheme = "/rest/api/3/issuesecurityschemes"
//$atlassianAddonsRoleId
def payload_createIssueSecurityScheme =""" {
  "levels": [
      {
      "isDefault": false,
      "name": "Level1"
      },
      {
      "isDefault": false,
      "members": [
        {
          "parameter": "$jiraAdminGroupName",
          "type": "group"
        },
        {
        "parameter": $atlassianAddonsRoleId,
        "type": "projectrole"
        }
      ],
      "name": "Level3"
    },
      {
      "isDefault": false,
      "members": [
        {
          "parameter": $jiraAdminRoleId,
          "type": "projectrole"
        },
        {
        "parameter": $atlassianAddonsRoleId,
        "type": "projectrole"
        }
      ],
      "name": "Level2"
    },
    {
      "isDefault": false,
      "members": [
        {
          "type": "lead"
        },
        {
        "parameter": $atlassianAddonsRoleId,
        "type": "projectrole"
        }
      ],
      "name": "Level4"
    },
    {
      "isDefault": false,
      "members": [
        {
          "type": "assignee"
        },
        {
        "parameter": $atlassianAddonsRoleId,
        "type": "projectrole"
        }
      ],
      "name": "Level5"
    },
    {
      "isDefault": false,
      "members": [
        {
          "type": "user",
          "parameter": "$currentUserKey"
        },
        {
        "parameter": $atlassianAddonsRoleId,
        "type": "projectrole"
        }
      ],
      "name": "Level6"
    },
    {
      "isDefault": false,
      "members": [
        {
          "type": "reporter"
        },
        {
        "parameter": $atlassianAddonsRoleId,
        "type": "projectrole"
        }
      ],
      "name": "Level7"
    },
    {
      "isDefault": false,
      "members": [
        {
          "type": "sd.customer.portal.only"
        },
        {
        "parameter": $atlassianAddonsRoleId,
        "type": "projectrole"
        }
      ],
      "name": "Level8"
    },
    {
      "isDefault": false,
      "members": [
        {
          "type": "applicationRole"
        },
        {
        "parameter": $atlassianAddonsRoleId,
        "type": "projectrole"
        }
      ],
      "name": "Level9"
    }
  ],
  "name": "$screen"
}"""

createIssueSecurityScheme(url + url_createIssueSecurityScheme, payload_createIssueSecurityScheme)

/*
gint.taskHelper.addTearDown(
        [action    : 'installApp',
         parameters: [
                 app: "@default",
                 version: "11.0.0",
                 continue: null
         ],
        ]
)
 */

gint.taskHelper.addTearDown([
        [action    : 'createProject',
         sleep: 2000,
         mustRunAfter: ["deleteProject","addSecurityScheme"],
         parameters: [
                 project: TestProject,
                 lead: '@Self',
                 template: info?.isCloud? projectTemplateCloud : projectTemplateServer,
                 issueSecurityScheme: issueSecurityScheme
         ],
        ],
        [action    : 'addComponent',ext: ': in project' + TestProject,
                mustRunAfter: "createProject",
         parameters: [
                 project: TestProject,
                 lead: '@Self',
                 component: 'component1'
         ] ,
        ],
]
)


gint.taskHelper.addTearDown("addScreen",[
        [action: 'addScreen',
         ext: ": for transition screen :",
         parameters:[
                 screen: screen,
         ]]
]
)
def fieldsListCloud = [
        "Summary",
        "Issue Type",
        "Components",
        "Description",
        "Reporter",
        "Fix versions",
        "Priority",
        "Labels",
        "Security Level",
        "Environment",
        "Attachment",
        "Affects versions",
        "Linked Issues",
        "Assignee",
        "Epic Link",
        "Parent Link",
        "Epic Name",
        "Parent",
        "Request Type",
        "Request participants",
        "Resolution",
        "Organizations"
]

def fieldsListServer = [
        "Epic Name",
        "Summary",
        "Issue Type",
        "Reporter",
        "Component/s",
        "Description",
        "Fix Version/s",
        "Priority",
        "Labels",
        "Time Tracking",
        "Security Level",
        "Attachment",
        "Due Date",
        "Linked Issues",
        "Assignee",
        "Epic Link",
        "Affects Version/s",
        "Parent Link",
        "Original story points",
        "Story Points",
        "Request Type",
        "Request participants",
        "Resolution",
        "Organizations"
]

def fieldsList = info?.isCloud ? fieldsListCloud : fieldsListServer
fieldsList.eachWithIndex { it, index->
    gint.taskHelper.addTearDown("addScreenFields",[
            [action: 'addScreenFields',
             ext: ": adding field _to screen $screen _ $index",
            dependsOn: 'addScreen',
            parameters:[
                    screen: screen,
                    field: it
            ],
            ]
    ]
    )
}

def usersList = [testUser,testUser1,inactiveAdmin,testAdmin]
usersList.eachWithIndex { it, index ->
    def additionalParams = info?.isCloud? [userEmail: it + "@jmweGintTest.com",] : [ userEmail: it + "@gmail.com",userPassword : it]
    gint.taskHelper.addTearDown("addUsers",[
            [action: 'addUser',
             mustRunAfter: "createProject",
             ext: ": creating user with username _ $it :",
             parameters:[
                     userId: it,
             ] + additionalParams ,
            ]
    ]
    )
}

def projectRolesList = ['testprojectrole','emptyprojectrole']

projectRolesList.each {
    gint.taskHelper.addTearDown("addProjectRoles",[
            [action: 'addProjectRole',
             dependsOn: "addUsers",
             ext: ": creating Project Role _ $it :",
             parameters:[
                     name: it
             ],
            ]
    ]
    )
}

def groupList = ['testgroup']

groupList.each {
    gint.taskHelper.addTearDown("addUserGroups",[
            [action: 'addGroup',
             ext: ": creating group _ $it :",
             dependsOn: "addUsers",
             parameters:[
                     group: it
             ],
            ]
    ]
    )
}

[testUser1].each {
    gint.taskHelper.addTearDown("addProjectRoleActors",[
            [action: 'addProjectRoleActors',
             dependsOn: "addProjectRoles",
             ext: ": user _$it _ adding to project role_ $testRole and group _ $testGroup :",
             parameters:[
                     project: TestProject,
                     role: testRole,
                     userId: it,
                     group: testGroup
             ],
            ]
    ]
    )
}

gint.taskHelper.addTearDown("createScreenScheme",[
        [action: 'createScreenScheme',
         dependsOn: "addScreenFields",
         ext: ": creating screen scheme with name_ $screen and screen _$screen :",
         parameters:[
                 screenScheme: screen,
                 screen: screen,
         ],
        ]
]
)

gint.taskHelper.addTearDown("createIssueTypeScreenScheme",[
        [action: 'createIssueTypeScreenScheme',
         dependsOn: "createScreenScheme",
         ext: ": creating issue type screen scheme with name_ $screen and screen scheme_$screen :",
         parameters:[
                 issueTypeScreenScheme: issueTypeScreenScheme,
                 screenScheme: screen,
         ],
        ]
]
)

gint.taskHelper.addTearDown([
        [action: 'createIssueType',
         parameters:[
                 issueType: "Initiative",
                 type: "standard",
                 continue: null
         ],
        ],
        [action: 'createIssueTypeScheme',
         dependsOn: true,
         parameters:[
                 issueTypeScheme: screen,
                 issueType: "Bug,Task,Story,Sub-task,Epic,Initiative",
                 continue: null
         ],
        ]
]
)



/*

# Use the official OpenJDK 11 base image
FROM openjdk:11

# Set environment variables for Java and Gradle
ENV JAVA_HOME=/usr/local/openjdk-11
ENV PATH=$PATH:$JAVA_HOME/bin
ENV GRADLE_HOME=/opt/gradle
ENV PATH=$PATH:$GRADLE_HOME/bin

# Install Gradle
RUN apt-get update && \
    apt-get install -y wget && \
    wget https://services.gradle.org/distributions/gradle-8.5.0-bin.zip -P /tmp && \
    unzip -d /opt/gradle /tmp/gradle-8.5.0-bin.zip && \
    rm -rf /tmp/*

# Pull the bobswift/acli image
RUN docker pull bobswift/acli

# Set environment variable for ACLI_HOME
ENV ACLI_HOME=/opt/acli

# Create ACLI directory
# RUN mkdir -p $ACLI_HOME

# Add properties to acli.properties
RUN echo "jiraCloud=jira --server https://automationgint.atlassian.net/ --user kalwantrao.patil@appfire.com --password Kalwant$appfire4 --token N2RGb8Vc05tfgLJvWGT56CC6" >> $ACLI_HOME/acli.properties

# Set working directory
WORKDIR /app

# Clone the code from Git
RUN git clone https://github.com/Kalwantrao/jmwe-automation.git .&& \
git checkout cloud

# Run Gradle itestServer task
RUN gradle itestServer

# Your additional instructions, if any

# Specify the command to run your application

 */

//com.innovalog.jmwe.jira-misc-workflow-extensions
