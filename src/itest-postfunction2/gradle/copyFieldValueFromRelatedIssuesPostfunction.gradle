buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/itest-postfunction2/postfunction.gradle'

def functionKey = info?.isCloud? "com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.${testCloudBuild}__CopyFieldValueFromLinkedIssuesFunction" : 'com.innovalog.jmwe.jira-misc-workflow-extensions:CopyFieldValueFromLinkedIssue-function'

relatedIssue.remove("currentIssue")

def sourceField = [
        labels : [ "field=labels" ],
        components : [ "field=components" ]
]

def destField = [
        sameAsSource : [ "destField=" ],
        labels : [ "destField=labels" ],
        components : [ "destField=components" ]
]

def options = [
        noOption : ["copyOnlyIfNotSet=no","ignoreEmptyValue=no","createMissingValues=no","appendValues=no"],
        copyOnlyIfNotSet : "copyOnlyIfNotSet=yes",
        ignoreEmptyValue : "ignoreEmptyValue=yes",
        createMissingValues : "createMissingValues=yes",
        appendValues : "appendValues=yes"
]

relatedIssue.eachWithIndex { key, value, i ->
    def cloud =  "{\"conditionalExecution\":false,\"fieldId\":\"labels\",\"destFieldId\":\"\",\"selectedLinkType\":\"$value\",\"copyOnlyIfNotSet\":false,\"createMissingValues\":false,\"sendNotifications\":false,\"appendValues\":false,\"ignoreEmptyValue\":false,\"runAsType\":\"addonUser\"}"
    def server =  "selectedLinkType=$value" +  sourceField.labels + destField.sameAsSource +  options.noOption + conditionalExecution.false
    addTransitionFunction('valueOfFieldLabelsWillBeCopiedFromTheIssuesRelatedIssues'+i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.eachWithIndex { key, value, i ->
    def cloud =  "{\"conditionalExecution\":false,\"fieldId\":\"labels\",\"destFieldId\":\"\",\"selectedLinkType\":\"$value\",\"copyOnlyIfNotSet\":true,\"createMissingValues\":false,\"sendNotifications\":false,\"appendValues\":false,\"ignoreEmptyValue\":false,\"runAsType\":\"addonUser\"}"
    def server =  "selectedLinkType=$value" +  sourceField.labels + destField.sameAsSource +  options.copyOnlyIfNotSet + conditionalExecution.false
    addTransitionFunction('valueOfFieldLabelsWillBeCopiedFromTheIssuesRelatedIssues_copyOnlyIfNotSet'+i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.eachWithIndex { key, value, i ->
    def cloud =  "{\"conditionalExecution\":false,\"fieldId\":\"labels\",\"destFieldId\":\"\",\"selectedLinkType\":\"$value\",\"copyOnlyIfNotSet\":false,\"createMissingValues\":false,\"sendNotifications\":false,\"appendValues\":false,\"ignoreEmptyValue\":true,\"runAsType\":\"addonUser\"}"
    def server =  "selectedLinkType=$value" +  sourceField.labels + destField.sameAsSource +  options.ignoreEmptyValue + conditionalExecution.false
    addTransitionFunction('valueOfFieldLabelsWillBeCopiedFromTheIssuesRelatedIssues_ignoreEmptyValue'+i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.eachWithIndex { key, value, i ->
    def cloud =  "{\"conditionalExecution\":false,\"fieldId\":\"labels\",\"destFieldId\":\"\",\"selectedLinkType\":\"$value\",\"copyOnlyIfNotSet\":false,\"createMissingValues\":false,\"sendNotifications\":false,\"appendValues\":true,\"ignoreEmptyValue\":false,\"runAsType\":\"addonUser\"}"
    def server =  "selectedLinkType=$value" +  sourceField.labels + destField.sameAsSource +  options.appendValues + conditionalExecution.false
    addTransitionFunction('valueOfFieldLabelsWillBeCopiedFromTheIssuesRelatedIssues_appendValues'+i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.eachWithIndex { key, value, i ->
    def cloud =  "{\"conditionalExecution\":false,\"fieldId\":\"labels\",\"destFieldId\":\"components\",\"selectedLinkType\":\"$value\",\"copyOnlyIfNotSet\":false,\"createMissingValues\":true,\"sendNotifications\":false,\"appendValues\":false,\"ignoreEmptyValue\":false,\"runAsType\":\"addonUser\"}"
    def server =  "selectedLinkType=$value" +  sourceField.labels + destField.components +  options.createMissingValues + conditionalExecution.false
    addTransitionFunction('valueOfFieldLabelsWillBeCopiedFromTheIssuesRelatedIssues_createMissingValues'+i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.eachWithIndex { key, value, i ->
    def cloud =  "{\"conditionalExecution\":true,\"conditionalExecutionScript\":\"$nunjuckExpression.checkPriorityHigh\",\"fieldId\":\"labels\",\"destFieldId\":\"\",\"selectedLinkType\":\"$value\",\"copyOnlyIfNotSet\":false,\"createMissingValues\":false,\"sendNotifications\":false,\"appendValues\":false,\"ignoreEmptyValue\":false,\"runAsType\":\"addonUser\"}"
    def server =  "selectedLinkType=$value" +  sourceField.labels + destField.sameAsSource +  options.noOption + conditionalExecution.true
    addTransitionFunction('valueOfFieldLabelsWillBeCopiedFromTheIssuesRelatedIssues_onlyIfConditionTrue'+i, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

createWorkflowScheme()
createProject()

(1..2).each {
    gint.taskHelper.addSetUp([
            [action: 'addVersion', ext: ': create versions : ' + it,
             parameters: [
                     project: projectName,
                     version: it
             ]
            ],
            [action: 'addComponent', ext: ': create Component : ' + it,
             parameters: [
                     project: projectName,
                     component: 'component' + it
             ],
            ]
    ])
}

def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[]}], 'Sub-task')
def epic = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic')
def issueBelongsToEpic = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic[]} ], 'BelongsToEpic')
def initiative = createIssue([type: 'Initiative', summary: 'JMWE_Issue' ], 'Initiative')
def epic_initiative = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative')
def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def blocks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'blocks')
def clones = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'clones')
def duplicates = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'duplicates')
def relatesTo = createIssue([type: 'Task', summary: 'JMWE_Task'], 'relatesTo')
def jqlIssue = createIssue([type: 'Task', summary: 'JQL_ISSUE'], 'jqlIssue')
updateIssue([issue: {->epic_initiative[]}, field: "Parent Link", value: {->initiative[]}], "parent initiative child epic")

def linkIssuesMap = [
        blocks : {->blocks[]},
        "$clonesLinkType" : {->clones[]},
        duplicates : {->duplicates[]},
        'relates to': {->relatesTo[]}
]

linkIssuesMap.eachWithIndex { key, value, i ->
    linkIssue([issue: {->issueLinks[]}, toIssue: value, link: "$key"], key)
}

def relatedIssuesMapServer = [
        {->parent[]} : {->subtask[]},
        {->subtask[]} : {->parent[]},
        {->epic[]} : {->issueBelongsToEpic[]},
        {->issueBelongsToEpic[]} : {->epic[]},
        {-> initiative[]} : {->epic_initiative[]},
        {->epic_initiative[]} : {-> initiative[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->blocks[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->clones[]},
        {->clones[]} : {->issueLinks[]},
        {->issueLinks[]} : {->duplicates[]},
        {->duplicates[]} : {->issueLinks[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->relatesTo[]} : {->issueLinks[]},
        {->issueLinks[]} : {->jqlIssue[]}
]
def relatedIssuesMapCloud = [
        {->parent[]} : {->subtask[]},
        {->subtask[]} : {->parent[]},
        {->epic[]} : {->issueBelongsToEpic[]},
        {->issueBelongsToEpic[]} : {->epic[]},
        {-> initiative[]} : {->epic_initiative[]},
        {->epic_initiative[]} : {-> initiative[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->blocks[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->clones[]},
        {->clones[]} : {->issueLinks[]},
        {->issueLinks[]} : {->duplicates[]},
        {->duplicates[]} : {->issueLinks[]},
        {->issueLinks[]} : {->relatesTo[]},
]

def relatedIssuesMap = info?.isCloud? relatedIssuesMapCloud: relatedIssuesMapServer
def testLabel1 = "label1"
def testLabel2 = "label2"

// COPY_FIELD_VALUE_FROM_RELATED_ISSUE_Postfunction_TS_01- Verify the copy fields value from related issue postfunction for all the source field, destination field and source issue
[
        'valueOfFieldLabelsWillBeCopiedFromTheIssuesRelatedIssues'
].collect {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'setFieldValue',
                 ext       : ":set labels _$testLabel1 to target issue to check:$it$i",
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: testLabel1
                 ]
                ],
                [action      : 'getFieldValue',
                  sleep: sleep,
                 ext         : ":Validate that the target issue has labels value_ $testLabel1 :" + it +i,
                 parameters  : [
                         issue: value,
                         field: "Labels"
                 ],
                ],
                [action      : 'getFieldValue',
                  sleep: sleep,
                 ext         : ":Validate that the before transition current issue not has labels value_ $testLabel1 :" + it + i,
                 parameters  : [
                         issue: key,
                         field: "Labels"
                 ],
                ],
                [action    : 'transitionIssue',
                 ext       : ': To CHECK_ COPY_FIELD_VALUE_FROM_RELATED_ISSUE_PF :' + it + i,
                  sleep: sleep,
                 parameters: [
                         issue     : key,
                         transition: it+i,
                 ]
                ],
                [action      : 'getFieldValue',
                  sleep: sleep,
                 ext         : ":TC_03: The values of field Labels will be copied from the issues related issue_replacing existing values: " + it + i,
                 parameters  : [
                         issue: key,
                         field: "Labels"
                 ],
                 data        : [/Labels  . . . . . . . . . . . : $testLabel1/],
                ],
                [action    : 'setFieldValue',
                 sleep: sleep,
                 ext       : ":set labels _of current issue empty after validating:$it$i",
                 parameters: [
                         issue: key,
                         field: "Labels",
                         value: " "
                 ]
                ],
                [action    : 'setFieldValue',
                 sleep: sleep,
                 ext       : ":set labels _of target issue empty after validating:$it$i",
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: " "
                 ]
                ],
        ])
    }
}

// COPY_FIELD_VALUE_FROM_RELATED_ISSUE_Postfunction_TS_02- Verify the copy fields value from related issue postfunction for all the source field, destination field and source issue_with copyOnlyIfNotSet_Option_when field is value is set

[
        'valueOfFieldLabelsWillBeCopiedFromTheIssuesRelatedIssues_copyOnlyIfNotSet'
].collect {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ": set labels empty of linked issues before checking _ $it:" + i,
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: " "
                 ]
                ],
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ": set labels value to_ $testLabel1 of linked issue before checking _ $it:" + i,
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: testLabel1
                 ]
                ],
                [action: 'setFieldValue',
                 ext: ":set labels _of current issue to $testLabel2 _to check:$it$i",
                 parameters: [
                         issue: key,
                         field: "Labels",
                         value: testLabel2
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : ":Validate that before transition_ current issue has value of labels_ $testLabel2: "  + it + i,
                 parameters: [
                         issue: key,
                         field: "Labels"
                 ],
                ],
                [action    : 'transitionIssue',
                 ext: ": check COPY_FIELD_VALUE_FROM_RELATED_ISSUE_PF_copyOnlyIfNotSet when field is not empty :" + it+i,
                 sleep: sleep,
                 parameters: [
                         issue     : key,
                         transition: it + i ,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : ":TC_01: The values of field Labels will be copied from the issues linked issue unless the field already has a value when field is not empty :" + it+i,
                 parameters: [
                         issue: key,
                         field: "Labels"
                 ],
                 failData      : [/Labels  . . . . . . . . . . . : $testLabel1/],
                 data      : [/Labels  . . . . . . . . . . . : $testLabel2/],
                ],
                [action: 'setFieldValue',
                 ext: ":set labels of current issue to _empty after checking _$it$i:",
                 sleep: sleep,
                 parameters: [
                         issue: key,
                         field: "Labels",
                         value: " "
                 ]
                ],
                [action    : 'transitionIssue',
                 ext: ": check COPY_FIELD_VALUE_FROM_RELATED_ISSUE_PF_copyOnlyIfNotSet when field is empty :" + it+i,
                 sleep: sleep,
                 parameters: [
                         issue     : key,
                         transition: it+i ,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : ":TC_01: The values of field Labels will be copied from the issues parent unless the field already has a value_ when field is empty :" + it+i,
                 parameters: [
                         issue: key,
                         field: "Labels"
                 ],
                 data      : [/Labels  . . . . . . . . . . . : $testLabel1/],
                ],
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ": set labels empty of subtask after checking _ $it:" + i,
                 parameters: [
                         issue: key,
                         field: "Labels",
                         value: " "
                 ]
                ],
        ])
    }
}

// COPY_FIELD_VALUE_FROM_RELATED_ISSUE_Postfunction_TS_04- Verify the copy fields value from related issue postfunction for all the source field, destination field and source issue_with ignoreEmptyValue_Option_when field value is empty
['valueOfFieldLabelsWillBeCopiedFromTheIssuesRelatedIssues_ignoreEmptyValue'].each {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ": set labels empty of linked issue to check_ $it:"+i,
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: " "
                 ]
                ],
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ": set labels _ $testLabel2 _of current issue to check _ $it:"+i,
                 parameters: [
                         issue: key,
                         field: "Labels",
                         value: testLabel2
                 ]
                ],
                [action    : 'transitionIssue',
                 ext: ': To CHECK_ COPY_FIELD_VALUE_FROM_RELATED_ISSUE_PF_ignoring empty values :' + it+i,
                 sleep: sleep,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : ":TC_04: The values of field Labels will be copied from the issues parent_when parent issue has empty value_ignoring empty values :"  + it+i,
                 parameters: [
                         issue: key,
                         field: "Labels"
                 ],
                 data      : [/Labels  . . . . . . . . . . . : $testLabel2/],
                ],
                [action    : 'transitionIssue',
                 ext: ': To CHECK_COPY_FIELD_VALUE_FROM_RELATED_ISSUE_PF_when not ignoring empty values :' + it+i,
                 sleep: sleep,
                 parameters: [
                         issue     : key,
                         transition: 'valueOfFieldLabelsWillBeCopiedFromTheIssuesRelatedIssues' + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : ":TC_05: The values of field Labels will be copied from the issues parent_replacing existing values_when parent issue has empty field value_not ignoring empty values :"  + it + i,
                 parameters: [
                         issue: key,
                         field: "Labels"
                 ],
                 failData      : [/Labels  . . . . . . . . . . . : $testLabel2/],
                ],
        ])
    }
}

// COPY_FIELD_VALUE_FROM_RELATED_ISSUE_Postfunction_TS_06- Verify the copy fields value from related issue postfunction for all the source field, destination field and source issue_with createMissingValues_Option_when postfunction should create missing field value

[
        'valueOfFieldLabelsWillBeCopiedFromTheIssuesRelatedIssues_createMissingValues'
].each {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        def getComponentValue = info?.isCloud ? "Components  . . . . . . . . . : $it$i" : "Component/s . . . . . . . . . : $it$i"
        gint.taskHelper.add([
                [action    : 'setFieldValue',
                 sleep: sleep,
                 ext: ": set labels to_ $it $i related issue to check createMissingValues_option of COPY_FIELD_VALUE_FROM_RELATED_ISSUE_PF  : ",
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: it + i
                         ]
                ],
                [action    : 'transitionIssue',
                 sleep: sleep,
                 ext: ":COPY_FIELD_VALUE_FROM_RELATED_ISSUE_Postfunction_TS_06_TC_$i Verify the copy fields value from related issue postfunction for all the source field, destination field and source issue_with createMissingValues_Option_when postfunction should create missing field value:after transition issue with :" + it + i,
                 sleepAfter: 3000,
                 parameters: [
                         issue     : key,
                         transition: it+i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext: ":COPY_FIELD_VALUE_FROM_RELATED_ISSUE_Postfunction_TS_06_TC_$i Verify the copy fields value from related issue postfunction for all the source field, destination field and source issue_with createMissingValues_Option_when postfunction should create missing field value:after transition issue with :" + it + i,
                 parameters: [
                         issue: key,
                         field: "Components"
                 ],
                 data      : [getComponentValue],
                ],
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ': labels to target issues to check after transition issue : ' + it+ i,
                 parameters: [
                         issue: key,
                         field: "Labels",
                         value: " "
                 ]
                ],
        ])
    }
}

// COPY_FIELD_VALUE_FROM_RELATED_ISSUE_Postfunction_TS_07 Verify the copy fields value from related issue postfunction for all the source field, destination field and source issue_with appendValues_Option_when postfunction should append the field value,

['valueOfFieldLabelsWillBeCopiedFromTheIssuesRelatedIssues_appendValues'].each {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        gint.taskHelper.add([
                [action    : 'setFieldValue',
                 sleep: sleep,
                 ext: ": set labels to empty value of current issue to check appendValue_option of COPY_FIELD_VALUE_FROM_RELATED_ISSUE_PF  : "+ it + i,
                 parameters: [
                         issue: key,
                         field: "Labels",
                         value: " "
                 ]
                ],
                [action    : 'setFieldValue',
                 sleep: sleep,
                 ext: ": set labels to $testLabel2 value of parent issue to check appendValue_option of COPY_FIELD_VALUE_FROM_RELATED_ISSUE_PF  : "+it+i,
                 parameters: [
                         issue: key,
                         field: "Labels",
                         value: testLabel2
                 ]
                ],
                [action    : 'setFieldValue',
                 sleep: sleep,
                 ext: ": set labels to $testLabel1 of subtask issue to check appendValues_option of COPY_FIELD_VALUE_FROM_RELATED_ISSUE_PF  : "+ it+i,
                 parameters: [
                         issue: value,
                         field: "Labels",
                         value: testLabel1
                 ]
                ],
                [action    : 'transitionIssue',
                 sleep: sleep,
                 ext: ": COPY_FIELD_VALUE_FROM_RELATED_ISSUE_Postfunction_TS_07_TC_ $i _ Verify the copy fields value from related issue postfunction for all the source field, destination field and source issue_with appendValues_Option_when postfunction should append the field value:after transition the issue with: " + it +i,
                 sleepAfter: 3000,
                 parameters: [
                         issue     : key,
                         transition: it+i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext: ": COPY_FIELD_VALUE_FROM_RELATED_ISSUE_Postfunction_TS_07_TC_ $i _ Verify the copy fields value from related issue postfunction for all the source field, destination field and source issue_with appendValues_Option_when postfunction should append the field value:after transition the issue with: " + it +i,
                 parameters: [
                         issue: key,
                         field: "Labels"
                 ],
                 data      : ["Labels  . . . . . . . . . . . : $testLabel1 $testLabel2"],
                ],
                [action    : 'setFieldValue',
                 sleep: sleep,
                 ext: ": set labels to empty value of current issues after checking $it $i _COPY_FIELD_VALUE_FROM_RELATED_ISSUE_PF  : "+i,
                 parameters: [
                         issue: key,
                         field: "Labels",
                         value: " "
                 ]
                ],

        ])
    }
}

// COPY_FIELD_VALUE_FROM_RELATED_ISSUE_Postfunction_TS_08- Verify the copy fields value from related issue postfunction for all the source field, destination field and source issue

['valueOfFieldLabelsWillBeCopiedFromTheIssuesRelatedIssues_onlyIfConditionTrue'].collect {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        ["Low","High"].each {priority ->
            def transition = it + i
            gint.taskHelper.add([
                    [action: 'setFieldValue',
                     sleep: sleep,
                     ext: ": set priority to $priority of related issue to check conditional execution_option of COPY_FIELD_VALUE_To_PARENT_ISSUE_PF  :$transition",
                     parameters: [
                             issue: key,
                             field: "Priority",
                             value: priority
                     ]
                    ],
                    [action: 'setFieldValue',
                     sleep: sleep,
                     ext: ":Of labels to target issue:$testLabel1:before transition issue with:$transition:when priority is $priority",
                     parameters: [
                             issue: value,
                             field: "Labels",
                             value: testLabel1
                     ]
                    ],
                    [action: 'setFieldValue',
                     sleep: sleep,
                     ext: ":Of labels to target issue:empty:before transition issue with:$transition:when priority is $priority",
                     parameters: [
                             issue: key,
                             field: "Labels",
                             value: " "
                     ]
                    ],
                    [action    : 'transitionIssue',
                     ext       : ":COPY_FIELD_VALUE_FROM_RELATED_ISSUE_Postfunction_TS_08_TC_ $i Verify the copy fields value from related issue postfunction for all the source field, destination field and source issue:$transition:when priority is $priority",
                     sleep: sleep,
                     parameters: [
                             issue     : key,
                             transition: it+i,
                     ]
                    ],
            ])
            if(priority == "High"){
                gint.taskHelper.add([
                        [action    : 'getFieldValue',
                         sleep: sleep,
                         ext       : ":COPY_FIELD_VALUE_FROM_RELATED_ISSUE_Postfunction_TS_09_TC_ $i Verify the copy fields value from related issue postfunction for all the source field, destination field and source issue:  when priority is $priority:"+ it + i,
                         parameters: [
                                 issue: key,
                                 field: "Labels"
                         ],
                         data      : [/Labels  . . . . . . . . . . . : $testLabel1/],
                        ],
                ])
            }else {
                gint.taskHelper.add([
                        [action    : 'getFieldValue',
                         sleep: sleep,
                         ext       : ":COPY_FIELD_VALUE_FROM_RELATED_ISSUE_Postfunction_TS_09_TC_ $i Verify the copy fields value from related issue postfunction for all the source field, destination field and source issue:  when priority is $priority:"+ it + i,
                         parameters: [
                                 issue: key,
                                 field: "Labels"
                         ],
                         failData      : [/Labels  . . . . . . . . . . . : $testLabel1/],
                        ],
                ])
            }
            gint.taskHelper.add([
                    [action: 'setFieldValue',
                     sleep: sleep,
                     ext: ": labels to current issue empty to check after transition issue :when priority is $priority:" + it+ i,
                     parameters: [
                             issue: key,
                             field: "Labels",
                             value: " "
                     ]
                    ],
            ])
        }
    }
}




