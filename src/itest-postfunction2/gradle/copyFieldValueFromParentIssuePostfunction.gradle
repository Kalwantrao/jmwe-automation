buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/itest-postfunction2/postfunction.gradle'

def functionKey = info?.isCloud? "com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.${testCloudBuild}__CopyFieldValueFromParentFunction" : 'com.innovalog.jmwe.jira-misc-workflow-extensions:CopyFieldValueFromParent-function'

def sourceField = [
       'labels' ,
       'components' ,
       'assignee',
       'versions',
       'fixVersions',
       'priority'
]

def destField = [
        sameAsSource : [ "destField=" ],
        labels : [ "destField=labels" ],
        components : [ "destField=components" ]
]

def options = [
        noOption : ["copyOnlyIfNotSet=no","ignoreEmptyValue=no","createMissingValues=no","appendValues=no"],
        copyOnlyIfNotSet : "copyOnlyIfNotSet=yes",
        ignoreEmptyValue : "ignoreEmptyValue=yes",
        createMissingValues : "createMissingValues=yes",
        appendValues : "appendValues=yes"
]

sourceField.each { fieldsName ->
    def transition = 'valueOfFieldLabelsWillBeCopiedFromTheIssuesParent' + fieldsName
    def server =  ["field=$fieldsName" , destField.sameAsSource ,  options.noOption , conditionalExecution.false]
    def cloud =  "{\"conditionalExecution\":false,\"fieldId\":\"$fieldsName\",\"destFieldId\":\"\",\"copyOnlyIfNotSet\":false,\"createMissingValues\":false,\"sendNotifications\":true,\"appendValues\":false,\"ignoreEmptyValue\":false,\"runAsType\":\"addonUser\"}"
    addTransitionFunction(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent_copyOnlyIfNotSet'].each {
    def server =  ["field=labels" , destField.sameAsSource ,  options.copyOnlyIfNotSet , conditionalExecution.false]
    def cloud =  "{\"conditionalExecution\":false,\"fieldId\":\"labels\",\"destFieldId\":\"\",\"copyOnlyIfNotSet\":true,\"createMissingValues\":false,\"sendNotifications\":true,\"appendValues\":false,\"ignoreEmptyValue\":false,\"runAsType\":\"addonUser\"}"
    addTransitionFunction(it, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}
['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent_ignoreEmptyValue'].each {
    def server =  ["field=labels" , destField.sameAsSource,  options.ignoreEmptyValue , conditionalExecution.false]
    def cloud =  "{\"conditionalExecution\":false,\"fieldId\":\"labels\",\"destFieldId\":\"\",\"copyOnlyIfNotSet\":false,\"createMissingValues\":false,\"sendNotifications\":true,\"appendValues\":false,\"ignoreEmptyValue\":true,\"runAsType\":\"addonUser\"}"
    addTransitionFunction(it, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent_createMissingValues'].each {
    def server =  ["field=labels" , destField.components ,  options.createMissingValues , conditionalExecution.false]
    def cloud =  "{\"conditionalExecution\":false,\"fieldId\":\"labels\",\"destFieldId\":\"components\",\"copyOnlyIfNotSet\":false,\"createMissingValues\":true,\"sendNotifications\":true,\"appendValues\":false,\"ignoreEmptyValue\":false,\"runAsType\":\"addonUser\"}"
    addTransitionFunction(it, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent_appendValues'].each {
    def server =  ["field=labels" , destField.sameAsSource ,  options.appendValues , conditionalExecution.false]
    def cloud =  "{\"conditionalExecution\":false,\"fieldId\":\"labels\",\"destFieldId\":\"\",\"copyOnlyIfNotSet\":false,\"createMissingValues\":false,\"sendNotifications\":true,\"appendValues\":true,\"ignoreEmptyValue\":false,\"runAsType\":\"addonUser\"}"
    addTransitionFunction(it, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent_ifConditionTrue'].each {
    def server =  ["field=labels" , destField.sameAsSource ,  options.noOption , conditionalExecution.true]
    def cloud =  "{\"conditionalExecution\":true,\"conditionalExecutionScript\":\"$nunjuckExpression.checkPriorityHigh\",\"fieldId\":\"labels\",\"destFieldId\":\"\",\"copyOnlyIfNotSet\":false,\"createMissingValues\":false,\"sendNotifications\":true,\"appendValues\":false,\"ignoreEmptyValue\":false,\"runAsType\":\"addonUser\"}"
    addTransitionFunction(it, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

createWorkflowScheme()
createProject()

(1..2).each {
    gint.taskHelper.addSetUp([
            [action: 'addVersion', ext: ': create versions : ' + it,
             parameters: [
                     project: projectName,
                     version: it
             ]
            ],
            [action: 'addComponent', ext: ': create Component : ' + it,
             parameters: [
                     project: projectName,
                     component: 'component' + it
             ],
            ]
    ])
}
// set issue status to In Progress

def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[]}], 'Sub-task')

def testLabel1 = "testLabel1"
def testLabel2 = "testLabel2"
def createMissingValue = "createMissingValueOfComponent"


['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent'].collect {
    sourceField.each { field ->
        def transition = it + field
        def fieldToCheck;
        def data;
        def fieldValue;
        if(field == "labels") {
            fieldToCheck = "Labels"
            fieldValue = testLabel1
            data = "Labels  . . . . . . . . . . . : $testLabel1"
        }
        else if(field == "components") {
            fieldToCheck = info?.isCloud? "Components" : "Component/s"
            fieldValue = 'component1'
            data = info?.isCloud? "Components  . . . . . . . . . : component1" : "Component/s . . . . . . . . . : component1"
        }
        else if(field == "versions") {
            fieldToCheck = info?.isCloud? "Affects versions" : "AffectsVersions"
            fieldValue = 1
            data = info?.isCloud? "Affects versions  . . . . . . : 1" : "Affects Version/s . . . . . . : 1"
        }else if(field == "assignee") {
            fieldToCheck = "Assignee"
            fieldValue = user
            data = "Assignee  . . . . . . . . . . : $getCurrentUserName"
        }
        else if(field == "fixVersions") {
            fieldToCheck = info?.isCloud? "Fix versions" : "FixVersions"
            fieldValue = 1
            data = info?.isCloud? "Fix versions  . . . . . . . . : 1" : "Fix Version/s . . . . . . . . : 1"
        }
        else if(field == "priority") {
            fieldToCheck = "Priority"
            fieldValue = 'High'
            data = "Priority  . . . . . . . . . . : High"
        }
        gint.taskHelper.add([
                [action    : 'setFieldValue',
                 ext       : ":set  _$fieldValue to parent issue of subtask to check:$transition",
                 parameters: [
                         issue: { -> parent[] },
                         field: fieldToCheck,
                         value: fieldValue
                 ]
                ],
                [action      : 'getFieldValue',
                 sleep       : sleep,
                 ext         : ":Validate that the parent issue has value_ $fieldValue :" + transition,
                 parameters  : [
                         issue: { -> parent[] },
                         field: fieldToCheck
                 ],
                ],
                [action      : 'getFieldValue',
                 sleep       : sleep,
                 ext         : ":Validate that the before transition subtask not has value_$fieldValue :" + transition,
                 parameters  : [
                         issue: { -> subtask[] },
                         field: fieldToCheck
                 ],
                 failData : [ data ]
                ],
                [action    : 'transitionIssue',
                 ext       : ': To CHECK_ COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF :' + transition,
                 sleep     : sleep,
                 parameters: [
                         issue     : { -> subtask[] },
                         transition: transition,
                 ]
                ],
                [action      : 'getFieldValue',
                 sleep       : sleep,
                 ext         : ":TC_03: The values of field $fieldValue _ will be copied from the issues parent_replacing existing values: " + transition,
                 parameters  : [
                         issue: { -> subtask[] },
                         field: fieldToCheck
                 ],
                 data        : [data],
                ],
        ])
    }
}

['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent_copyOnlyIfNotSet'].collect {
    gint.taskHelper.add([
            [action: 'setFieldValue',
             ext: ":set labels _of subtask to $testLabel2 _to check:$it",
             parameters: [
                     issue: { ->subtask[] },
                     field: "Labels",
                     value: testLabel2
             ]
            ],
            [action    : 'getFieldValue',
             sleep: sleep,
             ext       : ":Validate that before transition_ subtask has value of labels_ $testLabel2: "  + it,
             parameters: [
                     issue: { ->subtask[] },
                     field: "Labels"
             ],
                    data: [ "Labels  . . . . . . . . . . . : $testLabel2" ],
            ],
            [action    : 'transitionIssue',
             ext: ": check COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF_copyOnlyIfNotSet when field is not empty :" + it,
             sleep: sleep,
             parameters: [
                     issue     : { ->subtask[] },
                     transition: it ,
             ]
            ],
            [action    : 'getFieldValue',
             sleep: sleep,
             ext       : ":TC_01: The values of field Labels will be copied from the issues parent unless the field already has a value when field is not empty :" + it,
             parameters: [
                     issue: { ->subtask[] },
                     field: "Labels"
             ],
             failData      : [/Labels  . . . . . . . . . . . : $testLabel1/],
             data      : [/Labels  . . . . . . . . . . . : $testLabel2/],
            ],
            [action: 'setFieldValue',
             ext: ":set labels of subtask to _empty after checking _$it:",
             sleep: sleep,
             parameters: [
                     issue: { ->subtask[] },
                     field: "Labels",
                     value: " "
             ]
            ],
            [action    : 'transitionIssue',
             ext: ": check COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF_copyOnlyIfNotSet when field is empty :" + it,
             sleep: sleep,
             parameters: [
                     issue     : { ->subtask[] },
                     transition: it ,
             ]
            ],
            [action    : 'getFieldValue',
             sleep: sleep,
             ext       : ":TC_01: The values of field Labels will be copied from the issues parent unless the field already has a value_ when field is empty :" + it,
             parameters: [
                     issue: { ->subtask[] },
                     field: "Labels"
             ],
             data      : [/Labels  . . . . . . . . . . . : $testLabel1/],
            ],
            [action: 'setFieldValue',
             sleep: sleep,
             ext: ": set labels empty of subtask after checking _ $it:",
             parameters: [
                     issue: { ->subtask[] },
                     field: "Labels",
                     value: " "
                     ]
            ]
    ])
}

['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent_ignoreEmptyValue'].each {
    gint.taskHelper.add([
            [action: 'setFieldValue',
             sleep: sleep,
             ext: ": set labels empty of parent issue to check_ $it:",
             parameters: [
                     issue: { ->parent[] },
                     field: "Labels",
                     value: " "
             ]
            ],
            [action: 'setFieldValue',
             sleep: sleep,
             ext: ": set labels _ $testLabel2 _of subtask to check _ $it:",
             parameters: [
                     issue: { ->subtask[] },
                     field: "Labels",
                     value: testLabel2
             ]
            ],
            [action    : 'transitionIssue',
             ext: ': To CHECK_ COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF_ignoring empty values :' + it,
             sleep: sleep,
             parameters: [
                     issue     : { ->subtask[] },
                     transition: it,
             ]
            ],
            [action    : 'getFieldValue',
             sleep: sleep,
             ext       : ":TC_04: The values of field Labels will be copied from the issues parent_when parent issue has empty value_ignoring empty values :"  + it,
             parameters: [
                     issue: { ->subtask[] },
                     field: "Labels"
             ],
             data      : [/Labels  . . . . . . . . . . . : $testLabel2/],
            ],
            [action    : 'transitionIssue',
             ext: ': To CHECK_ COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF_when not ignoring empty values :' + it,
             sleep: sleep,
             parameters: [
                     issue     : { ->subtask[] },
                     transition: 'valueOfFieldLabelsWillBeCopiedFromTheIssuesParentlabels',
             ]
            ],
            [action    : 'getFieldValue',
             sleep: sleep,
             ext       : ":TC_05: The values of field Labels will be copied from the issues parent_replacing existing values_when parent issue has empty field value_not ignoring empty values :"  + it,
             parameters: [
                     issue: { ->subtask[] },
                     field: "Labels"
             ],
             failData      : [/Labels  . . . . . . . . . . . : $testLabel2/],
            ],
    ])
}

['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent_createMissingValues'].each {
    def getComponentValue = info?.isCloud ? "Components  . . . . . . . . . : $createMissingValue" : "Component/s . . . . . . . . . : $createMissingValue"
    gint.taskHelper.add([
            [action: 'setFieldValue',
             sleep: sleep,
             ext: ": set labels to empty of parent issue to check createMissingValues_option of COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF  :$it ",
             parameters: [
                     issue: { ->parent[] },
                     field: "Labels",
                     value: " "
             ]
            ],
            [action: 'setFieldValue',
            sleep: sleep,
            ext: ": set labels to $createMissingValue of parent issue to check createMissingValues_option of COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF  : $it",
            parameters: [
                    issue: { ->parent[] },
                    field: "Labels",
                    value: createMissingValue
            ]
            ],
            [action    : 'transitionIssue', ext: ': To CHECK_ COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF_when create missing values :' + it,
             sleep: sleep,
             parameters: [
                     issue     : { ->subtask[] },
                     transition: it,
             ]
            ],
            [action    : 'getFieldValue',
             sleep: sleep,
             ext       : ":TC_06: The values of field Labels will be copied from the issues parent_replacing existing values_when parent issue has empty field value_not ignoring empty values :"  + it,
             parameters: [
                     issue: { ->subtask[] },
                     field: "components"
             ],
             data      : [ getComponentValue ],
            ],
    ])
}

['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent_appendValues'].each {
        gint.taskHelper.add([
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ": set labels to empty value of parent issue to check appendValue_option of COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF  : $it",
                 parameters: [
                         issue: { ->subtask[] },
                         field: "Labels",
                         value: " "
                 ]
                ],
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ": set labels to $testLabel2 value of parent issue to check appendValue_option of COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF :$it ",
                 parameters: [
                         issue: { ->subtask[] },
                         field: "Labels",
                         value: testLabel2
                 ]
                ],
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ": set labels to $testLabel1 of subtask issue to check appendValues_option of COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF :$it ",
                 parameters: [
                         issue: { ->parent[] },
                         field: "Labels",
                         value: testLabel1
                 ]
                ],
                [action    : 'transitionIssue',
                 ext: ': To CHECK_ COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF_when append values :' + it,
                 sleep: sleep,
                 parameters: [
                         issue     : { -> subtask[] },
                         transition: it,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : ":TC_07: The values of field Labels will be copied from the issues parent_replacing existing values_when parent issue has empty field value_append values :" + it,
                 parameters: [
                         issue: { -> subtask[] },
                         field: "Labels"
                 ],
                 data      : ["Labels  . . . . . . . . . . . : $testLabel1 $testLabel2"],
                ],
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ": set labels to empty of subtask _after checking:$it ",
                 parameters: [
                         issue: { ->subtask[] },
                         field: "Labels",
                         value: " "
                 ]
                ],
        ])
}

['valueOfFieldLabelsWillBeCopiedFromTheIssuesParent_ifConditionTrue'].each {
    gint.taskHelper.add([
            [action: 'setFieldValue',
             sleep: sleep,
             ext: ": set priority to Low of subtask to check conditional execution true_option of COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF  : ",
             parameters: [
                     issue: { ->subtask[] },
                     field: "Priority",
                     value: "Low"
             ]
            ],
            [action    : 'transitionIssue',
             ext: ': To CHECK_ COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF_when condition false :' + it,
             sleep: sleep,
             parameters: [
                     issue     : { -> subtask[] },
                     transition: it,
             ]
            ],
            [action    : 'getFieldValue',
             sleep: sleep,
             ext       : ":TC_08: The values of field Labels will not be copied from the issues parent_replacing existing values_when condition returns false for issue :" + it,
             parameters: [
                     issue: { -> subtask[] },
                     field: "Labels"
             ],
             failData      : ["Labels  . . . . . . . . . . . : $testLabel1"],
            ],
            [action: 'setFieldValue',
             sleep: sleep,
             ext: ": set priority to High of subtask to check conditional execution true_option of COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF  : ",
             parameters: [
                     issue: { ->subtask[] },
                     field: "Priority",
                     value: "High"
             ]
            ],
            [action    : 'transitionIssue',
             ext: ': To CHECK_ COPY_FIELD_VALUE_FROM_PARENT_ISSUE_PF_when condition true :' + it,
             sleep: sleep,
             parameters: [
                     issue     : { -> subtask[] },
                     transition: it,
             ]
            ],
            [action    : 'getFieldValue',
             sleep: sleep,
             ext       : ":TC_09: The values of field Labels will be copied from the issues parent_replacing existing values_when condition returns true for issue :" + it,
             parameters: [
                     issue: { -> subtask[] },
                     field: "Labels"
             ],
             data      : ["Labels  . . . . . . . . . . . : $testLabel1"],
            ],
    ])
}

