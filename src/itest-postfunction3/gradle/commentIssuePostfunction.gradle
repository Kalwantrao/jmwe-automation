buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/itest-postfunction3/postfunction.gradle'

def relatedIssue = info?.isCloud ? relatedIssueCloud : relatedIssueServer

def functionKey = info?.isCloud ? "com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.${testCloudBuild}__CommentIssueFunction" : 'com.innovalog.jmwe.jira-misc-workflow-extensions:commentIssue-function'

String addCommentByTemplate = "add_comment_to_related_issue_by_template"
String addCommentByExpression = "add_comment_to_related_issue_by_expression"
String addCommentIfConditionTrue = "add_comment_to_related_issue_ifConditionTrue"
String addCommentVisibleToAdminGroup = 'add_comment_visible_to_admin_group_users'
String addCommentVisibleToTestGroup = 'add_comment_visible_to_test_group_users'
String addCommentVisibleToAdminProjectRole = 'add_comment_visible_to_admin_project_role_users'
String addCommentVisibleToTestProjectRole = 'add_comment_visible_to_test_project_role_users'
String addCommentRunAsUser = 'add_comment_run_as_'

def commentVisibility = [
        notSelected : [ "restrictToGroup=", "restrictToProjectRole=" ],
        jiraAdminGroups : [ "restrictToGroup=$jiraAdminGrooup", "restrictToProjectRole=" ],
        jiraAdminRoles : [ "restrictToGroup=", "restrictToProjectRole=$jiraAdminRoleId" ],
        testGroupUsers : ["restrictToGroup=$testGroup", "restrictToProjectRole="],
        testProjectRoleUsers : ["restrictToGroup=$testProjectRoleId", "restrictToProjectRole="]
]

relatedIssue.eachWithIndex { key, value, i ->
    def transition = addCommentByTemplate + i
    def server =  "valueType=template" + "value=$transition" + "selectedLinkType=$value"
    def cloud =  "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.false,\"targetIssue\":\"$value\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",$runAsUser.currentUser}"
    addTransitionFunction( transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def transition = addCommentByExpression + i
    def server =  "valueType=expression" + "value=$groovyExpression.getDescription" + "selectedLinkType=$value"
    if(!isCloud) {
        addTransitionFunction(transition, 'postfunction', server, functionKey)
    }
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def transition = addCommentIfConditionTrue + i
    def cloud =  "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.true,\"targetIssue\":\"$value\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",\"runAsType\":\"currentUser\"}"
    def server =  "valueType=template" + "value=$transition" + commentVisibility.notSelected+  "selectedLinkType=$value" + conditionalExecution.true + runAsUser.currentUser
    addTransitionFunction( transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def transition = addCommentVisibleToAdminProjectRole + i
    def cloud =  "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.false,\"targetIssue\":\"$value\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToProjectRoleId\":$jiraAdminRoleCloud,\"runAsType\":\"currentUser\"}"
    def server =  "valueType=template" + "value=$transition" + commentVisibility.jiraAdminRoles +  "selectedLinkType=$value" + conditionalExecution.false + runAsUser.currentUser
    addTransitionFunction( transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def transition = addCommentVisibleToAdminGroup + i
    def cloud =  "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.false,\"targetIssue\":\"$value\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"$jiraAdminGroupCloud\",\"runAsType\":\"currentUser\"}"
    def server =  "valueType=template" + "value=$transition" + commentVisibility.jiraAdminGroups +  "selectedLinkType=$value" + conditionalExecution.false + runAsUser.currentUser
    addTransitionFunction( transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def transition = addCommentVisibleToTestGroup + i
    def cloud =  "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.false,\"targetIssue\":\"$value\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"$testGroupCloud\",\"runAsType\":\"currentUser\"}"
    def server =  "valueType=template" + "value=$transition" + commentVisibility.testGroupUsers +  "selectedLinkType=$value" + conditionalExecution.false + runAsUser.currentUser
    addTransitionFunction( transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.take(1).eachWithIndex { key, value, i ->
    def transition = addCommentVisibleToTestProjectRole + i
    def cloud =  "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.false,\"targetIssue\":\"$value\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToProjectRoleId\":$testProjectRoleCloud,\"runAsType\":\"currentUser\"}"
    def server =  "valueType=template" + "value=$transition" + commentVisibility.testProjectRoleUsers +  "selectedLinkType=$value" + conditionalExecution.false + runAsUser.currentUser
    addTransitionFunction( transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

runAsUser.remove("currentUser")
runAsUser.eachWithIndex { usersType, fieldValues, idx ->
    relatedIssue.take(1).eachWithIndex { key, value, i ->
        def transition = addCommentRunAsUser + usersType + i
        def cloud =  "postFunction.config-18b36491-f556-48cd-b476-7b82f02c7249={$conditionalExecution.false,\"targetIssue\":\"$value\",\"comment\":\"$transition\",\"restrictToInternal\":false,\"restrictToGroup\":\"\",$fieldValues}"
        def server =  "valueType=template" + "value=$transition" + commentVisibility.notSelected + "selectedLinkType=$value" + conditionalExecution.false + fieldValues
        addTransitionFunction(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
        if (!isCloud) {
            moveTransitionFunction(transition, 4)
        }
    }
}

createWorkflowScheme()
createProject()

def currentIssue = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'currentIssue')
def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[]}], 'Sub-task')
def epic = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic')
def issueBelongsToEpic = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic[]} ], 'BelongsToEpic')
def initiative = createIssue([type: 'Initiative', summary: 'JMWE_Issue' ], 'Initiative')
def epic_initiative = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative')
def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def blocks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'blocks')
def clones = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'clones')
def duplicates = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'duplicates')
def relatesTo = createIssue([type: 'Task', summary: 'JMWE_Task'], 'relatesTo')
def jqlIssue = createIssue([type: 'Task', summary: 'JQL_ISSUE'], 'jqlIssue')
updateIssue([issue: {->epic_initiative[]}, field: "Parent Link", value: {->initiative[]}], "parent initiative child epic")

def linkIssuesMap = [
        blocks : {->blocks[]},
        "$clonesLinkType" : {->clones[]},
        duplicates : {->duplicates[]},
        'relates to': {->relatesTo[]}
]

linkIssuesMap.eachWithIndex { key, value, i ->
    linkIssue([issue: {->issueLinks[]}, toIssue: value, link: "$key"], key)
}

def relatedIssuesMap = [
        {->currentIssue[]} : {->currentIssue[]},
        {->parent[]} : {->subtask[]},
        {->subtask[]} : {->parent[]},
        {->epic[]} : {->issueBelongsToEpic[]},
        {->issueBelongsToEpic[]} : {->epic[]},
        {-> initiative[]} : {->epic_initiative[]},
        {->epic_initiative[]} : {-> initiative[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->blocks[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->clones[]},
        {->clones[]} : {->issueLinks[]},
        {->issueLinks[]} : {->duplicates[]},
        {->duplicates[]} : {->issueLinks[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->relatesTo[]} : {->issueLinks[]},
        {->issueLinks[]} : {->jqlIssue[]}
]

[
        addCommentByTemplate
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        def getCurrentUserName1 = info?.isCloud? info?.userDisplayName : user
        def transition = it+i
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 ext: ":By $transition:",
                 sleep: sleep,
                 parameters: [
                         issue     : key,
                         transition: transition,
                 ],
                ],
        ])
        gint.taskHelper.add([
                [action    : 'getComments',
                 ext       : ":verify the comment added by template after transition issue with :" +transition,
                 sleep     : sleep,
                 parameters: [
                         issue: value
                 ],
                 data      : [ /$transition/  ],
                ]
        ])
    }
}

runAsUser.eachWithIndex { userToCheck, fieldsValues, idx ->
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        def transition = addCommentRunAsUser + userToCheck + i
        def getCurrentUserName1 = info?.isCloud? info?.userDisplayName : user
        if(userToCheck == "userInFieldAssignee"){
            gint.taskHelper.add([
                    [action: 'setFieldValue' ,
                     ext: " : Of assignee of current issue to $user before transition issue with: " + transition,
                     sleep: sleep,
                     parameters: [
                             issue: key,
                             field : "Assignee",
                             value: user
                     ],
                    ],
            ])
        }
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 ext: ":With transition $transition:when user in field assignee is $testUser",
                 sleep: sleep,
                 parameters: [
                         issue     : key,
                         transition: transition,
                 ],
                ],
                [action: 'getComments',
                 ext: ":After transition issue with_ $transition and user in field assignee is $testUser:",
                 sleep: sleep,
                 parameters: [
                         issue: value
                 ],
                 data:[   /$getCurrentUserName1 added a comment on/,
                          /$transition/
                 ],
                ]
        ])
    }
}

[
        addCommentByExpression
].each {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        def transition = it+i
        if (!isCloud) {
            gint.taskHelper.add([
                    [action    : "setFieldValue",
                     sleep: defaultSleepTime,
                     ext: ":Of description of target issue:before transition issue with_ $transition ",
                     parameters: [
                             issue: key,
                             field: "Description",
                             value: transition
                     ]
                    ],
                    [action    : 'transitionIssue',
                     ext       : ":by transition_ $transition ",
                     sleep     : defaultSleepTime,
                     parameters: [
                             issue     : key,
                             transition: transition,
                     ],
                    ],
                    [action    : 'getComments',
                     ext       : " : verify comment added after transition issue with $transition :",
                     sleep     : defaultSleepTime,
                     parameters: [
                             issue: value
                     ],
                     data      : [/$getCurrentUserName added a comment on/,
                                  /$transition/
                     ],
                    ]
            ])
        }
    }
}

[
        addCommentVisibleToTestProjectRole,
].each {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        def transition = it + i
        ['addProjectRoleActors','removeProjectRoleActors'].each { action ->
            gint.taskHelper.add([
                    [action    : action,
                     ext       : ":$action in $testRole role user $user before transition issue with_ $transition:after $action",
                     sleep     : sleep,
                     parameters: [
                             userId : "@self",
                             role   : testRole,
                             project: projectName
                     ],
                    ],
            ])
            gint.taskHelper.add([
                    [action    : 'transitionIssue',
                     ext       : "by $transition:after $action",
                     sleep     : defaultSleepTime,
                     parameters: [
                             issue     : key,
                             transition: transition,
                     ],
                    ],
            ])
            if(action == 'addProjectRoleActors'){
                gint.taskHelper.add([
                        [action    : 'getComments',
                         ext       : ": verify the comment added after transition issue with:$transition:after $action",
                         sleep     : defaultSleepTime,
                         parameters: [
                                 issue: value
                         ],
                         data  : [/$transition/],
                        ]
                ])
            } else {
                gint.taskHelper.add([
                        [action    : 'getComments',
                         ext       : ": verify the comment added after transition issue with:$transition:after $action",
                         sleep     : defaultSleepTime,
                         parameters: [
                                 issue: value
                         ],
                         failData  : [/$transition/],
                        ]
                ])
            }
        }

    }
}
[
        addCommentVisibleToTestGroup
].each {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        ['addUserToGroup', 'removeUserFromGroup'].each { action ->
            def transition = it + i
            gint.taskHelper.add([
                    [action    : action,
                     ext       : "$action:user $user to $testGroup",
                     sleep     : defaultSleepTime,
                     parameters: [
                             userId     : "@self",
                             group: testGroup,
                     ],
                    ],
            ])
            gint.taskHelper.add([
                    [action    : 'transitionIssue',
                     ext       : "by $transition:after $action",
                     sleep     : defaultSleepTime,
                     parameters: [
                             issue     : key,
                             transition: transition,
                     ],
                    ],
            ])
            if(action == 'addUserToGroup'){
                gint.taskHelper.add([
                        [action    : 'getComments',
                         ext       : ": verify the comment added after transition issue with:$transition:after $action",
                         sleep     : defaultSleepTime,
                         parameters: [
                                 issue: value
                         ],
                         data  : [/$transition/],
                        ]
                ])
            }else {
                gint.taskHelper.add([
                        [action    : 'getComments',
                         ext       : ": verify the comment added after transition issue with:$transition:after $action",
                         sleep     : defaultSleepTime,
                         parameters: [
                                 issue: value
                         ],
                         failData  : [/$transition/],
                        ]
                ])
            }

        }
    }
}

[
        addCommentVisibleToAdminProjectRole,
].each {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        ['removeProjectRoleActors', 'addProjectRoleActors'].each { action ->
            def transition = it + i
            gint.taskHelper.add([
                    [action    : action,
                     ext       : ":$action in admin role user $user before transition issue with_ $transition:",
                     sleep     : sleep,
                     parameters: [
                             userId : "@self",
                             role   : "Administrators",
                             project: projectName
                     ],
                    ],
            ])
            gint.taskHelper.add([
                    [action    : 'transitionIssue',
                     ext       : ":By transition_ $transition:after $action",
                     sleep     : sleep,
                     parameters: [
                             issue     : key,
                             transition: it + i,
                     ],
                    ],
            ])
            if (action == 'addProjectRoleActors') {
                gint.taskHelper.add([
                        [action    : 'getComments',
                         ext       : ":Verify comment added by postfunction after transition issue with_ $transition:acter $action",
                         sleep     : defaultSleepTime,
                         parameters: [
                                 issue: value
                         ],
                         data      : [/$transition/],
                        ]
                ])
            } else {
                gint.taskHelper.add([
                        [action    : 'getComments',
                         ext       : ":Verify comment added by postfunction after transition issue with_ $transition:after $action",
                         sleep     : defaultSleepTime,
                         parameters: [
                                 issue: value
                         ],
                         failData      : [/$transition/],
                        ]
                ])
            }
        }
    }
}

[
        //addCommentVisibleToAdminGroup
].each {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        def transition = it + i
        gint.taskHelper.add([
                [action    : 'transitionIssue',
                 ext       : ":By transition_ $transition:",
                 sleep     : defaultSleepTime,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ],
                ],
        ])
        gint.taskHelper.add([
                [action    : 'getComments',
                 ext       : ":Verify comment added by postfunction after transition issue with_ $transition:",
                 sleep     : defaultSleepTime,
                 parameters: [
                         issue: value
                 ],
                 data      : [/$transition/],
                ]
        ])
    }
}

[
        addCommentIfConditionTrue
].each {
    relatedIssuesMap.take(1).eachWithIndex { key, value, i ->
        ["Low","High"].eachWithIndex { priority, idx ->
            def transition = it + i
            gint.taskHelper.add([
                    [action: 'setFieldValue' ,
                     ext: " : Of priority to $priority to current issue before transition issue with $transition:",
                     sleep: defaultSleepTime,
                     parameters: [
                             issue: key,
                             field : "Priority",
                             value: priority
                     ],
                    ],
                    [action    : 'transitionIssue',
                     ext: ":by transition_ $transition _when priority of issue is_ $priority:",
                     sleep: defaultSleepTime,
                     parameters: [
                             issue     : key,
                             transition: transition,
                     ],
                    ],
            ])
            if(priority == "High") {
                gint.taskHelper.add([
                        [action      : 'getComments',
                         ext         : ":verify the comments added by postfunction after transition issue with_ $transition _when issue priority is_ $priority:",
                         sleep       : defaultSleepTime,
                         parameters  : [
                                 issue: value
                         ],
                         data        : [/$transition/],
                        ]
                ])
            } else {
                gint.taskHelper.add([
                        [action      : 'getComments',
                         ext         : ":verify the comments added by postfunction after transition issue with_ $transition _when issue priority is_ $priority:",
                         sleep       : defaultSleepTime,
                         parameters  : [
                                 issue: value
                         ],
                         failData        : [/$transition/],
                        ]
                ])
            }
        }
    }
}





