buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.gint:gint-atlassian:3.8.4"
    }
}

apply plugin: 'org.gint.atlassian'
apply from: gint.resourceDirectory +'/src/itest-postfunction4/postfunction.gradle'

def functionKey = info?.isCloud ? "com.atlassian.plugins.atlassian-connect-plugin:com.innovalog.${testCloudBuild}__CopyMultipleFieldsFunction" : 'com.innovalog.jmwe.jira-misc-workflow-extensions:copy-fields-function'

def fieldOptions = [
        assigneeToLabels : [ "copyFieldsConfig=[{\"sourceField\":\"assignee\",\"destinationField\":\"labels\"}]" ],
        copyOnlyIfNotSet : ["copyFieldsConfig=[{\"options\":{\"copyOnlyIfNotSet\":true},\"sourceField\":\"assignee\",\"destinationField\":\"labels\"}]"],
        createMissingValues : ["copyFieldsConfig=[{\"options\":{\"createMissingValues\":true},\"sourceField\":\"assignee\",\"destinationField\":\"components\"}]"],
        labelsToComponent : ["copyFieldsConfig=[{\"options\":{\"createMissingValues\":true},\"sourceField\":\"labels\",\"destinationField\":\"components\"}]"],
        ignoreEmptyValue : ["copyFieldsConfig=[{\"options\":{\"ignoreEmptyValue\":true},\"sourceField\":\"assignee\",\"destinationField\":\"labels\"}]"],
        appendValues : ["copyFieldsConfig=[{\"options\":{\"appendValues\":true},\"sourceField\":\"assignee\",\"destinationField\":\"labels\"}]"],
        removeValues : ["copyFieldsConfig=[{\"options\":{\"removeValues\":true},\"sourceField\":\"fixVersions\",\"destinationField\":\"versions\"}]"],
        useOldValue : ["copyFieldsConfig=[{\"options\":{\"useOldValue\":true},\"sourceField\":\"assignee\",\"destinationField\":\"labels\"}]"],
]

relatedIssue.eachWithIndex { targetIssue, fields, i ->
    def transition = 'verify_current_issue_in_destination_and_all_target_issue_options_from_source_issue_' + i
    def cloud =  "{\"problems\":[],\"sourceIssues\":\"$fields\",\"destinationIssues\":\"currentIssue:*\",\"copyFieldsConfig\":[{\"sourceField\":\"assignee\",\"destinationField\":\"labels\"}],\"runAsType\":\"addonUser\"}"
    def server =  [fieldOptions.assigneeToLabels , "selectedLinkTypeSource=$fields" , "selectedLinkTypeDestination=$currentIssue" , conditionalExecution.false , runAsUser.currentUser]
    addTransitionFunction(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.eachWithIndex { targetIssue, fields, i ->
    def transition = 'verify_current_issue_from_source_and_all_target_issue_options_to_destination_issue_' + i
    def cloud =  "{\"problems\":[],\"sourceIssues\":\"currentIssue:*\",\"destinationIssues\":\"$fields\",\"copyFieldsConfig\":[{\"sourceField\":\"assignee\",\"destinationField\":\"labels\"}],\"runAsType\":\"addonUser\"}"
    def server =  [fieldOptions.assigneeToLabels, "selectedLinkTypeSource=$currentIssue" , "selectedLinkTypeDestination=$fields" , conditionalExecution.false , runAsUser.currentUser]
    addTransitionFunction(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.eachWithIndex { targetIssue, fields, i ->
    def transition = 'verify_current_issue_in_destination_and_all_target_issue_options_from_source_issue_copyOnlyIfNotSet_' + i
    def cloud =  "{\"problems\":[],\"sourceIssues\":\"$fields\",\"destinationIssues\":\"currentIssue:*\",\"copyFieldsConfig\":[{\"options\":{\"copyOnlyIfNotSet\":true,\"ignoreEmptyValue\":false,\"appendValues\":false,\"useOldValue\":false},\"sourceField\":\"assignee\",\"destinationField\":\"labels\"}],\"runAsType\":\"addonUser\"}"
    def server =  [fieldOptions.copyOnlyIfNotSet , "selectedLinkTypeSource=$fields" , "selectedLinkTypeDestination=$currentIssue" , conditionalExecution.false , runAsUser.currentUser]
    addTransitionFunction(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.eachWithIndex { targetIssue, fields, i ->
    def transition = 'verify_current_issue_in_destination_and_all_target_issue_options_from_source_issue_ignoreEmptyValue_' + i
    def cloud =  "{\"problems\":[],\"sourceIssues\":\"$fields\",\"destinationIssues\":\"currentIssue:*\",\"copyFieldsConfig\":[{\"options\":{\"copyOnlyIfNotSet\":false,\"ignoreEmptyValue\":true,\"appendValues\":false,\"useOldValue\":false},\"sourceField\":\"assignee\",\"destinationField\":\"labels\"}],\"runAsType\":\"addonUser\"}"
    def server =  [fieldOptions.ignoreEmptyValue , "selectedLinkTypeSource=$fields" , "selectedLinkTypeDestination=$currentIssue" , conditionalExecution.false , runAsUser.currentUser]
    addTransitionFunction(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.eachWithIndex { targetIssue, fields, i ->
    def transition = 'verify_current_issue_in_destination_and_all_target_issue_options_from_source_issue_appendValues_' + i
    def cloud =  "{\"problems\":[],\"sourceIssues\":\"$fields\",\"destinationIssues\":\"currentIssue:*\",\"copyFieldsConfig\":[{\"options\":{\"copyOnlyIfNotSet\":false,\"ignoreEmptyValue\":false,\"appendValues\":true,\"useOldValue\":false},\"sourceField\":\"assignee\",\"destinationField\":\"labels\"}],\"runAsType\":\"addonUser\"}"
    def server =  [fieldOptions.appendValues , "selectedLinkTypeSource=$fields" , "selectedLinkTypeDestination=$currentIssue" , conditionalExecution.false , runAsUser.currentUser]
    addTransitionFunction(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.eachWithIndex { targetIssue, fields, i ->
    def transition = 'verify_current_issue_in_destination_and_all_target_issue_options_from_source_issue_removeValues_' + i
    def server =  [fieldOptions.removeValues , "selectedLinkTypeSource=$fields" , "selectedLinkTypeDestination=$currentIssue" , conditionalExecution.false , runAsUser.currentUser]
    if(!isCloud) {
        addTransitionFunction(transition, 'postfunction', server, functionKey)
    }
}

relatedIssue.eachWithIndex { targetIssue, fields, i ->
    def transition = 'verify_current_issue_in_destination_and_all_target_issue_options_from_source_issue_useOldValue_' + i
    def server =  [fieldOptions.useOldValue , "selectedLinkTypeSource=$fields" , "selectedLinkTypeDestination=$currentIssue" , conditionalExecution.false , runAsUser.currentUser]
    def cloud =  "{\"problems\":[],\"sourceIssues\":\"$fields\",\"destinationIssues\":\"currentIssue:*\",\"copyFieldsConfig\":[{\"options\":{\"copyOnlyIfNotSet\":false,\"ignoreEmptyValue\":false,\"appendValues\":false,\"useOldValue\":true},\"sourceField\":\"assignee\",\"destinationField\":\"labels\"}],\"runAsType\":\"addonUser\"}"
    addTransitionFunction(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

relatedIssue.eachWithIndex { targetIssue, fields, i ->
    def transition = 'verify_current_issue_in_destination_and_all_target_issue_options_from_source_issue_onlyIfConditionTrue' + i
    def cloud =  "{\"problems\":[],\"sourceIssues\":\"$fields\",\"destinationIssues\":\"currentIssue:*\",\"copyFieldsConfig\":[{\"sourceField\":\"assignee\",\"destinationField\":\"labels\"}],\"conditionalExecution\":true,\"conditionalExecutionScript\":\"$nunjuckExpression.checkPriorityHigh\",\"runAsType\":\"addonUser\"}"
    def server =  [fieldOptions.assigneeToLabels, "selectedLinkTypeSource=$fields" , "selectedLinkTypeDestination=$currentIssue" , conditionalExecution.true , runAsUser.currentUser]
    addTransitionFunction(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
}

runAsUser.remove("currentUser")
runAsUser.eachWithIndex { user, fieldsValue, index ->
    relatedIssue.eachWithIndex { targetIssue, fields, i ->
        def transition = 'verify_current_issue_from_source_and_all_target_issue_options_to_destination_issue_run_as_' + user + i
        def cloud =  "{\"copyFieldsConfig\":[{\"options\":{\"createMissingValues\":true},\"sourceField\":\"labels\",\"destinationField\":\"components\"}],\"sourceIssues\":\"currentIssue:*\",\"destinationIssues\":\"$fields\",\"problems\":[],$fieldsValue}"
        def server =  [fieldOptions.labelsToComponent , "selectedLinkTypeSource=$currentIssue" , "selectedLinkTypeDestination=$fields" , fieldsValue , conditionalExecution.false]
        addTransitionFunction(transition, 'postfunction', info?.isCloud ? cloud : server, functionKey)
        if(!isCloud) {
            moveTransitionFunction(transition, 4)
        }
    }
}

createWorkflowScheme()
createProject()

float testVersion = 1.0

gint.taskHelper.add(
        action: 'addVersion', ext: ": ",
        parameters: [
                project: projectName,
                version : testVersion
        ]
)
def testLabel = "label1"
def getCurrentUserName = info?.isCloud? currentUserKey : user

def current = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'current')
def parent = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'parent')
def subtask = createIssue([type: 'Sub-task', summary: 'JMWE_Issue', parent: { -> parent[]}], 'Sub-task')
def epic = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic')
def issueBelongsToEpic = createIssue([type: 'Task', summary: 'JMWE_Issue', field: "Epic Link", value: {-> epic[]} ], 'BelongsToEpic')
def initiative = createIssue([type: 'Initiative', summary: 'JMWE_Issue' ], 'Initiative')
def epic_initiative = createIssue([type: 'Epic', summary: 'JMWE_Issue', field: "Epic Name", value: "JMWE_Issue"], 'Epic_initiative')
def issueLinks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'issueLinks')
def blocks = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'blocks')
def clones = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'clones')
def duplicates = createIssue([type: 'Task', summary: 'JMWE_Issue'], 'duplicates')
def relatesTo = createIssue([type: 'Task', summary: 'JMWE_Task'], 'relatesTo')
def jqlIssue = createIssue([type: 'Task', summary: 'JQL_ISSUE'], 'jqlIssue')
updateIssue([issue: {->epic_initiative[]}, field: "Parent Link", value: {->initiative[]}], "parent initiative child epic")

def linkIssuesMap = [
        blocks : {->blocks[]},
        "$clonesLinkType" : {->clones[]},
        duplicates : {->duplicates[]},
        'relates to': {->relatesTo[]}
]

linkIssuesMap.eachWithIndex { key, value, i ->
    linkIssue([issue: {->issueLinks[]}, toIssue: value, link: "$key"], key)
}

def relatedIssuesMap = [
        {->current[]} : {->current[]},
        {->parent[]} : {->subtask[]},
        {->subtask[]} : {->parent[]},
        {->epic[]} : {->issueBelongsToEpic[]},
        {->issueBelongsToEpic[]} : {->epic[]},
        {-> initiative[]} : {->epic_initiative[]},
        {->epic_initiative[]} : {-> initiative[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->blocks[]},
        {->blocks[]} : {->issueLinks[]},
        {->issueLinks[]} : {->clones[]},
        {->clones[]} : {->issueLinks[]},
        {->issueLinks[]} : {->duplicates[]},
        {->duplicates[]} : {->issueLinks[]},
        {->issueLinks[]} : {->relatesTo[]},
        {->relatesTo[]} : {->issueLinks[]},
        {->issueLinks[]} : {->jqlIssue[]}
]
// COPY_ISSUE_FIELDS_Postfunction_-Verify all target issue Options from Source issues_user should be able to copy the value of the selected field from the target issue to current issue
// COPY_ISSUE_FIELDS_Postfunction_-Verify all target issue Options from Source issues_user should be able to copy the value of the selected field from the target issue to current issue
[
        'verify_current_issue_in_destination_and_all_target_issue_options_from_source_issue_',
        'verify_current_issue_from_source_and_all_target_issue_options_to_destination_issue_'
].collect {
    relatedIssuesMap.eachWithIndex { key, value, int i ->
        def currentIssue;
        def targetIssue
        if(it == 'verify_current_issue_in_destination_and_all_target_issue_options_from_source_issue_'){
            currentIssue = key
            targetIssue = value
        } else if(it == 'verify_current_issue_from_source_and_all_target_issue_options_to_destination_issue_') {
            currentIssue = value
            targetIssue = key
        }
        def transition = it+i
        gint.taskHelper.add([
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ":Of assignee of issue in which field to copy_ after transition issue with transition_$transition : ",
                 parameters : [
                         issue: currentIssue,
                         field: "Assignee",
                         value: " "
                 ]
                ],
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ":Of assignee to $user of issue from which value of assignee to copy to labels of linked issue after transition_ $transition : " ,
                 parameters : [
                         issue: targetIssue,
                         field: "Assignee",
                         value: user
                 ]
                ],
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ": Of labels to empty of the issue to which the value of labels copied by the postfunction by previous transition_ $transition : ",
                 parameters : [
                         issue: currentIssue,
                         field: "Labels",
                         value: " "
                 ]
                ],
                [action: 'transitionIssue',
                 sleep: sleep,
                 ext: ":with the transition _ $transition _value of field should be copied from target issue to current issue :",
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : ": COPY_ISSUE_FIELDS_Postfunction_verify after transition issue with_ $transition _value of field assignee should be copied to labels of linked issues:",
                 parameters: [
                         issue: currentIssue,
                         field: "Labels"
                 ],
                 data      : [ info?.isCloud ? "Labels  . . . . . . . . . . . : accountId:$getCurrentUserName" : "Labels  . . . . . . . . . . . : $user" ],
                ],
        ])
    }
}

// COPY_ISSUE_FIELDS_Postfunction_-Verify all target issue Options from Source issues_user should be able to copy the value of the selected field from the target issue to current issue_when target field is empty
// COPY_ISSUE_FIELDS_Postfunction_-Verify all target issue Options from Source issues_user should be able to copy the value of the selected field from the target issue to current issue_when target field is empty

[
        'verify_current_issue_in_destination_and_all_target_issue_options_from_source_issue_copyOnlyIfNotSet_',
].collect {
    relatedIssuesMap.eachWithIndex { key, value, int i ->
        def currentIssue;
        def targetIssue
        if(it == 'verify_current_issue_in_destination_and_all_target_issue_options_from_source_issue_copyOnlyIfNotSet_'){
            currentIssue = key
            targetIssue = value
        } else if(it == 'verify_current_issue_from_source_and_all_target_issue_options_to_destination_issue_') {
            currentIssue = value
            targetIssue = key
        }
        def transition = it+i
        gint.taskHelper.add([
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ":Of assignee of issue in which field to copy_ after transition issue with transition_$transition: ",
                 parameters : [
                         issue: currentIssue,
                         field: "Assignee",
                         value: " "
                 ]
                ],
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ":Of assignee to $user of issue from which value of assignee to copy to labels of linked issue after transition_ $transition : " ,
                 parameters : [
                         issue: targetIssue,
                         field: "Assignee",
                         value: user
                 ]
                ],
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ": Of labels to empty of the issue to which the value of labels copied by the postfunction by previous transition_ $transition : ",
                 parameters : [
                         issue: key,
                         field: "Labels",
                         value: " "
                 ]
                ],
                [action: 'transitionIssue',
                 sleep: sleep,
                 ext: ":with the transition _ $transition _when labels not set:",
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : ": COPY_ISSUE_FIELDS_Postfunction_verify after transision issue with_ $transition _ when labels not set:",
                 parameters: [
                         issue: key,
                         field: "Labels"
                 ],
                 data      : [ info?.isCloud ? "Labels  . . . . . . . . . . . : accountId:$getCurrentUserName" : "Labels  . . . . . . . . . . . : $user" ],
                ],
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ": Of labels to $testLabel of the issue to which the value of assignee  transition_ $transition : ",
                 parameters : [
                         issue: currentIssue,
                         field: "Labels",
                         value: testLabel
                 ]
                ],
                [action: 'transitionIssue',
                 sleep: sleep,
                 ext: ":with the transition _ $transition _when the labels is set :",
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : ": COPY_ISSUE_FIELDS_Postfunction_verify after transition issue with_ $transition _when labels is set:",
                 parameters: [
                         issue: currentIssue,
                         field: "Labels"
                 ],
                 failData      : [ info?.isCloud ? "Labels  . . . . . . . . . . . : accountId:$getCurrentUserName" : "Labels  . . . . . . . . . . . : $user" ],
                 data      : [ info?.isCloud ? "Labels  . . . . . . . . . . . : $testLabel" : "Labels  . . . . . . . . . . . : $testLabel" ],

                ],
        ])
    }
}

// COPY_ISSUE_FIELDS_Postfunction_-Verify all target issue Options from Source issues_user should be able to copy the value of the selected field from the target issue to current issue_when source field is empty
[
        'verify_current_issue_in_destination_and_all_target_issue_options_from_source_issue_ignoreEmptyValue_',
].collect {
    relatedIssuesMap.eachWithIndex { key, value, int i ->
        def transition = it+i
        gint.taskHelper.add([
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ":Of assignee to empty of issue from which the field to be copy_before transition issue with_ $transition : ",
                 parameters : [
                         issue: value,
                         field: "Assignee",
                         value: " "
                 ]
                ],
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ": set the labels to check ignore empty value_COPY_ISSUE_FIELDS_Postfunction_ $transition:" ,
                 parameters : [
                         issue: key,
                         field: "Labels",
                         value: testLabel
                 ]
                ],
                [action: 'transitionIssue',
                 sleep: sleep,
                 ext: ": COPY_ISSUE_FIELDS_Postfunction_transition issue to check :" +transition,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : ": COPY_ISSUE_FIELDS_Postfunction_ verify_ $transition _user should be able to copy the value of the selected field to the current issue from linked issue_when the source field is empty:",
                 parameters: [
                         issue: key,
                         field: "Labels"
                 ],
                 data      : [/Labels  . . . . . . . . . . . : $testLabel/],
                ],
        ])
    }
}

// COPY_ISSUE_FIELDS_Postfunction_-Verify all target issue Options from Source issues_user should be able to copy the value of the selected field from the target issue to current issue_when postfunction apppend values with existing
[
        'verify_current_issue_in_destination_and_all_target_issue_options_from_source_issue_appendValues_',
].collect {
    relatedIssuesMap.eachWithIndex { key, value, int i ->
        def transition = it+i
        gint.taskHelper.add([
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ": set Assignee to target issues to check COPY_ISSUE_FIELDS_Postfunction_ $transition : ",
                 parameters : [
                         issue: value,
                         field: "Assignee",
                         value: user
                 ]
                ],
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ": remove the labels added by postfunction by previous transition to next_COPY_ISSUE_FIELDS_Postfunction_ $transition:",
                 parameters : [
                         issue: key,
                         field: "Labels",
                         value: testLabel
                 ]
                ],
                [action: 'transitionIssue',
                 sleep: sleep,
                 ext: ": COPY_ISSUE_FIELDS_Postfunction_transition issue to check :" + transition ,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : ": COPY_ISSUE_FIELDS_Postfunction_verify_ $transition _user should be able to copy the value of the selected field to the current issue from linked issue_when postfunction append values with existing value:",
                 parameters: [
                         issue: key,
                         field: "Labels"
                 ],
                 data      : [info?.isCloud ? "Labels  . . . . . . . . . . . : accountId:$getCurrentUserName $testLabel" : "Labels  . . . . . . . . . . . : $user $testLabel"],
                ],
        ])
    }
}

// COPY_ISSUE_FIELDS_Postfunction_-Verify all target issue Options from Source issues_user should be able to copy the value of the selected field from the target issue to current issue_when postfunction removes values
[
        'verify_current_issue_in_destination_and_all_target_issue_options_from_source_issue_removeValues_',
].collect {
    relatedIssuesMap.eachWithIndex { key, value, int i ->
        if(!isCloud) {
            gint.taskHelper.add([
                    [action    : 'setFieldValue',
                     sleep: sleep,
                     ext       : ": set fix version to target issue to check remove values option_COPY_ISSUE_FIELDS_Postfunction_ $it : " + i,
                     parameters: [
                             issue: value,
                             field: "Fix Version/s",
                             value: testVersion
                     ]
                    ],
                    [action    : 'setFieldValue',
                     sleep: sleep,
                     ext       : ": set affects version to current issue to check remove values option_COPY_ISSUE_FIELDS_Postfunction_ $it : " + i,
                     parameters: [
                             issue: key,
                             field: "Affects Version/s",
                             value: testVersion
                     ]
                    ],
                    [action    : 'transitionIssue',
                     sleep: sleep,
                     ext       : ": COPY_ISSUE_FIELDS_Postfunction_transition issue to check :" + it + i,
                     parameters: [
                             issue     : key,
                             transition: it + i,
                     ]
                    ],
                    [action    : 'getFieldValue',
                     sleep: sleep,
                     ext       : ": COPY_ISSUE_FIELDS_Postfunction_ $it _user should be able to copy the value of the selected field to the current issue from linked issue_remove the value if having before transition:" + it + i,
                     parameters: [
                             issue: key,
                             field: "Affects Version/s"
                     ],
                     failData  : ["Fix Version/s . . . . . . . . : $testVersion"],
                    ],
            ])
        }
    }
}

// COPY_ISSUE_FIELDS_Postfunction_-Verify all target issue Options from Source issues_user should be able to copy the value of the selected field from the target issue to current issue_when postfunction uses old values
[
        'verify_current_issue_in_destination_and_all_target_issue_options_from_source_issue_useOldValue_'
].collect {
    relatedIssuesMap.eachWithIndex { key, value, int i ->
        gint.taskHelper.add([
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ": set Assignee to target issues to check COPY_ISSUE_FIELDS_Postfunction_ $it : " + i,
                 parameters : [
                         issue: value,
                         field: "Assignee",
                         value: user
                 ]
                ],
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ": remove the labels added by postfunction by previous transition to next_COPY_ISSUE_FIELDS_Postfunction_ $it : " + i,
                 parameters : [
                         issue: key,
                         field: "Labels",
                         value: " "
                 ]
                ],
                [action: 'transitionIssue',
                 sleep: sleep,
                 ext: ": COPY_ISSUE_FIELDS_Postfunction_transition issue to check :" + it + i,
                 parameters: [
                         issue     : key,
                         transition: it + i,
                         assignee: testUser
                 ]
                ],
                [action    : 'getFieldValue',
                 sleep: sleep,
                 ext       : ": COPY_ISSUE_FIELDS_Postfunction_ $it _user should be able to copy the value of the selected field to the current issue from linked issue_when postfunction set old value:" + it+ i,
                 parameters: [
                         issue: key,
                         field: "Labels"
                 ],
                 data      : [info?.isCloud ? "Labels  . . . . . . . . . . . : accountId:$getCurrentUserName" : "Labels  . . . . . . . . . . . : $user"],
                ],
        ])
    }
}

// COPY_ISSUE_FIELDS_Postfunction_-Verify all target issue Options from Source issues_user should be able to copy the value of the selected field from the target issue to current issue_when postfunction uses old values
[
        'verify_current_issue_in_destination_and_all_target_issue_options_from_source_issue_onlyIfConditionTrue'
].collect {
    ["High","Low"].eachWithIndex{ priority, int idx ->
        relatedIssuesMap.eachWithIndex { key, value, int i ->
            def expectedData = info?.isCloud ? "Labels  . . . . . . . . . . . : accountId:$getCurrentUserName" : "Labels  . . . . . . . . . . . : $user"
            gint.taskHelper.add([
                    [action: 'setFieldValue',
                     sleep: sleep,
                     ext: ": set the priority to $priority _to check COPY_ISSUE_FIELDS_Postfunction_$it : " + i,
                     parameters : [
                             issue: key,
                             field: "Priority",
                             value: priority
                     ]
                    ],
                    [action: 'setFieldValue',
                     sleep: sleep,
                     ext: ": set Assignee to target issues to check COPY_ISSUE_FIELDS_Postfunction_ $it : " + i + ": when priority is $priority:",
                     parameters : [
                             issue: value,
                             field: "Assignee",
                             value: user
                     ]
                    ],
                    [action: 'setFieldValue',
                     sleep: sleep,
                     ext: ": remove the labels added by postfunction by previous transition to next_COPY_ISSUE_FIELDS_Postfunction_ $it : " + i + ": when priority is $priority",
                     parameters : [
                             issue: key,
                             field: "Labels",
                             value: " "
                     ]
                    ],
                    [action: 'transitionIssue',
                     sleep: sleep,
                     ext: ": COPY_ISSUE_FIELDS_Postfunction_transition issue to check :" + it + i + ": when priorit is $priority:",
                     parameters: [
                             issue     : key,
                             transition: it + i,
                     ]
                    ],
            ]
            )
            if(priority == "High") {
                gint.taskHelper.add([
                        [action    : 'getFieldValue',
                         sleep     : sleep,
                         ext       : ": COPY_ISSUE_FIELDS_Postfunction_ $it _user should be able to copy the value of the selected field to the current issue from linked issue:" + it + i + ": when priority is $priority",
                         parameters: [
                                 issue: key,
                                 field: "Labels"
                         ],
                         data      : [expectedData],
                        ],
                ])
            }else {
                gint.taskHelper.add([
                        [action    : 'getFieldValue',
                         sleep     : sleep,
                         ext       : ": COPY_ISSUE_FIELDS_Postfunction_ $it _user should be able to copy the value of the selected field to the current issue from linked issue:" + it + i + ": when priority is $priority",
                         parameters: [
                                 issue: key,
                                 field: "Labels"
                         ],
                         failData      : [expectedData],
                        ],
                ])
            }
        }
    }
}

[
        'specificUser',
        'userInFieldReporter',
        'userInFieldCreator',
        'userFromScript'
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        def getCurrentUserName1 = info?.isCloud? info?.userDisplayName : user
        def transition = 'verify_current_issue_from_source_and_all_target_issue_options_to_destination_issue_run_as_' + it + i
        gint.taskHelper.add([
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ": set Assignee to target issues to check COPY_ISSUE_FIELDS_Postfunction_ $transition : ",
                 parameters : [
                         issue: key,
                         field: "Labels",
                         value: it + i
                 ]
                ],
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ": remove the labels added by postfunction by previous transition to next_COPY_ISSUE_FIELDS_Postfunction_ $transition : ",
                 parameters : [
                         issue: value,
                         field: "Components",
                         value: " "
                 ]
                ],
                [action: 'transitionIssue',
                 sleep: sleep,
                 ext: ": COPY_ISSUE_FIELDS_Postfunction_transition issue to check :" + transition,
                 parameters: [
                         issue     : key,
                         transition: transition,
                 ]
                ],
                [action    : 'getIssueHistoryList',
                 sleep: sleep,
                 ext       : ": COPY_ISSUE_FIELDS_Postfunction_ $transition _user should be able to copy the value of the selected field from the current issue to linked issue:" + transition,
                 parameters: [
                         issue: value,
                         outputType: "text",
                         columns: "Author,Field,'To String'",
                         select: ["Author:$getCurrentUserName1","Field:Component","To String:$it$i"],
                 ],
                 data      : ["$getCurrentUserName1", "Component", "$it$i"],
                ],
        ])
    }
}

[
        'userInFieldAssignee',
].each {
    relatedIssuesMap.eachWithIndex { key, value, i ->
        def getCurrentUserName1 = info?.isCloud? info?.userDisplayName : user
        def transition = 'verify_current_issue_from_source_and_all_target_issue_options_to_destination_issue_run_as_' + it +i
        gint.taskHelper.add([
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ": set labels to target issues to check COPY_ISSUE_FIELDS_Postfunction_ $transition : " ,
                 parameters : [
                         issue: key,
                         field: "Labels",
                         value: it + i
                 ]
                ],
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ": set Assignee to target issues to check COPY_ISSUE_FIELDS_Postfunction_ $transition : ",
                 parameters : [
                         issue: key,
                         field: "Assignee",
                         value: user
                 ]
                ],
                [action: 'setFieldValue',
                 sleep: sleep,
                 ext: ": remove the labels added by postfunction by previous transition to next_COPY_ISSUE_FIELDS_Postfunction_ $transition : " ,
                 parameters : [
                         issue: value,
                         field: "Components",
                         value: " "
                 ]
                ],
                [action: 'transitionIssue',
                 sleep: sleep,
                 ext: ": COPY_ISSUE_FIELDS_Postfunction_transition issue to check :" + transition ,
                 parameters: [
                         issue     : key,
                         transition: transition,
                 ]
                ],
                [action    : 'getIssueHistoryList',
                 sleep: sleep,
                 ext       : ": COPY_ISSUE_FIELDS_Postfunction_ $transition _user should be able to copy the value of the selected field from the current issue to linked issue:" + transition,
                 parameters: [
                         issue: value,
                         outputType: "text",
                         columns: "Author,Field,'To String'",
                         select: ["Author:$getCurrentUserName1","Field:Component","To String:$it$i"],
                 ],
                 data      : ["$getCurrentUserName1", "Component", "$it$i"],
                ],
        ])
    }
}